<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>A Blog</title>
        <link>https://blog.timerever.tk</link>
        <description>Just another blog.</description>
        <language>zh-CN</language>
        <pubDate>Wed, 05 Jan 2022 07:00:00 +0000</pubDate>
        <lastBuildDate>Wed, 05 Jan 2022 07:00:00 +0000</lastBuildDate>
        <category>Java</category>
        <category>HttpClient</category>
        <category>Design Pattern</category>
        <category>Docker</category>
        <category>Dockerfile</category>
        <category>Java Web</category>
        <category>Linux</category>
        <category>C</category>
        <category>Factory Patterns</category>
        <category>Android</category>
        <category>Huawei</category>
        <category>CyanogenMod</category>
        <category>Git</category>
        <category>GitHub</category>
        <category>Hibernate</category>
        <category>VMware</category>
        <category>vmdk</category>
        <category>Keycloak</category>
        <category>OAuth2</category>
        <category>SSO</category>
        <category>wget</category>
        <category>Regular Expression</category>
        <category>Ubuntu</category>
        <category>Ruby</category>
        <category>Jekyll</category>
        <category>Windows</category>
        <category>Regedit</category>
        <category>PowerShell</category>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2022/01/05/keycloak-custom-idp/</guid>
            <title>Keycloak 配置自定义社交帐号登录组件</title>
            <link>https://blog.timerever.tk/2022/01/05/keycloak-custom-idp/</link>
            <category>Java</category>
            <category>Keycloak</category>
            <category>OAuth2</category>
            <category>SSO</category>
            <pubDate>Wed, 05 Jan 2022 07:00:00 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;由于 Keycloak 由红帽开发维护，所以其自带的 Social Identity Providers 都是国外的平台。现有需求对接公司 SSO，且由于国内 OAuth2 协议实现均不标准（公司的也是），所以无法使用 Keycloak 的 OpenID Connect 自定义接入，需要自己扩展 Identity Provider 实现。和国内的微信、钉钉、飞书等系统接入代码类似，但发现现有的接入组件没有实现 &lt;code&gt;UserAttributeMapper&lt;/code&gt;，且版本变动，代码并不兼容，所以参考 Github 的实现进行开发。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Keycloak 使用当前最新版：16.1.0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;一、自定义-IdentityProvider&#34;&gt;&lt;a href=&#34;#一、自定义-IdentityProvider&#34; class=&#34;headerlink&#34; title=&#34;一、自定义 IdentityProvider&#34;&gt;&lt;/a&gt;一、自定义 IdentityProvider&lt;/h2&gt;&lt;h3 id=&#34;0-引入依赖&#34;&gt;&lt;a href=&#34;#0-引入依赖&#34; class=&#34;headerlink&#34; title=&#34;0. 引入依赖&#34;&gt;&lt;/a&gt;0. 引入依赖&lt;/h3&gt;&lt;p&gt;引入 Keycloak 相关依赖，依赖版本要与使用的 Keycloak 版本保持一致，scope 使用 &lt;code&gt;provided&lt;/code&gt; 即可。&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.keycloak&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;keycloak-services&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;$&amp;#123;keycloak.version&amp;#125;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;provided&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.keycloak&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;keycloak-server-spi&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;$&amp;#123;keycloak.version&amp;#125;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;provided&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.keycloak&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;keycloak-server-spi-private&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;$&amp;#123;keycloak.version&amp;#125;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;provided&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;0-5-自定义-IdentityProvider&#34;&gt;&lt;a href=&#34;#0-5-自定义-IdentityProvider&#34; class=&#34;headerlink&#34; title=&#34;0.5. 自定义 IdentityProvider&#34;&gt;&lt;/a&gt;0.5. 自定义 IdentityProvider&lt;/h3&gt;&lt;p&gt;由于后续需要，我们先新建一个 IdentityProvider 放在这里。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyIdentityProvider&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AbstractOAuth2IdentityProvider&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;OAuth2IdentityProviderConfig&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SocialIdentityProvider&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;OAuth2IdentityProviderConfig&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyIdentityProvider&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(KeycloakSession session, OAuth2IdentityProviderConfig config)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;super&lt;/span&gt;(session, config);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;getDefaultScopes&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;1-自定义-IdentityProviderFactory&#34;&gt;&lt;a href=&#34;#1-自定义-IdentityProviderFactory&#34; class=&#34;headerlink&#34; title=&#34;1. 自定义 IdentityProviderFactory&#34;&gt;&lt;/a&gt;1. 自定义 IdentityProviderFactory&lt;/h3&gt;&lt;p&gt;我们先来看一下 GitHub 的 &lt;code&gt;GitHubIdentityProviderFactory&lt;/code&gt;，很简单，有一个唯一的 &lt;code&gt;PROVIDER_ID&lt;/code&gt;，然后 &lt;code&gt;getName&lt;/code&gt; 方法返回了一个名称用于展示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/keycloak-custom-idp-1.png&#34; alt=&#34;Github IdentityProviderFactory&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们照着改一下即可。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyIdentityProviderFactoryFactory&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AbstractIdentityProviderFactory&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;MyIdentityProvider&lt;/span&gt;&amp;gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SocialIdentityProviderFactory&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;MyIdentityProvider&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; String PROVIDER_ID = &lt;span class=&#34;string&#34;&gt;&amp;quot;my-idp&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;My IDP&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; MyIdentityProvider &lt;span class=&#34;title&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(KeycloakSession session, IdentityProviderModel model)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MyIdentityProvider(session, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; OAuth2IdentityProviderConfig(model));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; IdentityProviderModel &lt;span class=&#34;title&#34;&gt;createConfig&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; OAuth2IdentityProviderConfig();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;getId&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; PROVIDER_ID;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;2-自定义-IdentityProvider&#34;&gt;&lt;a href=&#34;#2-自定义-IdentityProvider&#34; class=&#34;headerlink&#34; title=&#34;2. 自定义 IdentityProvider&#34;&gt;&lt;/a&gt;2. 自定义 IdentityProvider&lt;/h3&gt;&lt;h4 id=&#34;先定义并在构造时传入-Authorize、Token-及-Profile-的-Url。&#34;&gt;&lt;a href=&#34;#先定义并在构造时传入-Authorize、Token-及-Profile-的-Url。&#34; class=&#34;headerlink&#34; title=&#34;先定义并在构造时传入 Authorize、Token 及 Profile 的 Url。&#34;&gt;&lt;/a&gt;先定义并在构造时传入 Authorize、Token 及 Profile 的 Url。&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;/keycloak-custom-idp-2.png&#34; alt=&#34;AUTH URL&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;重写必须要求实现的抽象方法&#34;&gt;&lt;a href=&#34;#重写必须要求实现的抽象方法&#34; class=&#34;headerlink&#34; title=&#34;重写必须要求实现的抽象方法&#34;&gt;&lt;/a&gt;重写必须要求实现的抽象方法&lt;/h4&gt;&lt;p&gt;重写 &lt;code&gt;getDefaultScopes&lt;/code&gt; 的抽象方法，返回自定义 SCOPE。&lt;/p&gt;
&lt;h4 id=&#34;按需重写方法&#34;&gt;&lt;a href=&#34;#按需重写方法&#34; class=&#34;headerlink&#34; title=&#34;按需重写方法&#34;&gt;&lt;/a&gt;按需重写方法&lt;/h4&gt;&lt;p&gt;首先重写 &lt;code&gt;supportsExternalExchange&lt;/code&gt;方法，写死返回 &lt;code&gt;true&lt;/code&gt;。这个官方文档也没有找到注释，但是各实现类均这么重写的，所以这里我们也一起重写。&lt;/p&gt;
&lt;p&gt;由于我们继承了 &lt;code&gt;AbstractOAuth2IdentityProvider&lt;/code&gt;，剩下的可以直接看抽象类的实现，按需重写非标准定义下无法使用默认实现调用的方法。&lt;/p&gt;
&lt;p&gt;比如我需要对应自己系统返回的 &lt;code&gt;User&lt;/code&gt; 和 Keycloak 的 &lt;code&gt;User&lt;/code&gt; 对象的字段映射关系，所以重写 &lt;code&gt;extractIdentityFromProfile&lt;/code&gt; 方法。这个方法也是默认空实现，一定要重写的。我们可以直接拷贝 GitHub 的实现再进行修改，同时，如果我们需要额外存储用户信息，可以使用 &lt;code&gt;setUserAttribute&lt;/code&gt; 方法进行。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; BrokeredIdentityContext &lt;span class=&#34;title&#34;&gt;extractIdentityFromProfile&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(EventBuilder event, JsonNode profile)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    BrokeredIdentityContext user = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; BrokeredIdentityContext(getJsonProperty(profile, &lt;span class=&#34;string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String username = getJsonProperty(profile, &lt;span class=&#34;string&#34;&gt;&amp;quot;login&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    user.setUsername(username);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    user.setName(getJsonProperty(profile, &lt;span class=&#34;string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    user.setEmail(getJsonProperty(profile, &lt;span class=&#34;string&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    user.setIdpConfig(getConfig());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    user.setIdp(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    user.setUserAttribute(USER_ATTRIBUTE_EMPLOY_ID, getJsonProperty(profile, USER_ATTRIBUTE_EMPLOY_ID));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    AbstractJsonUserAttributeMapper.storeUserProfileForMapper(user, profile, getConfig().getAlias());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; user;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;3-重写回调方法&#34;&gt;&lt;a href=&#34;#3-重写回调方法&#34; class=&#34;headerlink&#34; title=&#34;3. 重写回调方法&#34;&gt;&lt;/a&gt;3. 重写回调方法&lt;/h3&gt;&lt;p&gt;可以发现，我们之前重写的方法，都是接受到回调之后获取 token、获取用户信息的逻辑，如果我们的回调接口传参也不是标准实现的话，那么我们可以重写回调方法。&lt;/p&gt;
&lt;h4 id=&#34;自定义-Endpoint&#34;&gt;&lt;a href=&#34;#自定义-Endpoint&#34; class=&#34;headerlink&#34; title=&#34;自定义 Endpoint&#34;&gt;&lt;/a&gt;自定义 Endpoint&lt;/h4&gt;&lt;p&gt;编写自定义 Endpoint 类，继承 &lt;code&gt;AbstractOAuth2IdentityProvider&lt;/code&gt; 内部 &lt;code&gt;Endpoint&lt;/code&gt; 类。然后重写 &lt;code&gt;authResponse&lt;/code&gt; 方法，自定义接收参数，然后仿照默认实现，通过 &lt;code&gt;authorizationCode&lt;/code&gt; 换取用户信息并通过 &lt;code&gt;callback.authenticated(federatedIdentity)&lt;/code&gt; 返回。&lt;/p&gt;
&lt;h4 id=&#34;注册自定义-Endpoint&#34;&gt;&lt;a href=&#34;#注册自定义-Endpoint&#34; class=&#34;headerlink&#34; title=&#34;注册自定义 Endpoint&#34;&gt;&lt;/a&gt;注册自定义 Endpoint&lt;/h4&gt;&lt;p&gt;重写 &lt;code&gt;AbstractOAuth2IdentityProvider&lt;/code&gt; 的 &lt;code&gt;callback&lt;/code&gt; 方法，返回自定义 Endpoint。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;title&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(RealmModel realm, AuthenticationCallback callback, EventBuilder event)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MyEndpoint(callback, realm, event);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;4-注册-IdentityProviderFactory&#34;&gt;&lt;a href=&#34;#4-注册-IdentityProviderFactory&#34; class=&#34;headerlink&#34; title=&#34;4. 注册 IdentityProviderFactory&#34;&gt;&lt;/a&gt;4. 注册 IdentityProviderFactory&lt;/h3&gt;&lt;p&gt;在 &lt;code&gt;resources&lt;/code&gt; 文件夹下，新建 &lt;code&gt;MEAT-INF&lt;/code&gt; 文件夹，并在其下面建立 &lt;code&gt;services&lt;/code&gt; 文件。新增 &lt;code&gt;org.keycloak.broker.social.SocialIdentityProviderFactory&lt;/code&gt; 文件，在里面直接填写 &lt;code&gt;MyIdentityProviderFactory&lt;/code&gt; 的全限定类名即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/keycloak-custom-idp-3.png&#34; alt=&#34;注册 IdentityProviderFactory&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;大体流程就是这样，OAuth2 认证后回调默认的 &lt;code&gt;EndPoint&lt;/code&gt; 类的 &lt;code&gt;authResponse&lt;/code&gt; 方法。如果大体流程标准，且回调参数标准，可以直接参照默认实现，按需重写所调用的 &lt;code&gt;IdentityProvider&lt;/code&gt; 方法；如果回调参数会流程不标准，则需要自定义 EndPoint 并进行注册，再重写 &lt;code&gt;authResponse&lt;/code&gt; 方法。&lt;/p&gt;
&lt;h2 id=&#34;二、自定义-IdentityProvider-配置页&#34;&gt;&lt;a href=&#34;#二、自定义-IdentityProvider-配置页&#34; class=&#34;headerlink&#34; title=&#34;二、自定义 IdentityProvider 配置页&#34;&gt;&lt;/a&gt;二、自定义 IdentityProvider 配置页&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在新建&amp;#x2F;编辑 IdentityProvider 时，页面元素是可以配置的，我们可以按需增减页面需要填写的字段。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先打开 Keycloak 路径下的 &lt;code&gt;themes\base\admin\resources\partials\&lt;/code&gt; 文件夹，我们还是将 &lt;code&gt;realm-identity-provider-github.html&lt;/code&gt; 及 &lt;code&gt;realm-identity-provider-github-ext.html&lt;/code&gt; 复制并重命名为 &lt;code&gt;realm-identity-provider-my-idp.html&lt;/code&gt; 及 &lt;code&gt;realm-identity-provider-my-idp-ext.html&lt;/code&gt;。如果不需要自定义，那么保持原样即可。如果需要修改页面字段展示，打开 &lt;code&gt;realm-identity-provider-my-idp.html&lt;/code&gt; 文件，将文件内容替换为 &lt;code&gt;realm-identity-provider-social.html&lt;/code&gt; 文件的内容，然后再对其进行修改即可。我们可以看到，默认页面就是引用了这个文件的内容。&lt;/p&gt;
&lt;h2 id=&#34;三、部署-jar-文件&#34;&gt;&lt;a href=&#34;#三、部署-jar-文件&#34; class=&#34;headerlink&#34; title=&#34;三、部署 jar 文件&#34;&gt;&lt;/a&gt;三、部署 jar 文件&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;以 standalone 模式为例：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将打包后的 jar 文件复制到 &lt;code&gt;standalone\deployments\&lt;/code&gt; 文件夹，不需要重启服务，Keycloak 会自动热部署，并在同级目录生成 &lt;code&gt;文件名.deployed&lt;/code&gt; 文件。&lt;/p&gt;
&lt;p&gt;如果后续调用时出现 问题，可以参考 &lt;a href=&#34;https://stackoverflow.com/questions/57778240/noclassdeffounderror-in-a-provider-jar-when-using-a-class-from-org-keycloak-auth&#34;&gt;NoClassDefFoundError in a provider jar&lt;/a&gt; 在 &lt;code&gt;maven-jar-plugin&lt;/code&gt; 插件配置依赖即可。&lt;/p&gt;
&lt;h2 id=&#34;四、使用自定义-IDP&#34;&gt;&lt;a href=&#34;#四、使用自定义-IDP&#34; class=&#34;headerlink&#34; title=&#34;四、使用自定义 IDP&#34;&gt;&lt;/a&gt;四、使用自定义 IDP&lt;/h2&gt;&lt;p&gt;回到 Keycloak 后台，右上角点击 &lt;code&gt;Server Info&lt;/code&gt;，切到 &lt;code&gt;Providers&lt;/code&gt; Tab，如果在 &lt;code&gt;social&lt;/code&gt; 栏看到了 &lt;code&gt;my-idp&lt;/code&gt;（即上面定义的 provider id），说明部署成功，在 Identity Providers 后台正常新增即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/keycloak-custom-idp-4.png&#34; alt=&#34;展示出了 my-idp&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;五、自定义-UserAttributeMapper&#34;&gt;&lt;a href=&#34;#五、自定义-UserAttributeMapper&#34; class=&#34;headerlink&#34; title=&#34;五、自定义 UserAttributeMapper&#34;&gt;&lt;/a&gt;五、自定义 UserAttributeMapper&lt;/h2&gt;&lt;p&gt;由于之前我们需要额外储存用户信息，所以在重写 &lt;code&gt;extractIdentityFromProfile&lt;/code&gt; 方法时，使用了 &lt;code&gt;setUserAttribute&lt;/code&gt; 方法设置自定义属性。但由于 Keycloak 是冗余的用户数据，我们希望用户每次登录后，都可以自动更新用户信息。我们当然可以在 IDP 的配置中设置 &lt;code&gt;Sync Mode&lt;/code&gt; 为 &lt;code&gt;force&lt;/code&gt; 来每次更新用户信息，但此时只会自动同步更新 User 中 Details Tab 下的基本信息，不会再次同步 Attributes。&lt;br&gt;正常我们就会想到，可以通过设置 IDP 的 Mappers 来进行属性的放置，结果就会发现，&lt;code&gt;Mapper Type&lt;/code&gt; 只有三个 Hardcoded 开头的硬编码的 Mapper。所以为了能够重新使用 &lt;code&gt;Attribute Importer&lt;/code&gt;，需要我们自定义一个 &lt;code&gt;UserAttributeMapper&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;1-自定义-UserAttributeMapper&#34;&gt;&lt;a href=&#34;#1-自定义-UserAttributeMapper&#34; class=&#34;headerlink&#34; title=&#34;1. 自定义 UserAttributeMapper&#34;&gt;&lt;/a&gt;1. 自定义 UserAttributeMapper&lt;/h3&gt;&lt;p&gt;仍然参考 GitHub 的 &lt;code&gt;GitHubUserAttributeMapper&lt;/code&gt;，直接拷贝过来，将 &lt;code&gt;PROVIDER_ID&lt;/code&gt; 改成自己的即可。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyUserAttributeMapper&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AbstractJsonUserAttributeMapper&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; String PROVIDER_ID = &lt;span class=&#34;string&#34;&gt;&amp;quot;my-idp-user-attribute-mapper&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; String[] cp = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; String[] &amp;#123; MyIdentityProviderFactory.PROVIDER_ID &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String[] getCompatibleProviders() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; cp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;getId&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; PROVIDER_ID;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在这我们也可以看到，Keycloak 是通过 &lt;code&gt;AbstractJsonUserAttributeMapper&lt;/code&gt; 的 &lt;code&gt;getCompatibleProviders&lt;/code&gt; 方法来控制 IDP 可选哪些 Mapper 的。&lt;/p&gt;
&lt;h3 id=&#34;2-注册自定义-UserAttributeMapper&#34;&gt;&lt;a href=&#34;#2-注册自定义-UserAttributeMapper&#34; class=&#34;headerlink&#34; title=&#34;2. 注册自定义 UserAttributeMapper&#34;&gt;&lt;/a&gt;2. 注册自定义 UserAttributeMapper&lt;/h3&gt;&lt;p&gt;同之前注册 &lt;code&gt;IdentityProvider&lt;/code&gt;，在 &lt;code&gt;META-INF/service/&lt;/code&gt; 下新建 &lt;code&gt;org.keycloak.broker.provider.IdentityProviderMapper&lt;/code&gt; 文件，并在其中填写我们自定义的 UserAttributeMapper 的全限定类名。&lt;br&gt;最后，别忘了重新打包部署，我们就可以继续在自定义的 IDP 中使用 &lt;code&gt;Attribute Importer&lt;/code&gt; 了。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2021/12/02/hibernate-incorrect-metamodel-with-no-reationship/</guid>
            <title>Hibernate 解决 Metamodel 属性类型错误问题</title>
            <link>https://blog.timerever.tk/2021/12/02/hibernate-incorrect-metamodel-with-no-reationship/</link>
            <category>Java</category>
            <category>Hibernate</category>
            <pubDate>Thu, 02 Dec 2021 03:41:48 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;因为项目上使用了 Hibernate Metamodel，而且自定义映射了数据库的 JSON 字段类型，导致生成的 Metamodel 属性类型有误。虽然并没有用映射的这些属性做 &lt;code&gt;CriteriaQuery&lt;/code&gt;，所以其实在项目的使用上没有影响，但是启动时还是会报一个 ERROR 日志，所以寻找一个能够根治的解决办法。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ERROR org.hibernate.metamodel.internal.MetadataContext [MetadataContext.java:491] - HHH015007: Illegal argument on static metamodel field injection : Foo_#bars; expected type : org.hibernate.metamodel.model.domain.internal.SingularAttributeImpl; encountered type : javax.persistence.metamodel.MapAttribute&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h3 id=&#34;一、定位问题&#34;&gt;&lt;a href=&#34;#一、定位问题&#34; class=&#34;headerlink&#34; title=&#34;一、定位问题&#34;&gt;&lt;/a&gt;一、定位问题&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;首先是背景信息：&lt;/strong&gt; 因为前端需要在数据库存储 JSON 字段，而且现在版本的 MySQL 天然支持 JSON ，所以建表时采用了 JSON 作为字段类型。然后在 JPA 实体层面，引入了 &lt;code&gt;hibernate-types&lt;/code&gt; 依赖来增加 Hibernate 对 JSON 的支持，字段属性增加了 &lt;code&gt;@Type(type = &amp;quot;json&amp;quot;)&lt;/code&gt; 注解，本身定义为了 &lt;code&gt;Map&lt;/code&gt; 类型。&lt;/p&gt;
&lt;p&gt;其实在 Hibernate 对 JSON 处理这件事情上，传统方案是通过自定义 &lt;code&gt;Convert&lt;/code&gt; 来实现。或者可能不是 JSON Object 而是 JSON Array，但无论是哪种情况，均会遇到同样的问题。&lt;/p&gt;
&lt;p&gt;通过报错信息，对代码进行 DEBUG 后得知，Hibernate 在启动时，会根据实体属性是否存在与其他实体的关系，生成不同的 &lt;code&gt;Attribute&lt;/code&gt;。比如 OneToMany 一对多关系就会生成 &lt;code&gt;ListAttribute&lt;/code&gt; 或 &lt;code&gt;SetAttribute&lt;/code&gt;，没有关系的属性都是 &lt;code&gt;SingularAttribute&lt;/code&gt;。而启动时通过反射，会 set Metamodel 的对应属性，我们可以在 target 下面看见，Metamodel 的类型为 &lt;code&gt;MapAttribute&lt;/code&gt;，所以我们可以确定，问题就出在了生成 Metamodel 的时候。具体是不是直接拿实体定义的数据类型来生成的我没有去看源码，不过可以肯定的是它在判断类型的时候缺少额外的判断。&lt;/p&gt;
&lt;h3 id=&#34;二、解决问题&#34;&gt;&lt;a href=&#34;#二、解决问题&#34; class=&#34;headerlink&#34; title=&#34;二、解决问题&#34;&gt;&lt;/a&gt;二、解决问题&lt;/h3&gt;&lt;p&gt;同样作为一个共性问题，在 Goolge 进行搜索后，定位到了一条仍然是 Hibernate 官方 Bug 追踪的链接 &lt;a href=&#34;https://hibernate.atlassian.net/browse/HHH-12338&#34;&gt;Incorrect metamodel for basic collections&lt;/a&gt;。简单的来说，就是当前已经在 5.5.0.Alpha1 的版本中得到了解决，不过如果你认真看了下面整个的 Activity 记录，就会发现仍然是存在一个小插曲。&lt;/p&gt;
&lt;h3 id=&#34;三、插曲&#34;&gt;&lt;a href=&#34;#三、插曲&#34; class=&#34;headerlink&#34; title=&#34;三、插曲&#34;&gt;&lt;/a&gt;三、插曲&lt;/h3&gt;&lt;p&gt;这个问题是在 2018 年的 3 月份被提出来的，而 5.5.0.Alpha1 已经是 2021 年 8 月份的事情了，照理说这么一个小问题不会需要三年多的时间来处理，而这个疑问的答案就在下面的讨论之中。&lt;/p&gt;
&lt;p&gt;简单来说，这个问题在当月就被解决掉了，伴随着 5.2.17 的版本发布，这个问题理论上来说就不应该再存在了。然而事与愿违，在 5.2.17 版本发布之后，很快就有人提出了新的问题。在下面的 Comment 中有记录，同时这个人也单独提了一个 issue &lt;a href=&#34;https://hibernate.atlassian.net/browse/HHH-12581&#34;&gt;NPE for Criteria query containing fetch join as a regression of HHH-12338&lt;/a&gt;，即这次的改动造成了 NPE。然后可以看到在另一个维护者与之前 Vlad Mihalcea 的一番讨论之后，他们决定恢复这次的改动。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/hibernate-incorrect-metamodel-with-no-reationship-1.png&#34; alt=&#34;revert commit&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是回退了就意味着问题又回来了，上面提到的 Vlad Mihalcea 从红帽离职，不再维护 Hibernate 还弄了一个新的项目就是上面提到的 &lt;code&gt;hibernate-types&lt;/code&gt;。所以其他人在遇到相同的问题时，有部分和我们一样是采用的 &lt;code&gt;hibernate-types&lt;/code&gt; 方案，自然而然有人把问题又丢给了 Vlad Mihalcea，不过是在 &lt;code&gt;hibernate-types&lt;/code&gt; 项目。&lt;/p&gt;
&lt;p&gt;于是 Vlad Mihalcea 在 Github 提了新的 PR，见 &lt;a href=&#34;https://github.com/hibernate/hibernate-orm/pull/3254&#34;&gt;HHH-12338 - Incorrect metamodel for basic collections&lt;/a&gt;。不过很不幸的是，并没有后续。&lt;/p&gt;
&lt;p&gt;直到今年的 7 月，又一位开发者忍无可忍决定解决这个问题，提了新的 PR 出来，见 &lt;a href=&#34;https://github.com/hibernate/hibernate-orm/pull/4096&#34;&gt;HHH-14724 Test-case for metamodel compile error with converters and validation&lt;/a&gt;。这次终于引起了重视，并在一番努力之后，终于得到了合并，问题就此解决。&lt;/p&gt;
&lt;p&gt;题外话，这件事情，是不是跟前阵子遇到的 &lt;a href=&#34;/2021/11/26/hibernate-automatic-2nd-collection-cache-eviction/&#34;&gt;Hibernate 配置自动清除二级缓存之集合缓存&lt;/a&gt; 里面的插曲有点像？笑。&lt;/p&gt;
&lt;h3 id=&#34;四、亲力亲为&#34;&gt;&lt;a href=&#34;#四、亲力亲为&#34; class=&#34;headerlink&#34; title=&#34;四、亲力亲为&#34;&gt;&lt;/a&gt;四、亲力亲为&lt;/h3&gt;&lt;p&gt;虽说这件事情现在看来终于告一段落了，不过由于时今年 9 月份才最终解决，虽然代码已经被合并到了各个版本的分支中，但 5.4 已经半年没有发过新的版本了。虽说 5.5 和 5.6 的版本已经没问题了，但由于项目框架的问题，并不能直接升级 Hibernate 的版本，而且本来 5.5 的版本就存在很大改动，现有架构并不能保证完全兼容（比如还是上面提到的 &lt;code&gt;hibernate-types&lt;/code&gt; 就需要引入另外一个包），所以最后没有办法，只能决定采用重打包的方式自己对源码进行更新。&lt;/p&gt;
&lt;p&gt;剩下的事情就不再赘述了，大概流程就是下载 Hibernate 源码，找到 5.4.32.Final 的 tag，在此基础上手动把修复代码的变更拷贝过来，然后改个版本号，发布到私仓，再更改当前项目依赖的版本号，最后成功解决。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2021/11/26/hibernate-automatic-2nd-collection-cache-eviction/</guid>
            <title>Hibernate 配置自动清除二级缓存之集合缓存</title>
            <link>https://blog.timerever.tk/2021/11/26/hibernate-automatic-2nd-collection-cache-eviction/</link>
            <category>Java</category>
            <category>Hibernate</category>
            <pubDate>Fri, 26 Nov 2021 07:21:10 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;之前在项目上使用了 Hibernate，并开启了基于 caffeine 的二级缓存。因为 Hibernate 会自动处理缓存，所以一直没怎么关注。直到最近，发现在一种特定的情况下，Hibernate 不会自动清除二级缓存里面的集合缓存。问题最后解决起来其实很简单，增加一个配置项的事。不过问题寻求解决的过程还是蛮繁琐的，并没有人能够直接告诉这个问题的答案，在此记录一下这个问题的排查过程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;太长不看版：Spring Boot 中设置属性 spring.jpa.properties.auto_evict_collection_cache&amp;#x3D;true 即可解决。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h3 id=&#34;一、问题出现&#34;&gt;&lt;a href=&#34;#一、问题出现&#34; class=&#34;headerlink&#34; title=&#34;一、问题出现&#34;&gt;&lt;/a&gt;一、问题出现&lt;/h3&gt;&lt;p&gt;假定我这里有两个实体，分别为 &lt;code&gt;Parent&lt;/code&gt; 和 &lt;code&gt;Child&lt;/code&gt;。然后 Parent 与 Child 之间存在一对多的对应关系，即在 Parent 的实体中，存在一个属性 &lt;code&gt;private Set&amp;lt;Child&amp;gt; children&lt;/code&gt;，然后我们开启二级缓存 &lt;code&gt;@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)&lt;/code&gt;。在这种情况下，我们先访问 Parent 实体并获取其中的 &lt;code&gt;children&lt;/code&gt; 属性，确保其已被缓存。然后我们再单独操作 Child，我们新建一个 Child 对象 &lt;code&gt;Child child = new Child()&lt;/code&gt; 并设置其 Parent 的值 &lt;code&gt;child.setParent(parent)&lt;/code&gt; 并保存 Child 实体 &lt;code&gt;ChildRepository.save(child)&lt;/code&gt;。然后我们回过来获取 Parent，会发现 Parent 的 &lt;code&gt;children&lt;/code&gt; 的值仍为原数组对象， 没有我们新增的 &lt;code&gt;child&lt;/code&gt; 对象。&lt;/p&gt;
&lt;p&gt;通过在 Google 上进行搜索，发现 stackoverflow 上存在几个类似的问题，再进一步的搜索后，发现在 Hibernate 官方 Bug 追踪网站上有人归纳并提出了这个问题 &lt;a href=&#34;https://hibernate.atlassian.net/browse/HHH-4910&#34;&gt;automatic L2 collection cache eviction when an element is added&amp;#x2F;updated&amp;#x2F;removed&lt;/a&gt;，可以看到不只是自己遇到的新增，修改&amp;#x2F;删除也会有类似的问题。&lt;/p&gt;
&lt;h3 id=&#34;二、问题解决&#34;&gt;&lt;a href=&#34;#二、问题解决&#34; class=&#34;headerlink&#34; title=&#34;二、问题解决&#34;&gt;&lt;/a&gt;二、问题解决&lt;/h3&gt;&lt;p&gt;在上面链接的内容下方，问题提出者给出了一种 workaround 的方案，提供 &lt;code&gt;@PostPersist&lt;/code&gt;、&lt;code&gt;@PostRemove&lt;/code&gt; 及 &lt;code&gt;@PreUpdate&lt;/code&gt; 的监听，并在监听中自动清理缓存。以及在之前查阅 stackoverflow 时，也有人认为，你需要在操作多方元素的时候，同时操作一方对应的集合，对其进行 add&amp;#x2F;remove 操作。&lt;/p&gt;
&lt;p&gt;但不管怎么说，这些都是一些 workaround 方案，因为 Hibernate 本身是有能力自动处理这些事情的。话又说回来，既然问题很早就被提出了，比如这个链接中使用的版本是 &lt;code&gt;3.3.1&lt;/code&gt;，同时官方也已经记录了这个问题已经在 &lt;code&gt;4.3.0.Beta5&lt;/code&gt; 中被修复了，可是为什么我们还是会遇到这个问题？这个答案其实在下面的评论中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/hibernate-automatic-2nd-collection-cache-eviction-1.png&#34; alt=&#34;Hibernate atlassian 下面的评论&#34;&gt;&lt;/p&gt;
&lt;p&gt;点进链接是 GitHub 的 PR 请求，讨论中详细地记录了从贡献者提出 PR 到最后并合并的整个流程。看下来大概就是，贡献者向负责人解释了为了提出这个改动、有负责人担心是不是会影响性能并期望做成可配置的、贡献者支持了配置项、PR 最终被合并。所以问题已经很明了了，功能上是已经被修复了，但是因为做成了配置项，所以默认没有启用，我们需要手动启用这个特性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/hibernate-automatic-2nd-collection-cache-eviction-2.png&#34; alt=&#34;变成配置项的 commit&#34;&gt;&lt;/p&gt;
&lt;p&gt;所以我们从这里点进去，去看一下我们怎么才能打开这个特性。最后我们可以看到是在 &lt;code&gt;hibernate-core/src/main/java/org/hibernate/cfg/AvailableSettings.java&lt;/code&gt; 这个文件中定义了配置的名字。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/hibernate-automatic-2nd-collection-cache-eviction-3.png&#34; alt=&#34;配置项的名字&#34;&gt;&lt;/p&gt;
&lt;p&gt;所以到这里，这个问题就算是最终解决了。&lt;/p&gt;
&lt;h3 id=&#34;三、插曲&#34;&gt;&lt;a href=&#34;#三、插曲&#34; class=&#34;headerlink&#34; title=&#34;三、插曲&#34;&gt;&lt;/a&gt;三、插曲&lt;/h3&gt;&lt;p&gt;由于项目使用了 &lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt; 依赖，所以这个配置项的设置并不是上面 Hibernate 的改动所提及的，于是继续在 Google 用 &lt;code&gt;auto_evict_collection_cache&lt;/code&gt; 作为关键字进行搜索，寻找在 Spring Boot 中的配置方式。最终是得到了答案，Spring Boot 中的配置项为 &lt;code&gt;spring.jpa.properties.auto_evict_collection_cache&lt;/code&gt;，不过在此之外还发现了一个小插曲。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://hibernate.atlassian.net/browse/HHH-10614&#34;&gt;Auto evict collection cache throws exception with null values&lt;/a&gt; 中描述了一个人开启了这个特性，然后在一个特定的情况下 Hibernate 会抛出异常。虽然这个问题很快就被解决了，不过现在回来想想，维护者在维护这种已经已经很庞大的项目时，对所有的改动都抱有谨慎的态度还是很有必要的。做成了配置项，虽然一方面会让很多不知道的人继续遇到这个问题，但同时也让很多无关的人避免了可能带来的新问题。所以这两种方案孰优孰劣，可能就见仁见智了吧。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/04/29/factory-patterns-with-java/</guid>
            <title>设计模式之工厂模式的 Java 实现</title>
            <link>https://blog.timerever.tk/2017/04/29/factory-patterns-with-java/</link>
            <category>Java</category>
            <category>Design Pattern</category>
            <category>Factory Patterns</category>
            <pubDate>Sat, 29 Apr 2017 08:14:03 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;strong&gt;工厂模式&lt;/strong&gt; 属于设计模式中创建型数据模式的一种，同时是软件设计模式中最常使用的模式。广义的工厂模式只是一个统称，其还可以继续分为 &lt;strong&gt;简单工厂模式&lt;/strong&gt;、&lt;strong&gt;工厂模式&lt;/strong&gt; 和 &lt;strong&gt;抽象工厂模式&lt;/strong&gt;。这里对这些工厂模式进行说明并使用 Java 代码进行实现。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;通常状态下的对象创建&#34;&gt;&lt;a href=&#34;#通常状态下的对象创建&#34; class=&#34;headerlink&#34; title=&#34;通常状态下的对象创建&#34;&gt;&lt;/a&gt;通常状态下的对象创建&lt;/h2&gt;&lt;p&gt;在不使用任何模式的时候，我们通常是需要什么对象，就直接创建什么对象，如下所示。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* Bicycle.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Bicycle&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Bicycle&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.getClass().getSimpleName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* Motorbike.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Motorbike&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Motorbike&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.getClass().getSimpleName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* Main.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Main&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Bicycle bicycle = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Bicycle();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Motorbike motorbike = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Motorbike();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;pre&gt;&lt;code&gt;Bicycle
Motorbike
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这很符合面向对象的思想，通过使用 &lt;code&gt;new&lt;/code&gt; 操作符去构造对象实例，但是如果我们需要在实例化时做点初始化的工作呢？我们可以去使用构造方法，但是假如要做的事情很多，代码很长呢？或是我们在创建需要的对象之前必须先生成一些辅助功能的对象，我们就可以使用工厂模式来生成对象，而不用去关心构造对象实例的细节和其复杂的过程。&lt;/p&gt;
&lt;h2 id=&#34;简单工厂模式&#34;&gt;&lt;a href=&#34;#简单工厂模式&#34; class=&#34;headerlink&#34; title=&#34;简单工厂模式&#34;&gt;&lt;/a&gt;简单工厂模式&lt;/h2&gt;&lt;h3 id=&#34;定义&#34;&gt;&lt;a href=&#34;#定义&#34; class=&#34;headerlink&#34; title=&#34;定义&#34;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;简单工厂模式 (Simple Factory Pattern)&lt;/strong&gt; 又称为静态工厂方法 (Static Factory Method) 模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。&lt;/p&gt;
&lt;h3 id=&#34;适用环境&#34;&gt;&lt;a href=&#34;#适用环境&#34; class=&#34;headerlink&#34; title=&#34;适用环境&#34;&gt;&lt;/a&gt;适用环境&lt;/h3&gt;&lt;p&gt;在以下情况下可以使用简单工厂模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工厂类负责创建的对象比较少；由于创建的对象较少，不会造成工厂方法中的业务逻辑太过复杂。&lt;/li&gt;
&lt;li&gt;客户端只知道传入工厂类的参数，对于如何创建对象不关心；客户端既不需要关心创建细节，甚至连类名都不需要记住，只需要知道类型所对应的参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;模式结构&#34;&gt;&lt;a href=&#34;#模式结构&#34; class=&#34;headerlink&#34; title=&#34;模式结构&#34;&gt;&lt;/a&gt;模式结构&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/factory-patterns-with-java-1.png&#34; alt=&#34;Alt 简单工厂模式模式结构&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;举例&#34;&gt;&lt;a href=&#34;#举例&#34; class=&#34;headerlink&#34; title=&#34;举例&#34;&gt;&lt;/a&gt;举例&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/factory-patterns-with-java-2.png&#34; alt=&#34;Alt 简单工厂模式举例&#34;&gt;&lt;/p&gt;
&lt;p&gt;假如这里有一个农场充当工厂类，通过告知农场所需要的水果类型返回所需的水果，即通过传入不同的参数获取不同的对象。&lt;/p&gt;
&lt;p&gt;对象类：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* Fruit.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Fruit&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* Apple.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Apple&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Fruit&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Apple&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.getClass().getSimpleName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* Banana.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Banana&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Fruit&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Banana&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.getClass().getSimpleName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* Orange.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Orange&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Fruit&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Orange&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.getClass().getSimpleName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;工厂类：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* FarmFactory.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;FarmFactory&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Fruit &lt;span class=&#34;title&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String variety)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (variety) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Apple();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;banana&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Banana();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;orange&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Orange();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;调用方式：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* Main.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Main&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        FarmFactory farmFactory = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; FarmFactory();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Fruit apple = farmFactory.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Fruit banana = farmFactory.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;banana&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Fruit orange = farmFactory.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;orange&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Apple
Banana
Orange
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;工厂模式&#34;&gt;&lt;a href=&#34;#工厂模式&#34; class=&#34;headerlink&#34; title=&#34;工厂模式&#34;&gt;&lt;/a&gt;工厂模式&lt;/h2&gt;&lt;h3 id=&#34;模式动机&#34;&gt;&lt;a href=&#34;#模式动机&#34; class=&#34;headerlink&#34; title=&#34;模式动机&#34;&gt;&lt;/a&gt;模式动机&lt;/h3&gt;&lt;p&gt;接上面的例子，假如现在农场新种植了一种水果，那么为了完成工厂类的任务，就需要去修改工厂类的代码添加内部逻辑，这显然是违背开闭原则的。&lt;/p&gt;
&lt;p&gt;所谓开闭原则，就是对扩展开放，对修改关闭。“开”是指对于组件功能的扩展是开放的，是允许对其进行功能扩展的，“闭”是对原有代码的修改是封闭的，即修改原有的代码对外部的使用是透明的。即对模块行为进行扩展时，不必改动模块的源代码或者二进制代码，所以就出现了工厂模式。&lt;/p&gt;
&lt;p&gt;参见：&lt;a href=&#34;http://baike.baidu.com/item/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99&#34;&gt;http://baike.baidu.com/item/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;现假如有一个生产各种按钮的工厂，通过对该系统进行修改，不再设计一个按钮工厂类来统一负责所有产品的创建，而是将具体按钮的创建过程交给专门的工厂子类去完成，我们先定义一个抽象的按钮工厂类，再定义具体的工厂类来生成圆形按钮、矩形按钮、菱形按钮等，它们实现在在抽象按钮工厂中定义的方法。这种抽象化的结果使这种结构可以在不修改具体工厂类的情况下引进新的产品，如果出现新的按钮类型，只需要为这种新类型的按钮创建一个具体的工厂类就可以获得该新按钮的实例，这一特点无疑使得工厂方法模式具有超越简单工厂模式的优越性，更加符合“开闭原则”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/factory-patterns-with-java-3.png&#34; alt=&#34;Alt 简单工厂模式&#34;&gt; &lt;img src=&#34;/factory-patterns-with-java-4.png&#34; alt=&#34;Alt 工厂模式&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;定义-1&#34;&gt;&lt;a href=&#34;#定义-1&#34; class=&#34;headerlink&#34; title=&#34;定义&#34;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;工厂方法模式 (Factory Method Pattern)&lt;/strong&gt; 又称为工厂模式，也叫虚拟构造器 (Virtual Constructor) 模式或者多态工厂 (Polymorphic Factory) 模式，它属于类创建型模式。在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪—个具体产品类。&lt;/p&gt;
&lt;h3 id=&#34;模式结构-1&#34;&gt;&lt;a href=&#34;#模式结构-1&#34; class=&#34;headerlink&#34; title=&#34;模式结构&#34;&gt;&lt;/a&gt;模式结构&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/factory-patterns-with-java-5.png&#34; alt=&#34;Alt 工厂模式模式结构&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;举例-1&#34;&gt;&lt;a href=&#34;#举例-1&#34; class=&#34;headerlink&#34; title=&#34;举例&#34;&gt;&lt;/a&gt;举例&lt;/h3&gt;&lt;p&gt;对上面的按钮工厂的工厂模式实现。&lt;/p&gt;
&lt;p&gt;对象类：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* Button.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Button&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* CircleButton.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CircleButton&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Button&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CircleButton&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.getClass().getSimpleName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* DiamondButton.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;DiamondButton&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Button&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;DiamondButton&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.getClass().getSimpleName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* RectangleButton.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;RectangleButton&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Button&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;RectangleButton&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.getClass().getSimpleName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;工厂类：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* FarmFactory.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ButtonFactory&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; Button &lt;span class=&#34;title&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* CircleButtonFactory.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CircleButtonFactory&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ButtonFactory&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Button &lt;span class=&#34;title&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CircleButton();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* DiamondButtonFactory.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;DiamondButtonFactory&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ButtonFactory&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Button &lt;span class=&#34;title&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; DiamondButton();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* RectangleButtonFactory.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;RectangleButtonFactory&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ButtonFactory&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Button &lt;span class=&#34;title&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; RectangleButton();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;调用方式：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* Main.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Main&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ButtonFactory buttonFactory = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CircleButtonFactory();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Button button = buttonFactory.create();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        buttonFactory = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; DiamondButtonFactory();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        button = buttonFactory.create();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CircleButton
DiamondButton
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;抽象工厂模式&#34;&gt;&lt;a href=&#34;#抽象工厂模式&#34; class=&#34;headerlink&#34; title=&#34;抽象工厂模式&#34;&gt;&lt;/a&gt;抽象工厂模式&lt;/h2&gt;&lt;h3 id=&#34;模式动机-1&#34;&gt;&lt;a href=&#34;#模式动机-1&#34; class=&#34;headerlink&#34; title=&#34;模式动机&#34;&gt;&lt;/a&gt;模式动机&lt;/h3&gt;&lt;p&gt;在工厂方法模式中具体工厂负责生产具体的产品，每一个具体工厂对应一种具体产品，工厂方法也具有唯一性，一般情况下，一个具体工厂中只有一个工厂方法或者一组重栽的工厂方法。但是有时候我们需要一个工厂可以提供多个产品对象，而不是单一的产品对象。&lt;/p&gt;
&lt;p&gt;为了更清晰地理解工厂方法糢式，需要先引入两个概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;产品等级结构：产品等级结构即产品的继承结构，如一个抽象类是电视机，其子类有海尔电视机、海信电视机、TCL电视机，则抽象电视机与具体品牌的电视机之间构成了—个产品等级结构，抽象电视机是父类，而具体品牌的电视机是其子类。&lt;/li&gt;
&lt;li&gt;产品族：在抽象工厂模式中，产品族是指由同一个工厂生产的，位于不同产品等级结构中的一组产品，如海尔电器工厂生产的海尔电视机、海尔电冰箱，海尔电视机位于电视机产品等级结构中，海尔电冰箱位于电冰箱产品等级结构中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;定义-2&#34;&gt;&lt;a href=&#34;#定义-2&#34; class=&#34;headerlink&#34; title=&#34;定义&#34;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;抽象工厂模式 (Abstract Factory Pattern)&lt;/strong&gt; 提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为 Kit 模式，属于对象创建型模式。&lt;/p&gt;
&lt;h3 id=&#34;应用场景&#34;&gt;&lt;a href=&#34;#应用场景&#34; class=&#34;headerlink&#34; title=&#34;应用场景&#34;&gt;&lt;/a&gt;应用场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;当系统所提供的工厂生产的具体产品并不是一个简单的对象，而是多个位于不同产品等级结构、属于不同类型的具体产品时就可以使用抽象工厂模式。&lt;/li&gt;
&lt;li&gt;抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/factory-patterns-with-java-6.png&#34; alt=&#34;Alt 抽象工厂模式应用场景&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;模式适用环境&#34;&gt;&lt;a href=&#34;#模式适用环境&#34; class=&#34;headerlink&#34; title=&#34;模式适用环境&#34;&gt;&lt;/a&gt;模式适用环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节。&lt;/li&gt;
&lt;li&gt;系统中有多于一个的产品族，但每次只使用其中某一产品族。&lt;/li&gt;
&lt;li&gt;属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。&lt;/li&gt;
&lt;li&gt;产品等级结构稳定，设计完成之后，不会向系统中增加新的产品等级结构或者删除已有的产品等级结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;模式结构-2&#34;&gt;&lt;a href=&#34;#模式结构-2&#34; class=&#34;headerlink&#34; title=&#34;模式结构&#34;&gt;&lt;/a&gt;模式结构&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/factory-patterns-with-java-7.png&#34; alt=&#34;Alt 抽象工厂模式模式结构&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;举例-2&#34;&gt;&lt;a href=&#34;#举例-2&#34; class=&#34;headerlink&#34; title=&#34;举例&#34;&gt;&lt;/a&gt;举例&lt;/h3&gt;&lt;p&gt;某软件公司要开发一套界面皮肤库，可以对基于 .NET 平台的桌面软件进行界面美化。用户在使用时可以通过菜单来选择皮肤，不同的皮肤将提供视觉效果不同的按钮、文本框、组合框等界面元素，例如春天 (Spring) 风格的皮肤将提供浅绿色的按钮、绿色边框的文本框和绿色边框的组合框，而夏天 (Summer) 风格的皮肤则提供浅蓝色的按钮、蓝色边框的文本框和蓝色边框的组合框，其结构示意图如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/factory-patterns-with-java-8.png&#34; alt=&#34;Alt 抽象工厂模式举例&#34;&gt;&lt;/p&gt;
&lt;p&gt;该皮肤库需要具备良好的灵活性和可扩展性，用户可以自由选择不同的皮肤，开发人员可以在不修改既有代码的基础上增加新的皮肤，现使用抽象工厂模式来设计该界面皮肤库。&lt;/p&gt;
&lt;p&gt;对象类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ComboBox&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* ComboBox.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ComboBox&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* SummerComboBox.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SummerComboBox&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ComboBox&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SummerComboBox&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.getClass().getSimpleName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* SpringComboBox.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SpringComboBox&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ComboBox&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SpringComboBox&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.getClass().getSimpleName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;Button&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* Button.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Button&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* SummerButton.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SummerButton&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Button&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SummerButton&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.getClass().getSimpleName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* SpringButton.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SpringButton&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Button&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SpringButton&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.getClass().getSimpleName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;TextField&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* TextField.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TextField&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* SummerTextField.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SummerTextField&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TextField&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SummerTextField&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.getClass().getSimpleName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* SpringTextField.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SpringTextField&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TextField&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SpringTextField&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.getClass().getSimpleName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;工厂类：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* SkinFactory.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SkinFactory&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; ComboBox &lt;span class=&#34;title&#34;&gt;getComboBox&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; Button &lt;span class=&#34;title&#34;&gt;getButton&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; TextField &lt;span class=&#34;title&#34;&gt;getTextField&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* SummerSkinFactory.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SummerSkinFactory&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SkinFactory&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ComboBox &lt;span class=&#34;title&#34;&gt;getComboBox&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; SummerComboBox();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Button &lt;span class=&#34;title&#34;&gt;getButton&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; SummerButton();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; TextField &lt;span class=&#34;title&#34;&gt;getTextField&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; SummerTextField();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* SpringSkinFactory.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SpringSkinFactory&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SkinFactory&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ComboBox &lt;span class=&#34;title&#34;&gt;getComboBox&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; SpringComboBox();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Button &lt;span class=&#34;title&#34;&gt;getButton&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; SpringButton();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; TextField &lt;span class=&#34;title&#34;&gt;getTextField&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; SpringTextField();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;调用方式：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* Main.java */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Main&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        SkinFactory skinFactory = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; SummerSkinFactory();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ComboBox comboBox = skinFactory.getComboBox();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Button button = skinFactory.getButton();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        TextField textField = skinFactory.getTextField();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SummerComboBox
SummerButton
SummerTextField
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/04/28/design-patterns/</guid>
            <title>软件设计模式</title>
            <link>https://blog.timerever.tk/2017/04/28/design-patterns/</link>
            <category>Design Pattern</category>
            <pubDate>Fri, 28 Apr 2017 05:59:36 +0000</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;模式和软件模式&#34;&gt;&lt;a href=&#34;#模式和软件模式&#34; class=&#34;headerlink&#34; title=&#34;模式和软件模式&#34;&gt;&lt;/a&gt;模式和软件模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;A pattern is a solution to a problem in a context.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;模式&lt;/strong&gt; 起源于建筑学，每个模式都描述了一个在我们的环境中不断出现的问题，然后描述了该问题的解决方案的核心，通过这种方式我们可以无数次的重用那些已有的解决方案，无需再重复相同的工作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;软件模式 (Software Patterns)&lt;/strong&gt; 是将模式的一般概念应用于软件开发领域，即软件开发的总体指导思路或参照样板。软件模式并非仅限于设计模式，它还包括架构模式、分析模式和过程模式等，实际上，在软件开发生命周期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;p&gt;在这里主要讨论的是软件设计模式。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;软件架构模式与软件设计模式的比较&#34;&gt;&lt;a href=&#34;#软件架构模式与软件设计模式的比较&#34; class=&#34;headerlink&#34; title=&#34;软件架构模式与软件设计模式的比较&#34;&gt;&lt;/a&gt;软件架构模式与软件设计模式的比较&lt;/h2&gt;&lt;p&gt;简略的来说，架构模式是整体上的大智慧，而软件模式更侧重于小技巧。&lt;/p&gt;
&lt;p&gt;这里以 MVC 解决方案为例。&lt;/p&gt;
&lt;h2 id=&#34;软件架构模式&#34;&gt;&lt;a href=&#34;#软件架构模式&#34; class=&#34;headerlink&#34; title=&#34;软件架构模式&#34;&gt;&lt;/a&gt;软件架构模式&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/design-patterns-1.png&#34; alt=&#34;Alt MVC软件架构模式&#34; title=&#34;MVC软件架构模式&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;软件设计模式&#34;&gt;&lt;a href=&#34;#软件设计模式&#34; class=&#34;headerlink&#34; title=&#34;软件设计模式&#34;&gt;&lt;/a&gt;软件设计模式&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/design-patterns-2.png&#34; alt=&#34;Alt MVC软件设计模式&#34; title=&#34;MVC软件设计模式&#34;&gt;&lt;/p&gt;
&lt;p&gt;所谓软件设计模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在软件模式中，设计模式是研究最为深入的分支。&lt;/li&gt;
&lt;li&gt;设计模式用于在特定的条件下为一些重复出现的软件设计问题提供合理的、有效的解决方案。&lt;/li&gt;
&lt;li&gt;是系统地命名、解释和评价某一个重要的可重现的面向对象的设计方案。&lt;/li&gt;
&lt;li&gt;是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件设计模式包含几个基本要素：模式名称、问题、解决方案、后果。&lt;/p&gt;
&lt;p&gt;一个好的模式必须做到以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决一个问题：从模式可以得到解，而不仅仅是抽象的原则或策略。&lt;/li&gt;
&lt;li&gt;是一个被证明了的概念：模式通过—个记录得到解．而不是通过理论或推测。&lt;/li&gt;
&lt;li&gt;解并不是显然的：许多解决问题的方法（例如软件设计范例或方法）是从最基本的原理得到解；而最好的方法是以非直接的方式得到解，对大多数比较困难的设计问题来说，这是必要的。&lt;/li&gt;
&lt;li&gt;描述了一种关系：模式并不仅仅描述模块，它给出更深层的系统结构和机理。&lt;/li&gt;
&lt;li&gt;模式有重要的人为因素：所有的软件服务于人类的舒适或生活质量，而最好的模式追求它的实用性和美学。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;软件设计模式分类&#34;&gt;&lt;a href=&#34;#软件设计模式分类&#34; class=&#34;headerlink&#34; title=&#34;软件设计模式分类&#34;&gt;&lt;/a&gt;软件设计模式分类&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;软件设计模式&lt;/strong&gt; 按照不同的分类标准可以分为不同的类别，例如按 &lt;strong&gt;目的&lt;/strong&gt; 可以分为 &lt;strong&gt;创建型&lt;/strong&gt;、&lt;strong&gt;结构型&lt;/strong&gt; 和 &lt;strong&gt;行为型&lt;/strong&gt;，按 &lt;strong&gt;范围&lt;/strong&gt; 可以分为 &lt;strong&gt;类&lt;/strong&gt; 和 &lt;strong&gt;对象&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/design-patterns-3.png&#34; alt=&#34;Alt 软件设计模式分类&#34; title=&#34;软件设计模式分类&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;创建型设计模式&#34;&gt;&lt;a href=&#34;#创建型设计模式&#34; class=&#34;headerlink&#34; title=&#34;创建型设计模式&#34;&gt;&lt;/a&gt;创建型设计模式&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;创建型模式 (Creational Pattern)&lt;/strong&gt; 对类的实例化过程进行了抽象，能够将软件模块中对象的创建和对象的使用分离。为了使软件的结构更加清晰，外界对于这些对象只需要知道它们共同的接口，而不清楚其具体的实现细节，使整个系统的设计更加符合单一职责原则。&lt;/p&gt;
&lt;p&gt;创建型模式在创建什么 (What)，由谁创建 (Who)，何时创建 (When) 等方面都为软件设计者提供了尽可能大的灵活性。创建型模式隐藏了类的实例的创建细节，通过隐藏对象如何被创建和组合在一起达到使整个系统独立的目的。&lt;/p&gt;
&lt;p&gt;创建型设计模式包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单工厂模式&lt;/li&gt;
&lt;li&gt;工厂模式&lt;/li&gt;
&lt;li&gt;抽象工厂模式&lt;/li&gt;
&lt;li&gt;建造者模式&lt;/li&gt;
&lt;li&gt;原型模式&lt;/li&gt;
&lt;li&gt;单例模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;结构型设计模式&#34;&gt;&lt;a href=&#34;#结构型设计模式&#34; class=&#34;headerlink&#34; title=&#34;结构型设计模式&#34;&gt;&lt;/a&gt;结构型设计模式&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;结构型模式(Structural Pattern)&lt;/strong&gt; 关注如何将现有类或对象组织在一起形成更加强大的结构，不同的结构型模式从不同的角度组合类或对象，它们在尽可能满足各种面向对象设计原则的同时为类或对象的组合提供一系列巧妙的解决方案。&lt;/p&gt;
&lt;p&gt;其中，类结构型模式关心类的组合，由多个类组合成一个更大的系统，在类结构型模式中一般只存在继承关系和实现关系；对象结构型模式关心类与对象的组合，通过关联关系，在一个类中定义另一个类的实例对象，然后通过该对象调用相应的方法。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;模式名称&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;定义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;适配器模式&lt;br&gt;(Adapter Pattern)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;将一个类的接口转换成客户希望的另一个接口。适配器模式让那些接口不兼容的类可以一起工作。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;桥接模式&lt;br&gt;(Bridge Pattern)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;将抽象部分与它的实现部分解耦，使得两者都能够独立变化。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;组合模式&lt;br&gt;(Composite Pattern)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;组合多个对象形成树形结构，以表示具有部分-整体关系的层次结构。组合模式让客户端可以统一对待单个对象和组合对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;装饰模式&lt;br&gt;(Decorator Pattern)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;动态地给一个对象增加一些额外的职责。就扩展功能而言，装饰模式提供了一种比使用子类更加灵活的替代方案。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;外观模式&lt;br&gt;(Facade Pattern)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;为子系统中的一组接口提供一个统一的入口。外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;享元模式&lt;br&gt;(Flyweight Pattern)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;运用共享技术有效地支持大量细粒度对象的复用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;代理模式&lt;br&gt;(Proxy Pattern)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;给某一个对象提供一个代理或占位符，并由代理对象来控制对原对象的访问。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&#34;行为型设计模式&#34;&gt;&lt;a href=&#34;#行为型设计模式&#34; class=&#34;headerlink&#34; title=&#34;行为型设计模式&#34;&gt;&lt;/a&gt;行为型设计模式&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;行为型模式(Behavioral Pattern)&lt;/strong&gt; 描述类或对象如何交互及如何分配职责,它主要涉及通过合理的处理方法,达到使系统升级性和维护性提高的目的。&lt;/p&gt;
&lt;p&gt;分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解释器模式 (Interpreter Pattern)&lt;/li&gt;
&lt;li&gt;模板方法模式 (Template Method Pattern)&lt;/li&gt;
&lt;li&gt;职责链模式 (Chain of Responsibility Pattern)&lt;/li&gt;
&lt;li&gt;命令模式 (Command Pattern)&lt;/li&gt;
&lt;li&gt;迭代器模式 (Iterator Pattern)&lt;/li&gt;
&lt;li&gt;中介者模式 (Mediator Pattern)&lt;/li&gt;
&lt;li&gt;备忘录模式 (Memento Pattern)&lt;/li&gt;
&lt;li&gt;观察者模式 (Observer Pattern)&lt;/li&gt;
&lt;li&gt;状态模式 (State Pattern)&lt;/li&gt;
&lt;li&gt;策略模式 (Strategy Pattern)&lt;/li&gt;
&lt;li&gt;访问者模式 (Visitor Pattern)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于各设计模式都可以展开去讨论，而此处列举的设计模式众多，故在此不对每个设计模式进行展开讨论，有时间或有需求再单独对某一设计模式进行讨论。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考：我校教参&lt;/strong&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/04/26/undefined-reference-to-pthread_create/</guid>
            <title>对 “pthread_create” 未定义的引用</title>
            <link>https://blog.timerever.tk/2017/04/26/undefined-reference-to-pthread_create/</link>
            <category>Linux</category>
            <category>C</category>
            <pubDate>Wed, 26 Apr 2017 15:01:27 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;今天在对 Linux 多线程编程进行学习时，在编译代码时出现了问题。&lt;/p&gt;
&lt;p&gt;由于使用了 &lt;code&gt;pthread_create&lt;/code&gt;, &lt;code&gt;pthread_join&lt;/code&gt; 等函数，在使用 &lt;code&gt;gcc&lt;/code&gt; 编译时，出现了 &lt;strong&gt;对 ‘pthread_create’ 未定义的引用&lt;/strong&gt; 的错误，在上网查询后，得知 pthread 库不是 Linux 系统默认的库，所以在编译时需要添加 &lt;code&gt;-lpthread&lt;/code&gt; 参数来使用 libpthread.a 库进行编译。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# gcc -o pthread -lpthread pthread.c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结果还是失败。再次上网查阅，得知 &lt;code&gt;-lpthread&lt;/code&gt; 应该放到最后面，修改后编译通过。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# gcc thread.c -o thread.c -lpthread
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;参考链接：&lt;a href=&#34;http://blog.csdn.net/besfanfei/article/details/7542396&#34;&gt;http://blog.csdn.net/besfanfei/article/details/7542396&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/04/24/fix-sigaction/</guid>
            <title>sigaction 自定义信号处理函数的“修复”</title>
            <link>https://blog.timerever.tk/2017/04/24/fix-sigaction/</link>
            <category>Linux</category>
            <category>C</category>
            <pubDate>Mon, 24 Apr 2017 11:15:05 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;在对嵌入式 Linux 系统程序开发中的进程间通信进行学习时，涉及到了信号集函数组，书中给出的示例如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该实例首先把 SIGQUIT、SIGINT 两个信号加入信号集，然后将该信号集设为阻塞状态，&lt;br&gt;并在该状态下使程序暂停 5 秒。接下来再将信号集设置为非阻塞状态，再对这两个信号分别&lt;br&gt;操作，其中 SIGQUIT 执行默认操作，而 SIGINT 执行用户自定义函数的操作。源代码如下&lt;br&gt;所示：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;my_func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; signum)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;If you want to quit,please try SIGQUIT\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;sigset_t&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;,pendset;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sigaction&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;action1&lt;/span&gt;,&lt;span class=&#34;title&#34;&gt;action2&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(sigemptyset(&amp;amp;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;)&amp;lt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		perror(&lt;span class=&#34;string&#34;&gt;&amp;quot;sigemptyset&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(sigaddset(&amp;amp;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;,SIGQUIT)&amp;lt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		perror(&lt;span class=&#34;string&#34;&gt;&amp;quot;sigaddset&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(sigaddset(&amp;amp;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;,SIGINT)&amp;lt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		perror(&lt;span class=&#34;string&#34;&gt;&amp;quot;sigaddset&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(sigprocmask(SIG_BLOCK,&amp;amp;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;,&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)&amp;lt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		perror(&lt;span class=&#34;string&#34;&gt;&amp;quot;sigprocmask&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;blocked\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		sleep(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(sigprocmask(SIG_UNBLOCK,&amp;amp;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;,&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)&amp;lt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		perror(&lt;span class=&#34;string&#34;&gt;&amp;quot;sigprocmask&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;unblock\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(sigismember(&amp;amp;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;,SIGINT))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			sigemptyset(&amp;amp;action1.sa_mask);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			action1.sa_handler=my_func;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			sigaction(SIGINT,&amp;amp;action1,&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(sigismember(&amp;amp;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;,SIGQUIT))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			sigemptyset(&amp;amp;action2.sa_mask);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			action2.sa_handler = SIG_DFL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			sigaction(SIGTERM,&amp;amp;action2,&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;理论上，按说明所述及代码的编写，使用 &lt;code&gt;Ctrl-C&lt;/code&gt; 传递 &lt;code&gt;SIGINT&lt;/code&gt; 信号后，会转到自定义处理函数 &lt;code&gt;my_func&lt;/code&gt;，但在实际操作中，在进入自定义处理函数后，程序直接退出。&lt;strong&gt;猜测&lt;/strong&gt;是由于在进行自定义处理函数后，系统仍然对信号做了默认的处理。&lt;/p&gt;
&lt;p&gt;在请教老师后，给出了一种解决方案，对 &lt;code&gt;sigaction&lt;/code&gt; 结构体中的 &lt;code&gt;sa_flags&lt;/code&gt; 进行赋值，这里先贴出该结构体。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sigaction&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; (*sa_handler)(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; signo);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;sigset_t&lt;/span&gt; sa_mask;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; sa_flags;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; (*sa_restore)(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;sa_handler&lt;/code&gt; 是一个函数指针，指定信号关联函数，这里除可以是用户自定义的处理函数&lt;br&gt;外，还可以为 &lt;code&gt;SIG_DFL&lt;/code&gt;（采用缺省的处理方式）或 &lt;code&gt;SIG_IGN&lt;/code&gt;（忽略信号）。它的处理函数只&lt;br&gt;有一个参数，即信号值。&lt;br&gt;&lt;code&gt;sa_mask&lt;/code&gt; 是一个信号集，它可以指定在信号处理程序执行过程中哪些信号应当被阻塞，&lt;br&gt;在调用信号捕获函数之前，该信号集要加入到信号的信号屏蔽字中。&lt;br&gt;&lt;code&gt;sa_flags&lt;/code&gt; 中包含了许多标志位，是对信号进行处理的各个选择项。它的常见可选值如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;选项&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;SA_NODEFER&amp;#x2F;SA_NOMASK&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;当捕捉到此信号时，在执行其信号捕捉函数时，系统不会自动阻塞此信号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;SA_NOCLDSTOP&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;进程忽略子进程产生的任何 SIGSTOP、SIGTSTP、SIGTTIN 和 SIGTTOU 信号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;SA_RESTART&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;可让重启的系统调用重新起作用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;SA_ONESHOT&amp;#x2F;SA_RESETHAND&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;自定义信号只执行一次，在执行完毕后恢复信号的系统默认动作&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;将 &lt;code&gt;sigaction&lt;/code&gt; 结构体中的 &lt;code&gt;sa_flags&lt;/code&gt; 成员赋值为 0，修改后的部分代码如下。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(sigismember(&amp;amp;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;,SIGINT))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		sigemptyset(&amp;amp;action1.sa_mask);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		action1.sa_handler=my_func;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		action1.sa_flags=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;//添加此行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		sigaction(SIGINT,&amp;amp;action1,&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(sigismember(&amp;amp;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;,SIGQUIT))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		sigemptyset(&amp;amp;action2.sa_mask);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		action2.sa_handler = SIG_DFL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		sigaction(SIGTERM,&amp;amp;action2,&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这样修改后，程序确实正常运行了。但是根据该书所述和在网上查询，始终未能理解为何这样操作，而且之后尝试赋其他值，依然正常运行。网上国内的氛围就是博客间互相复制互相抄袭，找不到多少主观的分析，所以一直未能解决，仅在此做下记录。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/04/23/client-custom-ssl/</guid>
            <title>Apache HttpClient 4.5.x 忽略证书验证</title>
            <link>https://blog.timerever.tk/2017/04/23/client-custom-ssl/</link>
            <category>Java</category>
            <category>HttpClient</category>
            <pubDate>Sun, 23 Apr 2017 02:44:20 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;在使用 Apache HttpComponents 时，需要访问一个第三方接口进行数据传输，但是由于对方使用的是 Let’s Encrypt 的证书，虽然浏览器是信任的，但是在调试的时候发现程序并不信任,所以采用自定义 SSLContext 的方式解决该问题。&lt;/p&gt;
&lt;h3 id=&#34;查找官方解决方案&#34;&gt;&lt;a href=&#34;#查找官方解决方案&#34; class=&#34;headerlink&#34; title=&#34;查找官方解决方案&#34;&gt;&lt;/a&gt;查找官方解决方案&lt;/h3&gt;&lt;p&gt;作为一只程序猿，翻官方文档肯定是首选方案。官方提供了一种 Custom SSL context 的实现。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://hc.apache.org/httpcomponents-client-4.5.x/httpclient/examples/org/apache/http/examples/client/ClientCustomSSL.java&#34;&gt;http://hc.apache.org/httpcomponents-client-4.5.x/httpclient/examples/org/apache/http/examples/client/ClientCustomSSL.java&lt;/a&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * ====================================================================&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * Licensed to the Apache Software Foundation (ASF) under one&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * or more contributor license agreements.  See the NOTICE file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * distributed with this work for additional information&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * regarding copyright ownership.  The ASF licenses this file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * to you under the Apache License, Version 2.0 (the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &amp;quot;License&amp;quot;); you may not use this file except in compliance&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * with the License.  You may obtain a copy of the License at&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *   http://www.apache.org/licenses/LICENSE-2.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * Unless required by applicable law or agreed to in writing,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * software distributed under the License is distributed on an&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &amp;quot;AS IS&amp;quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * KIND, either express or implied.  See the License for the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * specific language governing permissions and limitations&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * under the License.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * ====================================================================&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * This software consists of voluntary contributions made by many&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * individuals on behalf of the Apache Software Foundation.  For more&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * information on the Apache Software Foundation, please see&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &amp;lt;http://www.apache.org/&amp;gt;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; org.apache.http.examples.client;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.io.File;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; javax.net.ssl.SSLContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.http.HttpEntity;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.http.client.methods.CloseableHttpResponse;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.http.client.methods.HttpGet;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.http.conn.ssl.SSLConnectionSocketFactory;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.http.conn.ssl.TrustSelfSignedStrategy;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.http.impl.client.CloseableHttpClient;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.http.impl.client.HttpClients;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.http.ssl.SSLContexts;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.http.util.EntityUtils;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * This example demonstrates how to create secure connections with a custom SSL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * context.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ClientCustomSSL&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// Trust own CA and all self-signed certs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        SSLContext sslcontext = SSLContexts.custom()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .loadTrustMaterial(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; File(&lt;span class=&#34;string&#34;&gt;&amp;quot;my.keystore&amp;quot;&lt;/span&gt;), &lt;span class=&#34;string&#34;&gt;&amp;quot;nopassword&amp;quot;&lt;/span&gt;.toCharArray(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; TrustSelfSignedStrategy())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .build();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// Allow TLSv1 protocol only&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        SSLConnectionSocketFactory sslsf = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; SSLConnectionSocketFactory(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                sslcontext,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; String[] &amp;#123; &lt;span class=&#34;string&#34;&gt;&amp;quot;TLSv1&amp;quot;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                SSLConnectionSocketFactory.getDefaultHostnameVerifier());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CloseableHttpClient httpclient = HttpClients.custom()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .setSSLSocketFactory(sslsf)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .build();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            HttpGet httpget = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; HttpGet(&lt;span class=&#34;string&#34;&gt;&amp;quot;https://httpbin.org/&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Executing request &amp;quot;&lt;/span&gt; + httpget.getRequestLine());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            CloseableHttpResponse response = httpclient.execute(httpget);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                HttpEntity entity = response.getEntity();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;----------------------------------------&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.out.println(response.getStatusLine());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                EntityUtils.consume(entity);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                response.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            httpclient.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;由于考虑到该接口为第三方接口，对方可能进行证书的更换，再加上由于所传输信息是可以公开的、非重要数据的数据，所以并不采用官方给出的导入证书而使用不进行检查直接信任的方式处理。&lt;/p&gt;
&lt;h3 id=&#34;定义自己的-SSLContext&#34;&gt;&lt;a href=&#34;#定义自己的-SSLContext&#34; class=&#34;headerlink&#34; title=&#34;定义自己的 SSLContext&#34;&gt;&lt;/a&gt;定义自己的 SSLContext&lt;/h3&gt;&lt;p&gt;所以问题的关键在于自定义 &lt;code&gt;SSLContext&lt;/code&gt;，查看其 &lt;code&gt;loadTrustMaterial&lt;/code&gt; 方法的源代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; SSLContextBuilder &lt;span class=&#34;title&#34;&gt;loadTrustMaterial&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; KeyStore truststore,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; TrustStrategy trustStrategy)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; NoSuchAlgorithmException, KeyStoreException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; TrustManagerFactory tmfactory = TrustManagerFactory.getInstance(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            TrustManagerFactory.getDefaultAlgorithm());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tmfactory.init(truststore);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; TrustManager[] tms = tmfactory.getTrustManagers();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (tms != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (trustStrategy != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; tms.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; TrustManager tm = tms[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (tm &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; X509TrustManager) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    tms[i] = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; TrustManagerDelegate(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            (X509TrustManager) tm, trustStrategy);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; TrustManager tm : tms) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.trustmanagers.add(tm);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可见这边是使用实现了 &lt;code&gt;TrustStrategy&lt;/code&gt; 接口的 &lt;code&gt;TrustSelfSignedStrategy&lt;/code&gt; 对 X509 证书进行管理，所以我们需要自定义一个 &lt;code&gt;TrustStrategy&lt;/code&gt; 的实例。&lt;/p&gt;
&lt;p&gt;先查看 &lt;code&gt;TrustStrategy&lt;/code&gt; 接口的源代码，发现除了继承了 &lt;code&gt;org.apache.http.ssl.TrustStrategy&lt;/code&gt; 之外没有添加任何内容。由于该类在 http-core 包中，直接反编译查看得：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TrustStrategy&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;isTrusted&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(X509Certificate[] var1, String var2)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; CertificateException&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;所以这里需要重写 &lt;code&gt;isTrusted&lt;/code&gt; 方法，不进行验证，直接返回 &lt;code&gt;true&lt;/code&gt;。由于不需要导入 Keystore，所以直接给空值，代码如下。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;SSLContext sslcontext = SSLContexts.custom()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	    .loadTrustMaterial(&lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; TrustStrategy() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	        &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;isTrusted&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(X509Certificate[] x509Certificates, String s)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; CertificateException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	    .build();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;测试&#34;&gt;&lt;a href=&#34;#测试&#34; class=&#34;headerlink&#34; title=&#34;测试&#34;&gt;&lt;/a&gt;测试&lt;/h3&gt;&lt;p&gt;修改后的完整代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.http.HttpEntity;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.http.client.methods.CloseableHttpResponse;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.http.client.methods.HttpGet;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.http.conn.ssl.SSLConnectionSocketFactory;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.http.conn.ssl.TrustStrategy;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.http.impl.client.CloseableHttpClient;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.http.impl.client.HttpClients;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.http.ssl.SSLContexts;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.http.util.EntityUtils;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; javax.net.ssl.SSLContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.io.IOException;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.security.KeyManagementException;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.security.KeyStoreException;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.security.NoSuchAlgorithmException;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.security.cert.CertificateException;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.security.cert.X509Certificate;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * Created by timer on 2017/4/23.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TestClientCustomSSL&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 自定义 SSLContext 使信任所有证书。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        SSLContext sslcontext = &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            sslcontext = SSLContexts.custom()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	                .loadTrustMaterial(&lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; TrustStrategy() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	                    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	                    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;isTrusted&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(X509Certificate[] x509Certificates, String s)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; CertificateException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	                        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	                &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	                .build();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (NoSuchAlgorithmException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (KeyManagementException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (KeyStoreException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 仅允许 TLSv1 协议&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        SSLConnectionSocketFactory sslsf = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; SSLConnectionSocketFactory(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                sslcontext,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; String[] &amp;#123; &lt;span class=&#34;string&#34;&gt;&amp;quot;TLSv1&amp;quot;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                SSLConnectionSocketFactory.getDefaultHostnameVerifier());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;(CloseableHttpClient httpclient = HttpClients.custom().setSSLSocketFactory(sslsf).build()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            HttpGet httpget = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; HttpGet(&lt;span class=&#34;string&#34;&gt;&amp;quot;https://httpbin.org/get&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;(CloseableHttpResponse response = httpclient.execute(httpget)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                HttpEntity entity = response.getEntity();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.out.println(EntityUtils.toString(entity));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                EntityUtils.consume(entity);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;成功访问，输出如下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;quot;args&amp;quot;: &amp;#123;&amp;#125;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;quot;headers&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;Accept-Encoding&amp;quot;: &amp;quot;gzip,deflate&amp;quot;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;Connection&amp;quot;: &amp;quot;close&amp;quot;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;Host&amp;quot;: &amp;quot;httpbin.org&amp;quot;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;User-Agent&amp;quot;: &amp;quot;Apache-HttpClient/4.5.3 (Java/1.8.0_121)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;quot;origin&amp;quot;: &amp;quot;60.219.211.8&amp;quot;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;quot;url&amp;quot;: &amp;quot;https://httpbin.org/get&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;注：这里访问的并不是一个不受信任的站点，但是实际测试不受信任的站点也可以正常访问。&lt;/strong&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/04/09/regular-expression/</guid>
            <title>正则表达式原理探究</title>
            <link>https://blog.timerever.tk/2017/04/09/regular-expression/</link>
            <category>Regular Expression</category>
            <pubDate>Sun, 09 Apr 2017 08:52:41 +0000</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;正则表达式是被广为使用的工具，功能非常强大，但语法很复杂，想要完全记忆非常麻烦。&lt;br&gt;偶然间在《算法：第四版》上看到了有关于正则表达式原理的叙述，受益匪浅，在此做下笔记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;正则表达式的定义&#34;&gt;&lt;a href=&#34;#正则表达式的定义&#34; class=&#34;headerlink&#34; title=&#34;正则表达式的定义&#34;&gt;&lt;/a&gt;正则表达式的定义&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;什么是正则表达式？&lt;/strong&gt;一个正则表达式对应着一堆字符串，这些字符串构成一个集合，它们的共同特点就是匹配于这个正则表达式。例如：a(a|b) * b 就对应着第一个字符为a，最后一个字符为b，由a和b构成的字符串。 &lt;/p&gt;
&lt;p&gt;正则表达式有三种核心的基本结构：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;连接&lt;/em&gt;：如 abc，由 a, b, c连接而成。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;或&lt;/em&gt;：如 a|b|c，表示是 a 或 b 或 c。&lt;br&gt; ab|bcd表示ab或bcd。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;闭包&lt;/em&gt;：如a*b，表示0或若干个a和一个b连接而成的字符串。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上就是最最最基本的结构，是构成正则表达式的基础。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;我们可以使用括号改变优先级顺序，如 c(ac|b)d 表示 cacd, cbd。&lt;/p&gt;
&lt;p&gt;至于其它教程里写到的如 +,?, [] 等操作都是基本操作的简略缩写，它们都可以通过基本操作完成。    &lt;/p&gt;
&lt;p&gt;+ 是由那些基本操作完成的？(文章末尾给出答案)&lt;/p&gt;
&lt;p&gt;基本的语法就介绍到这，这篇文章并不是主要讲应用。有兴趣朋友可以在网上搜索完整的语法规则，非常详细。&lt;/p&gt;
&lt;h1 id=&#34;非确定有限状态自动机&#34;&gt;&lt;a href=&#34;#非确定有限状态自动机&#34; class=&#34;headerlink&#34; title=&#34;非确定有限状态自动机&#34;&gt;&lt;/a&gt;非确定有限状态自动机&lt;/h1&gt;&lt;h2 id=&#34;DFA&#34;&gt;&lt;a href=&#34;#DFA&#34; class=&#34;headerlink&#34; title=&#34;DFA&#34;&gt;&lt;/a&gt;DFA&lt;/h2&gt;&lt;p&gt;DFA 又叫确定有限状态自动机，即对于一个输入，它的输出状态是确定的。如图：  &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/regular-expression-1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;对于这个自动机，输出边是 Turn On 和 Turn Off 的动作，Turn On 导致状态变为 On，Turn Off 导致状态变为 Off。&lt;br&gt;这两个动作所导致的结果是可以预料的，确定的。所以说是确定有限状态自动机。&lt;/p&gt;
&lt;h2 id=&#34;NFA&#34;&gt;&lt;a href=&#34;#NFA&#34; class=&#34;headerlink&#34; title=&#34;NFA&#34;&gt;&lt;/a&gt;NFA&lt;/h2&gt;&lt;p&gt;NFA 叫非确定有限状态自动机，和 DFA 的唯一区别是它的输出是非确定的，DFA是NFA的一个子集。如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/regular-expression-2.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;还是那个例子，只不过状态 Off 的 Turn On 操作多了一个新的状态 Down  &lt;/p&gt;
&lt;p&gt;当我们进行 Turn On 操作时无法确定到达的是 On 还是 Down，因此是无法根据当前状态和输出边确定下一状态的，这就叫做非确定性有限状态自动机。&lt;/p&gt;
&lt;h2 id=&#34;实例&#34;&gt;&lt;a href=&#34;#实例&#34; class=&#34;headerlink&#34; title=&#34;实例&#34;&gt;&lt;/a&gt;实例&lt;/h2&gt;&lt;p&gt;我们先来看一个示例，它说明了 NFA 的性质和操作。如图：  &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/regular-expression-3.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;（图表示((A*B|AC)D)所对应的 NFA）&lt;/p&gt;
&lt;p&gt;我们定义的NFA有以下特点：     &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;正则表达式中每个字符有且只有一个对应的状态。&lt;/li&gt;
&lt;li&gt;字符所对应的状态有一条指向下一个字符对应状态的边（图中黑色的边）&lt;/li&gt;
&lt;li&gt;“(“,  “)”, “|“, 和”*”所对应的状态至少含有一条指出的边，可能指向任意状态（图中红色边）   &lt;/li&gt;
&lt;li&gt;一个状态只能有一条指出的黑色边&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们用构造的NFA去匹配文本，当从起始状态0能够到达最终状态的话，即匹配成功，这就是正则表达式匹配文本的原理。  &lt;/p&gt;
&lt;p&gt;NFA中状态的转换有以下两种:    &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;匹配转换： 当字符匹配时，由黑色的边转换到下一状态。&lt;/li&gt;
&lt;li&gt;ε-转换：不扫描任何字符，通过红色的边转换到另一个状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;NFA-的运行&#34;&gt;&lt;a href=&#34;#NFA-的运行&#34; class=&#34;headerlink&#34; title=&#34;NFA 的运行&#34;&gt;&lt;/a&gt;NFA 的运行&lt;/h2&gt;&lt;p&gt;运行的核心思想就是：遍历所有可能到达的状态序列，只要其中存在最终状态就匹配成功。类似于动态规划。&lt;/p&gt;
&lt;p&gt;首先将NFA中的两个状态转换表示出来。我们用一个char数组re[]保存正则表达式本身 ，如果re[i]存在于字母表中，那么就存在一个从i到i+1的匹配转换。     &lt;/p&gt;
&lt;p&gt;自然地，ε- 转换就用有向图G表示，实例中的 ε-转换可构建为: 0-&amp;gt;1  1-&amp;gt;2   1-&amp;gt;6    2-&amp;gt;3……以此类推。  &lt;/p&gt;
&lt;p&gt;当处于状态 0 时，我们遍历所有从0通过ε-转换(有向图的深度优先搜索)可到达的状态放入一个集合，再从中查找是否存在最终状态的值。&lt;br&gt;当匹配一个字符到达状态1后，再遍历所有从1通过ε-转换可到达的状态……如此反复，当文本结束时从集合中找到是否含有最终状态来说明是否到达接受状态。  &lt;/p&gt;
&lt;p&gt;例如，在实例中初始集合为{1, 2, 3, 4, 6}，如果第一个字符为A，则接下来可能的状态为 {3, 7} ,通过 ε- 转换可到 2，4，因此第二个字符状态集合为 {2, 3, 4, 7}。再不断重复这个过程直到文本结束。    &lt;/p&gt;
&lt;p&gt;输入A A B D会有什么样的轨迹？(文章末尾给出答案)&lt;/p&gt;
&lt;h2 id=&#34;NFA-的构造&#34;&gt;&lt;a href=&#34;#NFA-的构造&#34; class=&#34;headerlink&#34; title=&#34;NFA 的构造&#34;&gt;&lt;/a&gt;NFA 的构造&lt;/h2&gt;&lt;p&gt;长串的正则表达式都是三个基本操作和括号构成的，因此我们的NFA也可以看作成若干基本操作拼接而成，下面就来介绍一下基本操作所对应的 NFA。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;连接操作：字符加状态匹配即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/regular-expression-4.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;括号：用栈处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;闭包操作：   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;出现在单个字符之后：在该字符和 * 之间添加两条 ε- 转换。&lt;br&gt; &lt;img src=&#34;/regular-expression-5.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;出现在右括号之后：在栈顶的左括号和 * 之间添加两条 ε- 转换。&lt;br&gt; &lt;img src=&#34;/regular-expression-6.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;或：A|B中A和B都是正则表达式。同样也是添加两条ε-转换，一条从左括号指向&lt;br&gt;B中第一个字符，另一条从|字符指向右括号。这使NFA能够进行选择。&lt;img src=&#34;/regular-expression-7.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;运用以上几个基本的 NFA，我们可以拼接出任意 NFA。  &lt;/p&gt;
&lt;h1 id=&#34;代码&#34;&gt;&lt;a href=&#34;#代码&#34; class=&#34;headerlink&#34; title=&#34;代码&#34;&gt;&lt;/a&gt;代码&lt;/h1&gt;&lt;p&gt;本篇文章以介绍概念为主，具体的实现可参照&lt;a href=&#34;http://algs4.cs.princeton.edu/54regexp/NFA.java.html&#34;&gt;NFA.java&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;后记&#34;&gt;&lt;a href=&#34;#后记&#34; class=&#34;headerlink&#34; title=&#34;后记&#34;&gt;&lt;/a&gt;后记&lt;/h1&gt;&lt;h2 id=&#34;感想&#34;&gt;&lt;a href=&#34;#感想&#34; class=&#34;headerlink&#34; title=&#34;感想&#34;&gt;&lt;/a&gt;感想&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;正则表达式是很强大的工具，网上教程一大把，但多数是直接告诉你语法，基本没规律，只能强记，效率略低。&lt;br&gt;明白原理后，不仅记忆深刻，而且还可以编写适合自己的规则。&lt;br&gt;（其实说到底都是《编译原理》课程上的东西，无奈学校不开😤好气哦）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;《算法：第4版》&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;答案&#34;&gt;&lt;a href=&#34;#答案&#34; class=&#34;headerlink&#34; title=&#34;答案&#34;&gt;&lt;/a&gt;答案&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;+ : (ab)+ 等价于 (ab)(ab)*&lt;/li&gt;
&lt;li&gt;{0, 1, 2, 3, 4, 6} -&amp;gt; {2, 3, 4, 7} -&amp;gt; {2, 3, 4} -&amp;gt; {5, 8, 9} -&amp;gt; {10}&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/04/04/windows-init/</guid>
            <title>Windows 配置</title>
            <link>https://blog.timerever.tk/2017/04/04/windows-init/</link>
            <category>Windows</category>
            <category>Regedit</category>
            <category>PowerShell</category>
            <pubDate>Tue, 04 Apr 2017 06:44:47 +0000</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;一个存放 Windows 各种配置和各种命令的地方，毕竟 Windows 的功能有的藏的实在是深或者是没有直接的入口。这种东西大多网络收集，且都是网上存在的，找不到具体出处，所以此处不列出出处。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;注册表相关&#34;&gt;&lt;a href=&#34;#注册表相关&#34; class=&#34;headerlink&#34; title=&#34;注册表相关&#34;&gt;&lt;/a&gt;注册表相关&lt;/h3&gt;&lt;p&gt;“regedit.exe” 是 Windows 系统的注册表编辑器，是 Registry Editor 的缩写。其实质上是一个庞大的数据库，它存储这下面这些内容：软、硬件的有关配置和状态信息，应用程序和资源管理器外壳的初始条件、首选项和卸载数据；计算机的整个系统的设置和各种许可，文件扩展名与应用程序的关联，硬件的描述、状态和属性；计算机性能纪录和底层的系统状态信息，以及各类其他数据。（摘自百度百科）&lt;/p&gt;
&lt;p&gt;通常可使用 &lt;code&gt;win + r&lt;/code&gt; 运行输入 &lt;code&gt;regedit&lt;/code&gt; 打开。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h4 id=&#34;删除我的电脑中应用添加的图标&#34;&gt;&lt;a href=&#34;#删除我的电脑中应用添加的图标&#34; class=&#34;headerlink&#34; title=&#34;删除我的电脑中应用添加的图标&#34;&gt;&lt;/a&gt;删除我的电脑中应用添加的图标&lt;/h4&gt;&lt;p&gt;由于一般使用绿色版，所以接触的不是很多，但印象中百度云管家、360 云盘这种东西都是会增加图标的，而且有的应用添加的图标是不能右键删除的，这里记录下使用注册表的解决方法。&lt;/p&gt;
&lt;p&gt;接触到的图标都是在下列位置新建&lt;strong&gt;注册表项&lt;/strong&gt;，发现其余的再补充。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中一个项对应一个图标，但没有很好的办法辨别其对应关系，在图标很多时建议先备份再删除。&lt;/p&gt;
&lt;p&gt;日常电脑中没有那种烦人的图标，这次因为有一个出现才去找解决办法删掉了，所以，已经没有图可以截了。&lt;/p&gt;
&lt;h4 id=&#34;Win10-系统图片打开方式恢复默认照片查看器&#34;&gt;&lt;a href=&#34;#Win10-系统图片打开方式恢复默认照片查看器&#34; class=&#34;headerlink&#34; title=&#34;Win10 系统图片打开方式恢复默认照片查看器&#34;&gt;&lt;/a&gt;Win10 系统图片打开方式恢复默认照片查看器&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Photo Viewer\Capabilities\FileAssociations
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中每一个&lt;strong&gt;字符串值&lt;/strong&gt;代表一种后缀的关联，数值名称为所想要关联的后缀，例如 &lt;code&gt;.jpg&lt;/code&gt;，数值数据统一写 &lt;code&gt;PhotoViewer.FileAssoc.Tiff&lt;/code&gt;，想恢复哪种右键关联就新建对应后缀的注册表&lt;strong&gt;字符串值&lt;/strong&gt;即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;已知此路径非唯一的恢复方式，存在其余注册表路径可以恢复。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不过，还是推荐使用 &lt;a href=&#34;http://www.chuyu.me/zh-Hans/index.html&#34;&gt;Dism++&lt;/a&gt; 恢复，方便快捷（Dism++ 采用的就是上面所列出的的注册表路径）。&lt;/p&gt;
&lt;h3 id=&#34;PowerShell&#34;&gt;&lt;a href=&#34;#PowerShell&#34; class=&#34;headerlink&#34; title=&#34;PowerShell&#34;&gt;&lt;/a&gt;PowerShell&lt;/h3&gt;&lt;h4 id=&#34;卸载Modern-应用&#34;&gt;&lt;a href=&#34;#卸载Modern-应用&#34; class=&#34;headerlink&#34; title=&#34;卸载Modern 应用&#34;&gt;&lt;/a&gt;卸载Modern 应用&lt;/h4&gt;&lt;p&gt;除了企业的 LTSB 长期支持版本，家庭版和专业版都会附带 Modern 应用，对于很少使用且不能直接卸载的，可以使用 PowerShell 来卸载部分应用。&lt;br&gt;仅列出无法右键卸载的，可用 PowerShell 卸载的部分应用。&lt;br&gt;闹钟：get-appxpackage &lt;em&gt;Microsoft.WindowsAlarms&lt;/em&gt; | remove-appxpackage&lt;br&gt;人脉：get-appxpackage &lt;em&gt;Microsoft.People&lt;/em&gt; | remove-appxpackage&lt;br&gt;信息：get-appxpackage &lt;em&gt;Microsoft.Messaging&lt;/em&gt; | remove-appxpackage&lt;br&gt;StickyNote：get-appxpackage &lt;em&gt;Sticky&lt;/em&gt; | remove-appxpackage&lt;/p&gt;
&lt;h3 id=&#34;杂类&#34;&gt;&lt;a href=&#34;#杂类&#34; class=&#34;headerlink&#34; title=&#34;杂类&#34;&gt;&lt;/a&gt;杂类&lt;/h3&gt;&lt;h4 id=&#34;关闭密码登录&#34;&gt;&lt;a href=&#34;#关闭密码登录&#34; class=&#34;headerlink&#34; title=&#34;关闭密码登录&#34;&gt;&lt;/a&gt;关闭密码登录&lt;/h4&gt;&lt;p&gt;由于各种原因，Windows 账户需要设置密码然而很烦每次开机都要输入密码，使用下面设置即可完成不需每次都输入密码即可自动登录系统。&lt;/p&gt;
&lt;p&gt;开始——运行——输入 &lt;code&gt;control userpasswords2&lt;/code&gt;，取消 “要使用本计算机，用户必须输入用户名和密码” 勾选，点击确定关闭窗口后输入想自动登录的用户名和密码，确定后即可。&lt;/p&gt;
&lt;h4 id=&#34;桌面图标设置&#34;&gt;&lt;a href=&#34;#桌面图标设置&#34; class=&#34;headerlink&#34; title=&#34;桌面图标设置&#34;&gt;&lt;/a&gt;桌面图标设置&lt;/h4&gt;&lt;p&gt;通常系统自带桌面图标的设置，可以在进入系统桌面后，右键个性化找到桌面图标设置选项（具体因系统而异）进行修改，然而对于服务器系统，右键并没有个性化选项，无法修改桌面图标，可使用下列命令调出设置窗口设置。&lt;/p&gt;
&lt;p&gt;开始——运行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rundll32.exe shell32.dll,Control_RunDLL desk.cpl,,0
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/03/18/git-tutorial/</guid>
            <title>Git 简易教程</title>
            <link>https://blog.timerever.tk/2017/03/18/git-tutorial/</link>
            <category>Git</category>
            <category>GitHub</category>
            <pubDate>Sat, 18 Mar 2017 03:07:37 +0000</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;一个好早就写了出来的教材，代没某大佬投递&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;版本控制&#34;&gt;&lt;a href=&#34;#版本控制&#34; class=&#34;headerlink&#34; title=&#34;版本控制&#34;&gt;&lt;/a&gt;版本控制&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;为什么要进行版本控制？&lt;/strong&gt;  最简单的例子，当我们用文字处理软件工作时（如Word）需要进行修改，而有时候又不确定修改的内容是不是需要的，因此会产生许多个文件，如图：  &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/git-tutorial-1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;每一个文件都是在之前的文件基础上进行微小的修改，久而久之，不但文件冗杂，而且还不清楚修改的内容是什么，是一种很杂乱的方式。&lt;/p&gt;
&lt;p&gt;而版本控制就是解决这一问题——通过记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。&lt;/p&gt;
&lt;p&gt;采取版本控制后，你可以将文件还原到之前的状态，比较各状态之间的细节从而查出是修改了哪个地方，找出哪里出了问题。甚至你可以随意删改项目中的文件，照样可以恢复到之前的样子，因而增加了容错率，提供了更多可能性。&lt;/p&gt;
&lt;p&gt;版本控制有三种，第一种是本地式版本控制，也就是在本地的硬盘上用数据库记录历代文件；第二种是集中式版本控制，通过一个服务器，多个用户连接到服务器进行文件的记录。&lt;br&gt;而第三种是我们着重介绍的&lt;em&gt;分布式版本控制&lt;/em&gt;，它将前两种结合起来，在本地和服务器都建立数据库，每次工作时从服务器克隆（clone）下来，同时又与服务器交互，从而兼顾协同性和安全性。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;我们所说的git就是一个分布式版本控制软件，GitHub就是一个git的托管服务。&lt;/em&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h1 id=&#34;git本地操作&#34;&gt;&lt;a href=&#34;#git本地操作&#34; class=&#34;headerlink&#34; title=&#34;git本地操作&#34;&gt;&lt;/a&gt;git本地操作&lt;/h1&gt;&lt;p&gt;git设计简单，是完全分布式，允许成千上万个并行开发的分支(Branch)，有能力管理超大规模的项目，是目前首选的版本控制软件。&lt;/p&gt;
&lt;h2 id=&#34;一、工作流程&#34;&gt;&lt;a href=&#34;#一、工作流程&#34; class=&#34;headerlink&#34; title=&#34;一、工作流程&#34;&gt;&lt;/a&gt;一、工作流程&lt;/h2&gt;&lt;p&gt;git的三个工作区域，对应着三种状态：&lt;br&gt;&lt;img src=&#34;/git-tutorial-2.png&#34;&gt;&lt;br&gt;git 工作流程如下：    &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在工作目录中修改文件。（modified）  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;暂存文件，将文件的快照放入暂存区域。（staged）  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提交更新，找到暂存区域的文件，将快照永久性存储到 git 仓库目录。（committed）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这是最基本的流程，需要时刻记住。  &lt;/p&gt;
&lt;h2 id=&#34;二、安装git&#34;&gt;&lt;a href=&#34;#二、安装git&#34; class=&#34;headerlink&#34; title=&#34;二、安装git&#34;&gt;&lt;/a&gt;二、安装git&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git 官方网站&lt;/a&gt;下载对应自己电脑的版本，按照指引进行安装。&lt;/p&gt;
&lt;h2 id=&#34;三、git使用知识&#34;&gt;&lt;a href=&#34;#三、git使用知识&#34; class=&#34;headerlink&#34; title=&#34;三、git使用知识&#34;&gt;&lt;/a&gt;三、git使用知识&lt;/h2&gt;&lt;p&gt;首先我们需要在本地创建一个仓库，用于存放历代版本。&lt;/p&gt;
&lt;p&gt;1.命令行中运用cd指令进入项目的目录，输入 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    $ git init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这将创建一个名为.git的隐藏子目录。&lt;/p&gt;
&lt;p&gt;2.git status:查看哪些文件处于什么状态&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    $ git status
    On branch master
    nothing to commit, working directory clean
   （创建git仓库后目录下没有文件时的情况）  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;   创建一个文件（test）后再使用git status命令，将会看到一个新的提示  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    $ git status
    On branch master
    Your branch is up-to-date with &amp;#39;origin/master&amp;#39;.
    Untracked files:
    (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)

        test

    nothing added to commit but untracked files present (use &amp;quot;git add&amp;quot; to track)

    （新建的“test”文件出现在Untracked files下）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.git add：跟踪文件&lt;br&gt;运行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    $ git add test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时再运行git status，会看到test文件已被跟踪，处于暂存状态(staged)，显示Changes to be committed&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    $ git status
    On branch master
    Your branch is up-to-date with &amp;#39;origin/master&amp;#39;.
    Changes to be committed:
    (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)

        test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4.git commit：提交更新至仓库&lt;/p&gt;
&lt;p&gt;先用git status命令确定暂存区域准备妥当，&lt;br&gt;再运行$git commit -m ”提交信息”（提交信息指本次提交的说明，类似于注释）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git commit -m &amp;quot;first&amp;quot;
[master 5e43df6] first
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 test 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时会显示提交成功的信息。  &lt;/p&gt;
&lt;p&gt;5.git diff：显示尚未暂存的改动（并不是所有改动）&lt;/p&gt;
&lt;p&gt;6.git rm test：删除暂存区域中的文件test&lt;/p&gt;
&lt;p&gt;7.git log:查看提交历史&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git log
commit 5e43df6b6d003ea70444ee3125456fd75b066803
Author: *** &amp;lt;****@gmail.com&amp;gt;
Date:   Thu Mar 16 19:37:52 2017 +0800

first

commit 1c83e2a07f0279ea510e2a323fada53166c3c657
Author: *** &amp;lt;****@gmail.com&amp;gt;
Date:   Thu Mar 16 19:16:26 2017 +0800

test  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;8.版本回退&lt;/p&gt;
&lt;p&gt;  在git log命令中我们可以看到类似&lt;em&gt;5e43……6803&lt;/em&gt;的一大串字符，那就是版本号（commit id）我们可以用 git reset命令回退到之前任何一个版本:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; $ git reset --hard 1c83e2a0
   HEAD is now at 1c83e2a test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（版本号不必补全，Git会自动去查找）&lt;/p&gt;
&lt;p&gt;以上就是git的本地基本操作，包括创建一个仓库，更改、暂存和提交，查看仓库的提交历史，版本回退。&lt;/p&gt;
&lt;h1 id=&#34;分支&#34;&gt;&lt;a href=&#34;#分支&#34; class=&#34;headerlink&#34; title=&#34;分支&#34;&gt;&lt;/a&gt;分支&lt;/h1&gt;&lt;p&gt;分支是把工作从主线上分离开来，以免影响开发主线。在不同的分支上你可以尝试各种各样的增删改，实现不同的设想。而git的分支模型是它最突出的特点，也是git脱颖而出的原因。&lt;/p&gt;
&lt;h2 id=&#34;一、分支概念&#34;&gt;&lt;a href=&#34;#一、分支概念&#34; class=&#34;headerlink&#34; title=&#34;一、分支概念&#34;&gt;&lt;/a&gt;一、分支概念&lt;/h2&gt;&lt;p&gt;在版本回退里，你可以回溯到之前的任意版本，而这些版本都是处于一条时间线上，这条时间线就是一个分支。&lt;br&gt;默认的分支为master分支，本身可以看做一个指针，HEAD指针则指向master指针，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/git-tutorial-3.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;每次提交都会多出一个节点，指针也随之移动。&lt;br&gt;当我们创建新的分支时，也就创建了一个新的指针，我们通过命令将HEAD指针移到新指针上：&lt;br&gt;&lt;img src=&#34;/git-tutorial-4.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;新提交一次后，新指针向前移动，master指针不变，这就产生了分支：&lt;br&gt;我们可以将两条分支合并，之后可以删掉新分支。&lt;br&gt;&lt;img src=&#34;/git-tutorial-5.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/git-tutorial-6.png&#34;&gt;&lt;br&gt;这样就完成了分支的合并。&lt;/p&gt;
&lt;h2 id=&#34;二、分支使用&#34;&gt;&lt;a href=&#34;#二、分支使用&#34; class=&#34;headerlink&#34; title=&#34;二、分支使用&#34;&gt;&lt;/a&gt;二、分支使用&lt;/h2&gt;&lt;p&gt;1.git branch：查看当前所有分支      &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git branch
* master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（*标示当前分支，默认处于master分支）  &lt;/p&gt;
&lt;p&gt;2.git branch testing : 创建testing分支      &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git branch testing
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时创建了testing分支，运行git branch命令验证       &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$git branch    
* master
testing
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.git checkout testing： 切换到testing分支      &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout testing
Switched to branch &amp;#39;testing&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时主分支位于testing，运行git branch命令验证   &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git branch
  master
* testing
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4.git merge testing：将master分支和testing分支合并&lt;br&gt;（假设处于master分支）  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git merge testing
Already up-to-date.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，则会产生冲突从而无法合并，只能手动解决后再合并。    &lt;/p&gt;
&lt;p&gt;5.git branch -d删除分支  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git branch -d testing
Deleted branch testing (was 1c83e2a).  
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;使用GitHub&#34;&gt;&lt;a href=&#34;#使用GitHub&#34; class=&#34;headerlink&#34; title=&#34;使用GitHub&#34;&gt;&lt;/a&gt;使用GitHub&lt;/h1&gt;&lt;p&gt;GitHub 是最大的 Git 版本库托管商，尽管这不是 Git 开源项目的直接部分，但如果想要专业地使用 Git，你将不可避免地与 GitHub 打交道。  &lt;/p&gt;
&lt;h3 id=&#34;创建帐户及配置&#34;&gt;&lt;a href=&#34;#创建帐户及配置&#34; class=&#34;headerlink&#34; title=&#34;创建帐户及配置&#34;&gt;&lt;/a&gt;创建帐户及配置&lt;/h3&gt;&lt;p&gt;1.访问&lt;a href=&#34;https://github.com进行注册/&#34;&gt;https://github.com进行注册&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;2.SSH访问：    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd ~/.ssh
$ ls
 id_rsa        id_rsa.pub    known_hosts  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 寻找到id_rsa命名的文件，.pub文件是公钥，另一个是私钥。    &lt;/p&gt;
&lt;p&gt; 如果找不到，可以运行如下命令创建它们    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt; $ ssh-keygen  
 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 进入github的帐户设置，点击左侧的SSH and GPG keys，将~&amp;#x2F;.ssh&amp;#x2F;id_rsa.pub公钥文件的内容粘贴到文本区，然后点击”Add key”    &lt;/p&gt;
&lt;p&gt; SSH访问配置成功     &lt;/p&gt;
&lt;h3 id=&#34;创建、维护和管理你自己的项目。&#34;&gt;&lt;a href=&#34;#创建、维护和管理你自己的项目。&#34; class=&#34;headerlink&#34; title=&#34;创建、维护和管理你自己的项目。&#34;&gt;&lt;/a&gt;创建、维护和管理你自己的项目。&lt;/h3&gt;&lt;p&gt;1.点击页面右上角的＋号，点击New repository按钮&lt;br&gt;&lt;img src=&#34;/git-tutorial-7.png&#34;&gt;&lt;br&gt; &lt;img src=&#34;/git-tutorial-8.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Respository name是必填项目，而其余都是选填项，可以默认。&lt;br&gt;点击Create respository按钮  ，即创建了一个新的仓库&lt;br&gt;这时候可以将项目分享给其他人，通过HTTP和SSH的形式。&lt;br&gt;&lt;img src=&#34;/git-tutorial-9.png&#34;&gt;&lt;/p&gt;
&lt;p&gt; 2.对仓库进行操作，使本地和github同步  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     $ git remote add origin     **********（仓库地址）   
    （添加远程仓库至本地）
   
     $ git pull --rebase origin master    
    （更新远程更新到本地）

     $ git push -u origin master  
    （将本地仓库和远程仓库合并）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 在今后的项目工作中就是用以上命令同步本地和Github，需要记住。  &lt;/p&gt;
&lt;p&gt; 3.克隆仓库&lt;br&gt; 我们可以将远程仓库的内容克隆到本地&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; $ git clone git@github.com:Liuwt1997/github-photo.git
Cloning into &amp;#39;github-photo&amp;#39;...
remote: Counting objects: 3, done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0
Receiving objects: 100% (3/3), 196.28 KiB | 67.00 KiB/s, done.
Checking connectivity... done.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;   此时远程仓库的文件全部克隆至本地。&lt;/p&gt;
&lt;p&gt; 4.添加合作者&lt;br&gt;点击边栏的 “Settings” 链接，然后从左侧菜单中选择 “Collaborators” 。 然后，在输入框中填写用户名，点击 “Add collaborator.” 此时可以给予他们提交的权限。  &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/git-tutorial-10.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;5.Fork按钮可以将他人项目派生下来，在你的空间中创建一个完全属于你的项目副本。  &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/git-tutorial-11.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;如何对项目做出贡献呢？    &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;将派生出的副本克隆到本地&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建出名称有意义的分支&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;检查改动&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将改动提交到分支中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将新分支推送到 GitHub 的副本中&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;现在到 GitHub 上查看之前的项目副本，可以看到 GitHub 提示我们有新的分支，并且显示了一个大大的绿色按钮让我们可以检查我们的改动，并给源项目创建合并请求。    &lt;/p&gt;
&lt;p&gt;如果你点击了那个绿色按钮，就会看到一个新页面，在这里我们可以对改动填写标题和描述，让项目的拥有者考虑一下我们的改动。通常花点时间来编写个清晰有用的描述是个不错的主意，这能让作者明白为什么这个改动可以给他的项目带来好处，并且让他接受合并请求。  &lt;/p&gt;
&lt;p&gt;以上就是简单的Github的使用方法。    &lt;/p&gt;
&lt;p&gt;参考资料：        &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/zh/v2&#34;&gt;https://git-scm.com/book/zh/v2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/&#34;&gt;廖雪峰git教程&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/03/13/docker-learning-trip-6/</guid>
            <title>Docker 学习之旅（六）：使用 Docker 搭建 Java Web 运行环境</title>
            <link>https://blog.timerever.tk/2017/03/13/docker-learning-trip-6/</link>
            <category>Docker</category>
            <category>Java Web</category>
            <pubDate>Mon, 13 Mar 2017 01:58:28 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;学习 Docker 在一开始肯定不是去学习它的理论（至少对大部分人而言），而是学习它的使用方法进而去使用。大概搭建好了 Docker 的环境，也尝试了创建自己的 Docker 镜像，现在就可以尝试一些比较实用的东西，比如使用 Docker 来搭建 Java Web 运行环境。&lt;/p&gt;
&lt;h3 id=&#34;寻找镜像&#34;&gt;&lt;a href=&#34;#寻找镜像&#34; class=&#34;headerlink&#34; title=&#34;寻找镜像&#34;&gt;&lt;/a&gt;寻找镜像&lt;/h3&gt;&lt;p&gt;既然官方的镜像那么多，那么我们为什么不先去看一下官方镜像呢？打开 Docker Hub 一搜索 tomcat，排在第一个的就是。&lt;/p&gt;
&lt;p&gt;地址：&lt;a href=&#34;https://hub.docker.com/_/tomcat/&#34;&gt;https://hub.docker.com/_/tomcat/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这边选择 tomcat7 + jre7，但是通过查看构建所使用的 &lt;code&gt;Dockfile&lt;/code&gt; 文件发现，tomcat 的官方源采用的是 jre7 是 openJDK7 的 jre，这里需要注意。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h3 id=&#34;下载运行-tomcat&#34;&gt;&lt;a href=&#34;#下载运行-tomcat&#34; class=&#34;headerlink&#34; title=&#34;下载运行 tomcat&#34;&gt;&lt;/a&gt;下载运行 tomcat&lt;/h3&gt;&lt;p&gt;tomcat 的默认启动参数为 &lt;code&gt;CMD [&amp;quot;catalina.sh&amp;quot;, &amp;quot;run&amp;quot;]&lt;/code&gt;，启动方式为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -it --rm tomcat:7.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用 &lt;code&gt;http://container-ip:8080&lt;/code&gt; 在浏览器访问。&lt;/p&gt;
&lt;p&gt;或者将端口映射到本地，运行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run -it --rm -p 8888:8080 tomcat:7.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后使用 &lt;code&gt;http://localhost:8888&lt;/code&gt; 或是 &lt;code&gt;http://host-ip:8888&lt;/code&gt; 访问。&lt;/p&gt;
&lt;h3 id=&#34;部署-Java-Web-项目&#34;&gt;&lt;a href=&#34;#部署-Java-Web-项目&#34; class=&#34;headerlink&#34; title=&#34;部署 Java Web 项目&#34;&gt;&lt;/a&gt;部署 Java Web 项目&lt;/h3&gt;&lt;p&gt;文档上已经说明，对于 tomcat 7 ，tomcat 所在目录为 &lt;code&gt;/usr/local/tomcat&lt;/code&gt;，所以对其进行修改完成部署。&lt;/p&gt;
&lt;h4 id=&#34;复制文件&#34;&gt;&lt;a href=&#34;#复制文件&#34; class=&#34;headerlink&#34; title=&#34;复制文件&#34;&gt;&lt;/a&gt;复制文件&lt;/h4&gt;&lt;p&gt;先使用如下命令启动容器：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run -it -v /home/ubuntu/tomcat:/mnt/war tomcat:7.0 /bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此处相关参数包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-i&lt;/code&gt;：表示以“交互模式”运行容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-t&lt;/code&gt;：表示容器启动后会进入其命令行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v&lt;/code&gt;：表示需要将本地哪个目录挂载到容器中，格式：-v &amp;lt;宿主机目录&amp;gt;:&amp;lt;容器目录&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即运行后进入容器命令行，并将主机的 &lt;code&gt;/home/ubuntu/tomcat&lt;/code&gt; 挂载到了容器的 &lt;code&gt;/mnt/war&lt;/code&gt; 目录。&lt;/p&gt;
&lt;p&gt;然后将部署文件拷贝到主机的 &lt;code&gt;/home/ubuntu/tomcat&lt;/code&gt; 目录并继续在容器中操作部署程序。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# cd webapps/ROOT/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# rm -rf *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# cp -r /mnt/war/* .&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# exit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;创建镜像&#34;&gt;&lt;a href=&#34;#创建镜像&#34; class=&#34;headerlink&#34; title=&#34;创建镜像&#34;&gt;&lt;/a&gt;创建镜像&lt;/h4&gt;&lt;p&gt;此处需要记住刚才所运行容器的 ID，bash 里面 &lt;code&gt;root@0b2d4744734c&lt;/code&gt; 的 ‘root@’ 后面的便是容器 ID。如果已经找不到，可使用 &lt;code&gt;docker ps -a&lt;/code&gt; 查看之前所运行过的所有容器。&lt;/p&gt;
&lt;p&gt;然后创建镜像。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker commit 0b2d4744734c timerever/javaweb:1.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;运行镜像&#34;&gt;&lt;a href=&#34;#运行镜像&#34; class=&#34;headerlink&#34; title=&#34;运行镜像&#34;&gt;&lt;/a&gt;运行镜像&lt;/h3&gt;&lt;p&gt;使用刚刚自定的名称运行镜像。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -it --rm -p 8888:8080 timerever/javaweb:1.0 catalina.sh run
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/03/11/docker-learning-trip-5/</guid>
            <title>Docker 学习之旅（五）：Docker 下的 srceenfetch</title>
            <link>https://blog.timerever.tk/2017/03/11/docker-learning-trip-5/</link>
            <category>Docker</category>
            <pubDate>Sat, 11 Mar 2017 01:25:43 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;在之前介绍了 &lt;code&gt;Dockerfile&lt;/code&gt; 文件和 Docker Hub 的使用，现在就来完整的应用其创建一个 Docker 下的 srceenfetch。&lt;/p&gt;
&lt;h4 id=&#34;关于-srceenfetch&#34;&gt;&lt;a href=&#34;#关于-srceenfetch&#34; class=&#34;headerlink&#34; title=&#34;关于 srceenfetch&#34;&gt;&lt;/a&gt;关于 srceenfetch&lt;/h4&gt;&lt;p&gt;srceenfetch 基本是我在每一个 Linux 主机都会安装的程序，大概就是用来秀 Linux 和一个简略但直观地展示硬件环境的一个应用程序。&lt;/p&gt;
&lt;p&gt;该项目托管在 GitHub，项目地址为：&lt;a href=&#34;https://github.com/KittyKatt/screenFetch&#34;&gt;https://github.com/KittyKatt/screenFetch&lt;/a&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h3 id=&#34;创建-Docker-Hub-仓库&#34;&gt;&lt;a href=&#34;#创建-Docker-Hub-仓库&#34; class=&#34;headerlink&#34; title=&#34;创建 Docker Hub 仓库&#34;&gt;&lt;/a&gt;创建 Docker Hub 仓库&lt;/h3&gt;&lt;p&gt;在 Docker Hub 网页上创建一个 Docker Hub 仓库，具体操作很简单，不再赘述。&lt;/p&gt;
&lt;p&gt;此处创建的仓库为：&lt;code&gt;timerever/screenfetch&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;构建镜像&#34;&gt;&lt;a href=&#34;#构建镜像&#34; class=&#34;headerlink&#34; title=&#34;构建镜像&#34;&gt;&lt;/a&gt;构建镜像&lt;/h3&gt;&lt;h4 id=&#34;创建-Dockerfile-文件&#34;&gt;&lt;a href=&#34;#创建-Dockerfile-文件&#34; class=&#34;headerlink&#34; title=&#34;创建 Dockerfile 文件&#34;&gt;&lt;/a&gt;创建 Dockerfile 文件&lt;/h4&gt;&lt;p&gt;因为 screenfetch 在 Ubuntu 中可以直接通过 &lt;code&gt;apt-get&lt;/code&gt; 安装，所以直接使用 Ubuntu 源安装。&lt;/p&gt;
&lt;p&gt;创建 &lt;code&gt;Dockerfile&lt;/code&gt; 文件。&lt;/p&gt;
&lt;figure class=&#34;highlight dockerfile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ vi Dockerfile&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; ubuntu&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;RUN&lt;/span&gt;&lt;span class=&#34;bash&#34;&gt; apt-get update &amp;amp;&amp;amp; apt-get install -y screenfetch&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;CMD&lt;/span&gt;&lt;span class=&#34;bash&#34;&gt; screenfetch&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;构建镜像并运行&#34;&gt;&lt;a href=&#34;#构建镜像并运行&#34; class=&#34;headerlink&#34; title=&#34;构建镜像并运行&#34;&gt;&lt;/a&gt;构建镜像并运行&lt;/h4&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ docker build -t &lt;span class=&#34;string&#34;&gt;&amp;quot;timerever/screenfetch&amp;quot;&lt;/span&gt; .&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ docker run timerever/screenfetch&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;上传镜像&#34;&gt;&lt;a href=&#34;#上传镜像&#34; class=&#34;headerlink&#34; title=&#34;上传镜像&#34;&gt;&lt;/a&gt;上传镜像&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;docker push timerever/screenfetch
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果没有登录，先使用 &lt;code&gt;docker login&lt;/code&gt; 登录即可。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/03/09/docker-learning-trip-4/</guid>
            <title>Docker 学习之旅（四）：Docker Hub</title>
            <link>https://blog.timerever.tk/2017/03/09/docker-learning-trip-4/</link>
            <category>Docker</category>
            <pubDate>Thu, 09 Mar 2017 06:42:13 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;Docker Hub 是一个由 Docker 公司负责维护的公共注册中心，它包含了超过 15,000 个可用来下载和构建容器的镜像，并且还提供认证、工作组结构、工作流工具（比如 webhooks）、构建触发器以及私有工具（比如私有仓库可用于存储你并不想公开分享的镜像）。&lt;/p&gt;
&lt;h3 id=&#34;总览&#34;&gt;&lt;a href=&#34;#总览&#34; class=&#34;headerlink&#34; title=&#34;总览&#34;&gt;&lt;/a&gt;总览&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/docker-hub/&#34;&gt;Docker Hub&lt;/a&gt; 负责集中用户账号、镜像和公开的命名空间的信息，分别由不同的部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web UI&lt;/li&gt;
&lt;li&gt;Meta-data store (comments, stars, list public repositories)&lt;/li&gt;
&lt;li&gt;Authentication service&lt;/li&gt;
&lt;li&gt;Tokenization&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这仅仅是 Docker Hub 的一个基本组成，它对大多数的个人和小型企业是十分有帮助的。在改版后，文档将 Docker Hub 部分独立出去，这里遵循以前的顺序，介绍下 Docker Hub 的基础应用。&lt;/p&gt;
&lt;p&gt;有关于 Docker Hub 的文档：&lt;a href=&#34;https://docs.docker.com/docker-hub/&#34;&gt;https://docs.docker.com/docker-hub/&lt;/a&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h3 id=&#34;使用&#34;&gt;&lt;a href=&#34;#使用&#34; class=&#34;headerlink&#34; title=&#34;使用&#34;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;p&gt;没有登录帐号的情况下可以 &lt;code&gt;search&lt;/code&gt; 或者 &lt;code&gt;pull&lt;/code&gt; 镜像，但是不能 &lt;code&gt;push&lt;/code&gt; 镜像。&lt;/p&gt;
&lt;h3 id=&#34;团队和组织&#34;&gt;&lt;a href=&#34;#团队和组织&#34; class=&#34;headerlink&#34; title=&#34;团队和组织&#34;&gt;&lt;/a&gt;团队和组织&lt;/h3&gt;&lt;p&gt;太高大上，个人的我用不上，不太了解。&lt;/p&gt;
&lt;h3 id=&#34;仓库&#34;&gt;&lt;a href=&#34;#仓库&#34; class=&#34;headerlink&#34; title=&#34;仓库&#34;&gt;&lt;/a&gt;仓库&lt;/h3&gt;&lt;h4 id=&#34;搜索镜像&#34;&gt;&lt;a href=&#34;#搜索镜像&#34; class=&#34;headerlink&#34; title=&#34;搜索镜像&#34;&gt;&lt;/a&gt;搜索镜像&lt;/h4&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ docker search centos&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;NAME                                 DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;centos                               The official build of CentOS.                   1034      [OK]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ansible/centos7-ansible              Ansible on Centos7                              43                   [OK]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tutum/centos                         Centos image with SSH access. For the root...   13                   [OK]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;没有 &lt;code&gt;/&lt;/code&gt; 的镜像说明来自顶层的官方镜像。&lt;/p&gt;
&lt;p&gt;可以使用 &lt;code&gt;docker pull &amp;lt;imagename&amp;gt;&lt;/code&gt; 下载所需要的镜像。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ docker pull centos&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;latest: Pulling from centos&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6941bfcbbfca: Pull complete&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41459f052977: Pull complete&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fd44297e2ddb: Already exists&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;centos:latest: The image you are pulling has been verified. Important: image verification is a tech preview feature and should not be relied on to provide security.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Digest: sha256:d601d3b928eb2954653c59e65862aabb31edefa868bd5148a41fa45004c12288&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Status: Downloaded newer image for centos:latest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;查看源标签&#34;&gt;&lt;a href=&#34;#查看源标签&#34; class=&#34;headerlink&#34; title=&#34;查看源标签&#34;&gt;&lt;/a&gt;查看源标签&lt;/h4&gt;&lt;p&gt;Docker Hub 的 “Tags” 显示了可以获取的版本和相关联的镜像大小。镜像大小是镜像和累积的所有父镜像之和，也是当你执行 &lt;code&gt;docker save&lt;/code&gt; 时创建的 Tar 文件的大小。&lt;/p&gt;
&lt;h4 id=&#34;创建新仓库&#34;&gt;&lt;a href=&#34;#创建新仓库&#34; class=&#34;headerlink&#34; title=&#34;创建新仓库&#34;&gt;&lt;/a&gt;创建新仓库&lt;/h4&gt;&lt;p&gt;有 xxxx 的命名规则，文档都有不再赘述，创建完成后就可以使用 &lt;code&gt;docker push&lt;/code&gt; 来上传镜像。&lt;/p&gt;
&lt;h4 id=&#34;上传镜像&#34;&gt;&lt;a href=&#34;#上传镜像&#34; class=&#34;headerlink&#34; title=&#34;上传镜像&#34;&gt;&lt;/a&gt;上传镜像&lt;/h4&gt;&lt;p&gt;在往 Docker Hub 上传镜像之前，你需要使用 Docker Hub 的用户名和仓库名来命名本地镜像。你可以通过使用特殊的 &lt;code&gt;:&amp;lt;tag&amp;gt;&lt;/code&gt; 标签来往一个仓库添加多个镜像。如果不指明，则默认为 &lt;code&gt;latest&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;可以使用 &lt;code&gt;docker build -t &amp;lt;hub-user&amp;gt;/&amp;lt;repo-name&amp;gt;[:&amp;lt;tag&amp;gt;]&lt;/code&gt; 在构建镜像时命名，使用 &lt;code&gt;docker tag &amp;lt;existing-image&amp;gt; &amp;lt;hub-user&amp;gt;/&amp;lt;repo-name&amp;gt;[:&amp;lt;tag&amp;gt;]&lt;/code&gt; 重命名已经存在的本地镜像，或使用 &lt;code&gt;docker commit &amp;lt;exiting-container&amp;gt; &amp;lt;hub-user&amp;gt;/&amp;lt;repo-name&amp;gt;[:&amp;lt;tag&amp;gt;]&lt;/code&gt; 来提交更改。&lt;/p&gt;
&lt;p&gt;然后就可以上传镜像。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker push &amp;lt;hub-user&amp;gt;/&amp;lt;repo-name&amp;gt;:&amp;lt;tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;省略其余&#34;&gt;&lt;a href=&#34;#省略其余&#34; class=&#34;headerlink&#34; title=&#34;省略其余&#34;&gt;&lt;/a&gt;省略其余&lt;/h4&gt;&lt;p&gt;省略其余还未了解及用到的部分，请自行查阅文档。&lt;/p&gt;
&lt;h3 id=&#34;自动构建&#34;&gt;&lt;a href=&#34;#自动构建&#34; class=&#34;headerlink&#34; title=&#34;自动构建&#34;&gt;&lt;/a&gt;自动构建&lt;/h3&gt;&lt;p&gt;有其优点，当然也有其缺点，大体上就是通过链接到 GitHub 或是 Bitbucket 然后再使用。虽然使用过这两个 git 的管理工具，但是初入 Docker 暂不打算先了解自动构建，后期有精力或有需求再看。&lt;/p&gt;
&lt;h3 id=&#34;继续省略其余&#34;&gt;&lt;a href=&#34;#继续省略其余&#34; class=&#34;headerlink&#34; title=&#34;继续省略其余&#34;&gt;&lt;/a&gt;继续省略其余&lt;/h3&gt;&lt;p&gt;个人认为的入门级应用就这些，其余的不再赘述，有需要的可以自行查看官方文档。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/03/06/proxy-with-wget/</guid>
            <title>wget 使用代理</title>
            <link>https://blog.timerever.tk/2017/03/06/proxy-with-wget/</link>
            <category>Linux</category>
            <category>wget</category>
            <pubDate>Mon, 06 Mar 2017 10:47:10 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;code&gt;wget&lt;/code&gt; 是 Linux 下常用的一个命令行下载工具。由于此次需要下载的文件在国外，所以速度缓慢，然后就想到使用代理进行下载。使用 &lt;code&gt;--help&lt;/code&gt; 查询了一番，发现并没有可以设置代理的地方，倒是有不走代理的选项，汗。&lt;/p&gt;
&lt;p&gt;因为是在终端使用，所以并不想使用全局代理，上网搜寻了一下关于 &lt;code&gt;wget&lt;/code&gt; 使用代理的使用方法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;修改 .wgetrc 文件&lt;/p&gt;
&lt;p&gt; .wgetrc 文件位于 $HOME 目录下，修改添加代理设置。&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ vi .wgetrc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;use_proxy=on&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;http_proxy=http://ip:port&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;p&gt;设置环境变量&lt;/p&gt;
&lt;p&gt; 通过环境变量使终端使用代理。&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ export http_proxy=&amp;quot;ip:port&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;wget&lt;/code&gt; 的 &lt;code&gt;-e&lt;/code&gt; 选项&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ wget --help&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;GNU Wget 1.15, a non-interactive network retriever.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Usage: wget [OPTION]... [URL]...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Mandatory arguments to long options are mandatory for short options too.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Startup:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -V,  --version           display the version of Wget and exit.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -h,  --help              print this help.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -b,  --background        go to background after startup.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -e,  --execute=COMMAND   execute a `.wgetrc&amp;#x27;-style command.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 由此可见 &lt;code&gt;wget&lt;/code&gt; 的 &lt;code&gt;-e&lt;/code&gt; 选项同方法二使用了 http_proxy。&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ wget -e &amp;quot;http_proxy=http://ip:port&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于想使用非全局代理，所以方法三适用。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/03/06/docker-learning-trip-3/</guid>
            <title>Docker 学习之旅（三）：创建基础镜像</title>
            <link>https://blog.timerever.tk/2017/03/06/docker-learning-trip-3/</link>
            <category>Docker</category>
            <pubDate>Mon, 06 Mar 2017 02:37:56 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;基础镜像，官方说法是 &lt;strong&gt;base image&lt;/strong&gt;，官方解释为“ &lt;strong&gt;An image that has no parent is a base image.&lt;/strong&gt; ”也就是说，没有父镜像的镜像就是基础镜像，我们要做的就是创建一个基础镜像。&lt;/p&gt;
&lt;p&gt;文档链接：&lt;a href=&#34;https://docs.docker.com/engine/userguide/eng-image/baseimages/&#34;&gt;https://docs.docker.com/engine/userguide/eng-image/baseimages/&lt;/a&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h3 id=&#34;使用-tar-创建一个完整镜像&#34;&gt;&lt;a href=&#34;#使用-tar-创建一个完整镜像&#34; class=&#34;headerlink&#34; title=&#34;使用 tar 创建一个完整镜像&#34;&gt;&lt;/a&gt;使用 &lt;code&gt;tar&lt;/code&gt; 创建一个完整镜像&lt;/h3&gt;&lt;p&gt;执行 &lt;code&gt;$ docker run raring cat /etc/lsb-release&lt;/code&gt; 命令时报错且解决无果，可能 Debian 的发行版和 Ubuntu还是存在些许差异。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ docker run raring cat /etc/lsb-release&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;container_linux.go:247: starting container process caused &amp;quot;exec: \&amp;quot;cat\&amp;quot;: executable file not found in $PATH&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker: Error response from daemon: oci runtime error: container_linux.go:247: starting container process caused &amp;quot;exec: \&amp;quot;cat\&amp;quot;: executable file not found in $PATH&amp;quot;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ERRO[0000] error getting events from daemon: net/http: request canceled&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;使用-scratch-创建一个简单的基础镜像&#34;&gt;&lt;a href=&#34;#使用-scratch-创建一个简单的基础镜像&#34; class=&#34;headerlink&#34; title=&#34;使用 scratch 创建一个简单的基础镜像&#34;&gt;&lt;/a&gt;使用 scratch 创建一个简单的基础镜像&lt;/h3&gt;&lt;p&gt;当 &lt;code&gt;scratch&lt;/code&gt; 在 Docker 的库中出现时，你不能 pull、run 或者在其他镜像标记这个名字，但是你可以在你的 &lt;code&gt;Dockerfile&lt;/code&gt; 文件中引用它。&lt;/p&gt;
&lt;p&gt;例如，使用 &lt;code&gt;scratch&lt;/code&gt; 创建一个最小化的容器：&lt;/p&gt;
&lt;figure class=&#34;highlight dockerfile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; scratch&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;ADD&lt;/span&gt;&lt;span class=&#34;bash&#34;&gt; hello /&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;CMD&lt;/span&gt;&lt;span class=&#34;bash&#34;&gt; [&lt;span class=&#34;string&#34;&gt;&amp;quot;/hello&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后你可以在当前目录使用 &lt;code&gt;docker build --tag hello .&lt;/code&gt; 来构建容器。在这里需要 hello 文件，你可以从 Docker Github 的 &lt;a href=&#34;https://github.com/docker-library/hello-world/blob/master/hello.c&#34;&gt;示例源代码&lt;/a&gt; 中下载并编译，过程如下。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ vi Dockerfile&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ wget https://raw.githubusercontent.com/docker-library/hello-world/master/hello.c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ gcc -o hello -static -nostartfiles hello.c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ docker build --tag hello .&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ docker run hello&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Hello from Docker!&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;This message shows that your installation appears to be working correctly.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;To generate this message, Docker took the following steps:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 1. The Docker client contacted the Docker daemon.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 2. The Docker daemon pulled the &lt;span class=&#34;string&#34;&gt;&amp;quot;hello-world&amp;quot;&lt;/span&gt; image from the Docker Hub.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 3. The Docker daemon created a new container from that image &lt;span class=&#34;built_in&#34;&gt;which&lt;/span&gt; runs the&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    executable that produces the output you are currently reading.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 4. The Docker daemon streamed that output to the Docker client, &lt;span class=&#34;built_in&#34;&gt;which&lt;/span&gt; sent it&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    to your terminal.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;To try something more ambitious, you can run an Ubuntu container with:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; $ docker run -it ubuntu bash&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Share images, automate workflows, and more with a free Docker ID:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; https://cloud.docker.com/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;For more examples and ideas, visit:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; https://docs.docker.com/engine/userguide/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/03/05/docker-learning-trip-2/</guid>
            <title>Docker 学习之旅（二）：Dockerfile 命令</title>
            <link>https://blog.timerever.tk/2017/03/05/docker-learning-trip-2/</link>
            <category>Docker</category>
            <category>Dockerfile</category>
            <pubDate>Sun, 05 Mar 2017 12:37:20 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;本篇是对 &lt;code&gt;Dockerfile&lt;/code&gt; 文件的一个介绍，在了解完相关知识后，可以用 &lt;code&gt;Dockerfile&lt;/code&gt; 文件创建一个简单的镜像。&lt;/p&gt;
&lt;h3 id=&#34;参考和推荐&#34;&gt;&lt;a href=&#34;#参考和推荐&#34; class=&#34;headerlink&#34; title=&#34;参考和推荐&#34;&gt;&lt;/a&gt;参考和推荐&lt;/h3&gt;&lt;p&gt;文档链接：&lt;a href=&#34;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#general-guidelines-and-recommendations&#34;&gt;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#general-guidelines-and-recommendations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;更详细的 &lt;code&gt;Dockerfile&lt;/code&gt; 参考链接：&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/&#34;&gt;https://docs.docker.com/engine/reference/builder/&lt;/a&gt;，同样适用于下文。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器的生命应该是短暂的&lt;/li&gt;
&lt;li&gt;可以使用 &lt;code&gt;.dockerignore&lt;/code&gt; 文件来排除文件&lt;/li&gt;
&lt;li&gt;避免安装不需要的包&lt;/li&gt;
&lt;li&gt;每个容器都应该只有一个关注点&lt;/li&gt;
&lt;li&gt;最小化层的数量&lt;/li&gt;
&lt;li&gt;整理多行参数&lt;/li&gt;
&lt;li&gt;Build 缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;都是一些阅读理解的内容，详细见官方文档。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h3 id=&#34;Dockerfile-指南&#34;&gt;&lt;a href=&#34;#Dockerfile-指南&#34; class=&#34;headerlink&#34; title=&#34;Dockerfile 指南&#34;&gt;&lt;/a&gt;Dockerfile 指南&lt;/h3&gt;&lt;p&gt;文档链接：&lt;a href=&#34;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#the-dockerfile-instructions&#34;&gt;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#the-dockerfile-instructions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;仅列出各命令简单用法，详细请参照上文列出的官方详细文档。&lt;/p&gt;
&lt;h4 id=&#34;FROM&#34;&gt;&lt;a href=&#34;#FROM&#34; class=&#34;headerlink&#34; title=&#34;FROM&#34;&gt;&lt;/a&gt;FROM&lt;/h4&gt;&lt;p&gt;你可以在现有镜像的基础上构建自己的镜像。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM &amp;lt;image&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM &amp;lt;image&amp;gt;:&amp;lt;tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM &amp;lt;image&amp;gt;@&amp;lt;digest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;LABEL&#34;&gt;&lt;a href=&#34;#LABEL&#34; class=&#34;headerlink&#34; title=&#34;LABEL&#34;&gt;&lt;/a&gt;LABEL&lt;/h4&gt;&lt;p&gt;&lt;code&gt;LABEL&lt;/code&gt; 命令用来给镜像添加元数据，可以更好地管理镜像等。&lt;/p&gt;
&lt;p&gt;用法：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;LABEL &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可在一个命令中使用多个键值对，也可只使用一个。若镜像是以其他镜像 &lt;code&gt;FROM&lt;/code&gt; 为基础的，相同的标签将会覆盖原有标签。&lt;/p&gt;
&lt;h4 id=&#34;RUN&#34;&gt;&lt;a href=&#34;#RUN&#34; class=&#34;headerlink&#34; title=&#34;RUN&#34;&gt;&lt;/a&gt;RUN&lt;/h4&gt;&lt;p&gt;RUN指令将在当前映像之上的新层中执行任何命令，并提交执行结果，这个提交的的执行后的镜像将被 &lt;code&gt;Dockerfile&lt;/code&gt; 的其余步骤使用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RUN&lt;/code&gt; 指令有两种形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RUN &amp;lt;command&amp;gt;&lt;/code&gt;（shell 形式，命令在 shell 中运行，对于 Linux 默认为 &amp;#x2F;bin&amp;#x2F;sh -c，而对于 Windows 默认为 cmd &amp;#x2F;S &amp;#x2F;C）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RUN [&amp;quot;executable&amp;quot;, &amp;quot;param1&amp;quot;, &amp;quot;param2&amp;quot;]&lt;/code&gt;（执行形式）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;APT-GET&#34;&gt;&lt;a href=&#34;#APT-GET&#34; class=&#34;headerlink&#34; title=&#34;APT-GET&#34;&gt;&lt;/a&gt;APT-GET&lt;/h4&gt;&lt;p&gt;这可能是 &lt;code&gt;RUN&lt;/code&gt; 命令的最多使用情况，但是你应该避免使用 &lt;code&gt;RUN apt-get upgrade&lt;/code&gt; 或是 &lt;code&gt;dist-upgrade&lt;/code&gt;，因为许多“必要”的包将不会在无特权的容器内部被升级。如果一个镜像所包含的基础镜像过期，请联系管理员。&lt;/p&gt;
&lt;p&gt;记得将 &lt;code&gt;RUN apt-get update&lt;/code&gt; 命令与 &lt;code&gt;apt-get install&lt;/code&gt; 命令放在同一个 &lt;code&gt;RUN&lt;/code&gt; 声明中，例如：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    package-bar \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    package-baz \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    package-foo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在一个单独的 &lt;code&gt;RUN&lt;/code&gt; 声明中使用 &lt;code&gt;apt-get update&lt;/code&gt; 将会导致缓存问题和之后的 &lt;code&gt;apt-get install&lt;/code&gt; 命令失败。&lt;/p&gt;
&lt;h4 id=&#34;使用管道&#34;&gt;&lt;a href=&#34;#使用管道&#34; class=&#34;headerlink&#34; title=&#34;使用管道&#34;&gt;&lt;/a&gt;使用管道&lt;/h4&gt;&lt;p&gt;有一些 &lt;code&gt;RUN&lt;/code&gt; 命令使用和 Linux 中同样的管道来将一个命令的输入导入到另一个命令当中，符号同样为 &lt;code&gt;|&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;CMD&#34;&gt;&lt;a href=&#34;#CMD&#34; class=&#34;headerlink&#34; title=&#34;CMD&#34;&gt;&lt;/a&gt;CMD&lt;/h4&gt;&lt;p&gt;&lt;code&gt;CMD&lt;/code&gt; 命令的主要作用是给可执行容器提供默认的参数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CMD&lt;/code&gt; 命令有三种形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CMD [&amp;quot;executable&amp;quot;,&amp;quot;param1&amp;quot;,&amp;quot;param2&amp;quot;]&lt;/code&gt;（执行形式，最推荐的形式）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMD [&amp;quot;param1&amp;quot;,&amp;quot;param2&amp;quot;]&lt;/code&gt;（入口点的默认参数）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMD command param1 param2&lt;/code&gt;（shell 形式）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在一个 &lt;code&gt;Dockerfile&lt;/code&gt; 文件中，只能有一个 &lt;code&gt;CMD&lt;/code&gt; 指令，如果你列出超过一个的 &lt;code&gt;CMD&lt;/code&gt; 指令，只有最后一条会起作用。&lt;/p&gt;
&lt;h4 id=&#34;EXPOSE&#34;&gt;&lt;a href=&#34;#EXPOSE&#34; class=&#34;headerlink&#34; title=&#34;EXPOSE&#34;&gt;&lt;/a&gt;EXPOSE&lt;/h4&gt;&lt;p&gt;&lt;code&gt;EXPOSE&lt;/code&gt; 命令用于开放容器的内部端口，支持环境变量（例如，&lt;code&gt;MYSQL_PORT_3306_TCP&lt;/code&gt;）。但是&lt;code&gt;EXPOSE&lt;/code&gt; 命令并不能使内部端口对宿主可见，你必须使用 &lt;code&gt;-p&lt;/code&gt; 命令来开放特定端口或是使用 &lt;code&gt;-P&lt;/code&gt; 命令来开放所有的 &lt;code&gt;EXPOSE&lt;/code&gt; 的端口。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;EXPOSE &amp;lt;port&amp;gt; [&amp;lt;port&amp;gt;...]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ENV&#34;&gt;&lt;a href=&#34;#ENV&#34; class=&#34;headerlink&#34; title=&#34;ENV&#34;&gt;&lt;/a&gt;ENV&lt;/h4&gt;&lt;p&gt;&lt;code&gt;ENV&lt;/code&gt; 命令用来更新 &lt;code&gt;PATH&lt;/code&gt; 环境变量。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ENV &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;
ENV &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这是&lt;code&gt;ENV&lt;/code&gt; 命令的两种使用形式，推荐使用第二种形式。&lt;/p&gt;
&lt;h4 id=&#34;ADD-or-COPY&#34;&gt;&lt;a href=&#34;#ADD-or-COPY&#34; class=&#34;headerlink&#34; title=&#34;ADD or COPY&#34;&gt;&lt;/a&gt;ADD or COPY&lt;/h4&gt;&lt;p&gt;&lt;code&gt;ADD&lt;/code&gt; 和 &lt;code&gt;COPY&lt;/code&gt; 命令拥有相似的功能，通常而言，&lt;code&gt;COPY&lt;/code&gt; 因其更加透明而被推荐。但是 &lt;code&gt;COPY&lt;/code&gt; 只能拷贝本地文件而 &lt;code&gt;ADD&lt;/code&gt; 拥有更多的特性（比如本地 tar 提取和远程 URL 支持）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ADD/COPY &amp;lt;src&amp;gt;... &amp;lt;dest&amp;gt;
ADD/COPY [&amp;quot;&amp;lt;src&amp;gt;&amp;quot;,... &amp;quot;&amp;lt;dest&amp;gt;&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;省略众多详细介绍，详见文档。&lt;/p&gt;
&lt;h4 id=&#34;ENTRYPOINT&#34;&gt;&lt;a href=&#34;#ENTRYPOINT&#34; class=&#34;headerlink&#34; title=&#34;ENTRYPOINT&#34;&gt;&lt;/a&gt;ENTRYPOINT&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;ENTRYPOINT [&amp;quot;executable&amp;quot;, &amp;quot;param1&amp;quot;, &amp;quot;param2&amp;quot;]（执行形式，推荐）
ENTRYPOINT command param1 param2（shell 形式）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ENTRYPOINT&lt;/code&gt; 命令允许你配置容器使其变成可执行容器。&lt;/p&gt;
&lt;h4 id=&#34;USER&#34;&gt;&lt;a href=&#34;#USER&#34; class=&#34;headerlink&#34; title=&#34;USER&#34;&gt;&lt;/a&gt;USER&lt;/h4&gt;&lt;p&gt;&lt;code&gt;USER&lt;/code&gt; 可以使容器改变运行用户，通过在 &lt;code&gt;Dockerfile&lt;/code&gt; 文件中使用类似 &lt;code&gt;RUN groupadd -r postgres &amp;amp;&amp;amp; useradd -r -g postgres postgres&lt;/code&gt; 的命令来创建用户和组。&lt;/p&gt;
&lt;h4 id=&#34;WORKDIR&#34;&gt;&lt;a href=&#34;#WORKDIR&#34; class=&#34;headerlink&#34; title=&#34;WORKDIR&#34;&gt;&lt;/a&gt;WORKDIR&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;WORKDIR /path/to/workdir
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;WORKDIR&lt;/code&gt; 指令可以设置 &lt;code&gt;RUN&lt;/code&gt;、&lt;code&gt;CMD&lt;/code&gt;、&lt;code&gt;ENTRYPOINT&lt;/code&gt;、&lt;code&gt;COPY&lt;/code&gt; 和 &lt;code&gt;ADD&lt;/code&gt; 指令的工作目录。即使后续并不会使用到 &lt;code&gt;WORKDIR&lt;/code&gt; 指令，它仍然会被创建。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WORKDIR&lt;/code&gt; 指令可在一个 &lt;code&gt;Dockerfile&lt;/code&gt; 文件中使用多次。如果给定一个相对路径，那么它会相对于之前的 &lt;code&gt;WORKDIR&lt;/code&gt; 指令。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;WORKDIR /a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;WORKDIR b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;WORKDIR c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;RUN pwd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;pwd&lt;/code&gt; 的输出将为 &lt;code&gt;/a/b/c&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WORKDIR&lt;/code&gt; 指令也可解析在之前通过 &lt;code&gt;ENV&lt;/code&gt; 指令设置的环境变量。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ENV DIRPATH /path&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;WORKDIR $DIRPATH/$DIRNAME&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;RUN pwd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;pwd&lt;/code&gt; 的输出将为 &lt;code&gt;/path/$DIRNAME&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;ONBUILD&#34;&gt;&lt;a href=&#34;#ONBUILD&#34; class=&#34;headerlink&#34; title=&#34;ONBUILD&#34;&gt;&lt;/a&gt;ONBUILD&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;ONBUILD [INSTRUCTION]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ONBUILD&lt;/code&gt; 命令在当前 &lt;code&gt;Dockerfile&lt;/code&gt; 文件构建完成后执行，也就是该镜像最为其他镜像的父镜像时。它会在子镜像的 &lt;code&gt;Dockerfile&lt;/code&gt; 文件中的 &lt;code&gt;FROM&lt;/code&gt; 指令后立即被执行。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/03/03/docker-learning-trip-1/</guid>
            <title>Docker 学习之旅（一）：Docker 的安装</title>
            <link>https://blog.timerever.tk/2017/03/03/docker-learning-trip-1/</link>
            <category>Docker</category>
            <pubDate>Fri, 03 Mar 2017 02:50:38 +0000</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;所以之前弄得都差不多算是白弄了，一切还需要从头开始。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于使用的环境为 Ubuntu 的 16.10 最新稳定版本，所以打开 Ubuntu 的文档进行安装，以下命令全部来源于官方文档。&lt;/p&gt;
&lt;p&gt;为了防止惨剧的再次发生，记录下此时的版本，页面右上角显示为 Docker 17.03。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h3 id=&#34;卸载旧版本&#34;&gt;&lt;a href=&#34;#卸载旧版本&#34; class=&#34;headerlink&#34; title=&#34;卸载旧版本&#34;&gt;&lt;/a&gt;卸载旧版本&lt;/h3&gt;&lt;p&gt;文档链接：&lt;a href=&#34;https://docs.docker.com/engine/installation/linux/ubuntu/#uninstall-old-versions&#34;&gt;https://docs.docker.com/engine/installation/linux/ubuntu/#uninstall-old-versions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;因为安装了旧版本的 Docker，所以需要先卸载老版本，当然没有安装过就不需要进行这一步了。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ sudo apt-get remove docker docker-engine&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;安装-Docker&#34;&gt;&lt;a href=&#34;#安装-Docker&#34; class=&#34;headerlink&#34; title=&#34;安装 Docker&#34;&gt;&lt;/a&gt;安装 Docker&lt;/h3&gt;&lt;p&gt;文档链接：&lt;a href=&#34;https://docs.docker.com/engine/installation/linux/ubuntu/#install-docker&#34;&gt;https://docs.docker.com/engine/installation/linux/ubuntu/#install-docker&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;因为 Docker 是有 Ubuntu 的源的，所以直接采用 apt 安装，方便快捷。&lt;/p&gt;
&lt;p&gt;之前忘记说了，此次更新 Docker 有了两个版本，分别是 Docker CE 和 Docker EE。从名字其实就可以大概猜出，一个是普通版（其实是社区版）一个是企业版。所以，当然是选择社区版，而且官方提到了社区版和企业版的安装是有所不同的，在此只记录社区版的安装。&lt;/p&gt;
&lt;h4 id=&#34;添加源&#34;&gt;&lt;a href=&#34;#添加源&#34; class=&#34;headerlink&#34; title=&#34;添加源&#34;&gt;&lt;/a&gt;添加源&lt;/h4&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ sudo apt-get install \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    apt-transport-https \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ca-certificates \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    curl \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    software-properties-common&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ sudo apt-key fingerprint 0EBFCD88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ sudo add-apt-repository \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;string&#34;&gt;&amp;quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;   &lt;span class=&#34;subst&#34;&gt;$(lsb_release -cs)&lt;/span&gt; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;   stable&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中 &lt;code&gt;sudo apt-key fingerprint 0EBFCD88&lt;/code&gt; 是用来验证源的 key 信息是否匹配，正确的信息应该为 &lt;code&gt;9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这边使用的是 &lt;code&gt;stable&lt;/code&gt; 版本，若要使用更新更快的 &lt;code&gt;edge&lt;/code&gt; 版本，只需在最后一行的 &lt;code&gt;stable&lt;/code&gt; 后面添加 &lt;code&gt;edge&lt;/code&gt; 即可。对于这两个版本，官方解释如下。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Docker CE gives you the option to run stable or edge builds.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;* Stable builds are released once per quarter.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;* Edge builds are released once per month.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;安装-Docker-1&#34;&gt;&lt;a href=&#34;#安装-Docker-1&#34; class=&#34;headerlink&#34; title=&#34;安装 Docker&#34;&gt;&lt;/a&gt;安装 Docker&lt;/h4&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ sudo apt-get update&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ sudo apt-get install docker-ce&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这样默认安装的总是最新版本的 Docker ，如果你想安装特定版本的 Docker ，可以使用 &lt;code&gt;sudo apt-get install docker-ce=&amp;lt;VERSION&amp;gt;&lt;/code&gt; ，使用 &lt;code&gt;apt-cache madison docker-ce&lt;/code&gt; 来显示可以安装的 Docker 版本。&lt;/p&gt;
&lt;p&gt;可以通过运行 &lt;code&gt;hello-world&lt;/code&gt; 镜像来确认已将 Docker CE 正确安装。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ sudo docker run hello-world&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;更新-Docker&#34;&gt;&lt;a href=&#34;#更新-Docker&#34; class=&#34;headerlink&#34; title=&#34;更新 Docker&#34;&gt;&lt;/a&gt;更新 Docker&lt;/h4&gt;&lt;p&gt;首先运行 &lt;code&gt;sudo apt-get update&lt;/code&gt;，然后根据安装指南选择想要安装的新版本。&lt;/p&gt;
&lt;h3 id=&#34;Linux-下的可选安装步骤&#34;&gt;&lt;a href=&#34;#Linux-下的可选安装步骤&#34; class=&#34;headerlink&#34; title=&#34;Linux 下的可选安装步骤&#34;&gt;&lt;/a&gt;Linux 下的可选安装步骤&lt;/h3&gt;&lt;p&gt;文档链接：&lt;a href=&#34;https://docs.docker.com/engine/installation/linux/linux-postinstall/&#34;&gt;https://docs.docker.com/engine/installation/linux/linux-postinstall/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;此处只列出个人所使用的可选安装。&lt;/p&gt;
&lt;h4 id=&#34;使用非-root-用户管理-Docker&#34;&gt;&lt;a href=&#34;#使用非-root-用户管理-Docker&#34; class=&#34;headerlink&#34; title=&#34;使用非 root 用户管理 Docker&#34;&gt;&lt;/a&gt;使用非 root 用户管理 Docker&lt;/h4&gt;&lt;p&gt;通过文档我们得知 &lt;code&gt;docker&lt;/code&gt; 的守护进程绑定的是 Unix socket，默认情况下该 Unix socket 是属于 root 用户，其他用户只能通过 &lt;code&gt;sudo&lt;/code&gt; 进行访问，而 &lt;code&gt;docker&lt;/code&gt; 的守护进程一直是由 root 用户运行的。所以如果想不使用 &lt;code&gt;sudo&lt;/code&gt; 来使用 Docker，可以把用户添加到 &lt;code&gt;docker&lt;/code&gt; 用户组。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ sudo groupadd docker # 此处已经存在docker组可不执行操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ sudo usermod -aG docker $USER&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;注销重新登入系统来使用户组更新。&lt;/p&gt;
&lt;p&gt;通过不加 &lt;code&gt;sudo&lt;/code&gt; 命令的 &lt;code&gt;docker&lt;/code&gt; 命令来验证。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ docker run hello-world&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;使-Docker-开机自启&#34;&gt;&lt;a href=&#34;#使-Docker-开机自启&#34; class=&#34;headerlink&#34; title=&#34;使 Docker 开机自启&#34;&gt;&lt;/a&gt;使 Docker 开机自启&lt;/h4&gt;&lt;p&gt;对于大多数的发行版本（RHEL, CentOS, Fedora, Ubuntu 16.04 and higher）使用 &lt;code&gt;systemd&lt;/code&gt; 来管理开机自启动的服务，Ubuntu 14.10 及以下版本使用 &lt;code&gt;upstart&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;systemd&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ sudo systemctl enable docker # 开启自启动&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ sudo systemctl disable docker # 关闭自启动&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;upstart&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker 自动使用 &lt;code&gt;upstart&lt;/code&gt; 配置自启动，通过以下命令来禁用。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ echo manual | sudo tee /etc/init/docker.override&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;chkconfig&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ sudo chkconfig docker on&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;设置-HTTP-代理&#34;&gt;&lt;a href=&#34;#设置-HTTP-代理&#34; class=&#34;headerlink&#34; title=&#34;设置 HTTP 代理&#34;&gt;&lt;/a&gt;设置 HTTP 代理&lt;/h4&gt;&lt;p&gt;因为 Docker 的服务器在国外，所以直连的速度很慢，就需要用国内的镜像或者使用 HTTP 代理，这里选择的是使用 HTTP 代理。该文档不在上面的可选安装步骤里，在后面的 Admin Guide 里面，链接：&lt;a href=&#34;https://docs.docker.com/engine/admin/systemd/#http-proxy&#34;&gt;https://docs.docker.com/engine/admin/systemd/#http-proxy&lt;/a&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ mkdir -p /etc/systemd/system/docker.service.d&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ vi /etc/systemd/system/docker.service.d/http-proxy.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;添加下列内容，按实际情况修改。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[Service]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Environment=&amp;quot;HTTP_PROXY=http://proxy.example.com:80/&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;或者使用以下内容设置不通过代理的地址。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Environment=&amp;quot;HTTP_PROXY=http://proxy.example.com:80/&amp;quot; &amp;quot;NO_PROXY=localhost,127.0.0.1,docker-registry.somecorporation.com&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后继续操作完成配置。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ sudo systemctl daemon-reload&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ systemctl show --property=Environment docker # 验证配置是否已经重载，将显示上面配置的信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ sudo systemctl restart docker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/03/02/docker-learning-trip-0/</guid>
            <title>Docker 学习之旅（零）：出师不利</title>
            <link>https://blog.timerever.tk/2017/03/02/docker-learning-trip-0/</link>
            <category>Docker</category>
            <pubDate>Thu, 02 Mar 2017 13:51:49 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;Docker——这是一个自出现以来就发展迅猛并获得成功的引擎。自从选择这个方向学习以来，一直在各个地方看到这个名词，但也只是大概了解到这是一个一般企业才会采用的东西。&lt;/p&gt;
&lt;p&gt;寒假放假前的课程设计，邀请了企业的人拿来了企业的真实项目来让我们学习，有幸在课余时间与主管技术的老师咨询讨论了一下。其中有一个话题就说到了 Docker，也是符合之前自己所想，老师也是说，像我们平时自己用，拿自己电脑跑或者租个 vps 什么的也就够了，也是用不上这种东西，不过从交谈中也大概了解到了应用 Docker 的优势，比如统一测试环境，比如秒级启动随时恢复等等等等。&lt;/p&gt;
&lt;p&gt;秉承着热爱计算机相关的一切的原则，还是决定先大概看一下这个东西，虽然可能实用性真的接近于零，不过就像自己选择这个专业一样，不是出于为了找工作或者怎样怎样的功利的心态，而是所谓的，真的是“热爱学习”。&lt;/p&gt;
&lt;p&gt;所以作为一只准程序猿，那么要做的第一件事便是打开官网寻找官方文档（所谓程序员必会通用技能），然后就是阅读英文文档（另一项必会技能）。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h3 id=&#34;安装&#34;&gt;&lt;a href=&#34;#安装&#34; class=&#34;headerlink&#34; title=&#34;安装&#34;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;使用的环境是 Ubuntu 的 16.10，默认的源里有 Docker，只需按照官网手册就可轻松安装。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ sudo apt-get install \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    apt-transport-https \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ca-certificates \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    curl \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    software-properties-common&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ sudo apt-key fingerprint 0EBFCD88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ sudo add-apt-repository \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;string&#34;&gt;&amp;quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;   &lt;span class=&#34;subst&#34;&gt;$(lsb_release -cs)&lt;/span&gt; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;   stable&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;等等，怎么有些不对，记得以前看到的源的指纹长度比这还要长……&lt;/p&gt;
&lt;p&gt;还以为是找错了文档，结果打开历史记录一看原来真的是文档改变了，最显而易见的就是网站的 favicon 颜色变深了，也确定了文档就是在今天中午或下午更新了（明明早上起来还看过的，摔！）。&lt;/p&gt;
&lt;p&gt;所以看来是写不成第一篇了，之前被称作 docker 和 docker-engine 的东西已经成为了旧版，现在出现的是 Docker CE 和 Docker EE，文档的开始已经让卸载旧版了。不过可能是因为刚刚更新，Docker CE 和 Docker EE 所指向的链接还不能打开，看来真正的旅程应该是等着文档补全然后再开始了（虽然知道“学习之旅”的翻译是中式英语但是真的找不到合适的翻译了）。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/03/01/merge-multiple-vmdk&#39;s-into-single-vmdk/</guid>
            <title>合并多个 vmdk 文件</title>
            <link>https://blog.timerever.tk/2017/03/01/merge-multiple-vmdk&#39;s-into-single-vmdk/</link>
            <category>VMware</category>
            <category>vmdk</category>
            <pubDate>Wed, 01 Mar 2017 04:07:10 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;这是一个上古时代的虚拟机，自从换电脑以来就一直跟随我。虽然当初磁盘选择了单文件存储，然而由于众多快照的原因，又是好多 vmdk 的虚拟磁盘文件躺在硬盘中。因为好多快照都是之前已经被删除了，索性整理了一下虚拟机，并且将多个虚拟磁盘文件合并。&lt;/p&gt;
&lt;p&gt;上网寻找了一下解决方案，发现在一个大概是和虚拟化相关的、猜测是 wordpress 官方博客（猜测原因是因为该博客用的是 wordpress.com 的二级域名）的文章中找到了答案。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://vmexpo.wordpress.com/2014/04/15/how-to-merge-multiple-vmdks-into-single-vmdk/comment-page-1/&#34;&gt;https://vmexpo.wordpress.com/2014/04/15/how-to-merge-multiple-vmdks-into-single-vmdk/comment-page-1/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用的是一个名为 vmware-vdiskmanager 的命令行工具，这个工具可以在 VMware Fusion 或是 VMware Workstation 中找到，所以如果使用的是 VMware Player，那么可以到 VMware 的网站（KB Article 1023856）下载然后放到 VMware Player 的安装路径下。&lt;/p&gt;
&lt;p&gt;接下来使用下面命令即可完成操作。&lt;/p&gt;
&lt;figure class=&#34;highlight dos&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;vmware-vdiskmanager.exe -r &amp;quot;待转换vmdk路径&amp;quot; -t &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;quot;新生成的vmdk文件路径&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;记得转换完成后，删除或处理掉原来的文件，将新生成的文件名改为原文件名，亦或可以删除虚拟机配置中的原有硬盘并新添转换后的硬盘。&lt;/p&gt;
&lt;p&gt;命令操作截图如下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/conversion-by-cmd.png&#34; alt=&#34;Alt 操作截图&#34; title=&#34;操作截图&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Virtual disk conversion successful.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;操作成功完成。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/02/27/frequently-used-commands-while-flashing-android/</guid>
            <title>刷 CM 过程中对使用的常用刷机命令的记录</title>
            <link>https://blog.timerever.tk/2017/02/27/frequently-used-commands-while-flashing-android/</link>
            <category>Android</category>
            <category>Huawei</category>
            <category>CyanogenMod</category>
            <pubDate>Mon, 27 Feb 2017 10:01:17 +0000</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;终于决定把手里这台荣耀6 刷成 CM，无奈华为只开源 4.4.4 的内核代码，只有 CM 11 的非官方包，哭。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;寻着 XDA 上开发者给的步骤给走，给了两个 rec 一个无法挂载内置储存卡然后没外置的选项（不过也是因为这个才有了本文），一个有问题直接手机进了救援模式，也是汗颜，索性自己手里有 rec 成功解决了。&lt;/p&gt;
&lt;p&gt;文中说把刷机包放到外置内存卡目录下，然后进入 rec 傻眼了并没有找到从外置内存卡安装刷机包的选项，于是无奈自己尝试用 adb 传送刷机包。&lt;/p&gt;
&lt;p&gt;至于为什么以前不怎么用 adb，主要是由于华为这机子很难从关机状态进入 fastboot，官方让插着 USB 线关机进入但是成功率不高，所以以前都是用论坛正好给出的脚本从开机状态进入，正好熟悉下 adb 记录于此。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h3 id=&#34;adb-命令&#34;&gt;&lt;a href=&#34;#adb-命令&#34; class=&#34;headerlink&#34; title=&#34;adb 命令&#34;&gt;&lt;/a&gt;adb 命令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/studio/command-line/adb.html&#34;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ adb devices &lt;span class=&#34;comment&#34;&gt;# 查询连接设备&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ adb install &amp;lt;apkfile&amp;gt; &lt;span class=&#34;comment&#34;&gt;# 安装apk文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ adb uninstall &amp;lt;package&amp;gt; &lt;span class=&#34;comment&#34;&gt;# 卸载软件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ adb push foo.txt /sdcard/foo.txt &lt;span class=&#34;comment&#34;&gt;#发送foo.txt文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ adb pull /sdcard/foo.txt foo.txt &lt;span class=&#34;comment&#34;&gt;#传送foo.txt文件到本地&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ adb reboot &lt;span class=&#34;comment&#34;&gt;# 重启&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ adb reboot recovery &lt;span class=&#34;comment&#34;&gt;# 重启到recovery&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ adb reboot bootloader &lt;span class=&#34;comment&#34;&gt;# 重启到fastboot&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;fastboot-命令&#34;&gt;&lt;a href=&#34;#fastboot-命令&#34; class=&#34;headerlink&#34; title=&#34;fastboot 命令&#34;&gt;&lt;/a&gt;fastboot 命令&lt;/h3&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ fastboot flash boot boot.img &lt;span class=&#34;comment&#34;&gt;# 刷入boot&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ fastboot flash recovery recovery.img &lt;span class=&#34;comment&#34;&gt;# 同上，刷入recovery&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ fastboot reboot &lt;span class=&#34;comment&#34;&gt;# 重启&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/01/26/unused-jekyll-on-ubuntu/</guid>
            <title>记录未使用的 Jekyll 环境搭建</title>
            <link>https://blog.timerever.tk/2017/01/26/unused-jekyll-on-ubuntu/</link>
            <category>Linux</category>
            <category>Ubuntu</category>
            <category>Ruby</category>
            <category>Jekyll</category>
            <pubDate>Thu, 26 Jan 2017 03:37:45 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;自从win10出现了 Bash on Ubuntu，自己便喜欢上了它，&lt;del&gt;甚至抛弃了虚拟机&lt;/del&gt;（双系统还是存在的）。正好最近厌烦了 wp，毕竟太臃肿了，对于我这种没事闲的只会随便写写的没太大用处。&lt;/p&gt;
&lt;p&gt;然后就想起了自己沉睡已久的 github，不是因为 github 的免费且无限流量，主要是喜欢 github 上静态页面的简约，百度了下现在的方式，大多是 Jelly 来搭建的，不喜欢在 windows 上装各种软件的我就这么选择了 Bash on Ubuntu，这也是本文的来源。&lt;/p&gt;
&lt;h3 id=&#34;前期准备&#34;&gt;&lt;a href=&#34;#前期准备&#34; class=&#34;headerlink&#34; title=&#34;前期准备&#34;&gt;&lt;/a&gt;前期准备&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jekyll.com.cn/&#34;&gt;Jekyll 中文官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ruby-lang.org/&#34;&gt;Ruby官网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h3 id=&#34;环境搭建&#34;&gt;&lt;a href=&#34;#环境搭建&#34; class=&#34;headerlink&#34; title=&#34;环境搭建&#34;&gt;&lt;/a&gt;环境搭建&lt;/h3&gt;&lt;p&gt;由于 Ubuntu 的仓库里各软件还是很多的，所以首先选择了 apt 方式安装。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ sudo apt-get install ruby&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ gem install jekyll&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;结果出错，ruby 版本太低，输入 ruby -v 查询后是1.95的版本，需求是2点多版本。&lt;/p&gt;
&lt;h3 id=&#34;换用源码编译安装&#34;&gt;&lt;a href=&#34;#换用源码编译安装&#34; class=&#34;headerlink&#34; title=&#34;换用源码编译安装&#34;&gt;&lt;/a&gt;换用源码编译安装&lt;/h3&gt;&lt;p&gt;Linux 下安装软件，至少是我自己的通常思维是先用自带的包管理器安装，如果没有对应的软件包或者版本太低或有缺陷，通常会到官网选择编译安装。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先安装编译环境&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ sudo apt-get install build-essential cmake&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;然后下载源码编译安装&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ wget https://cache.ruby-lang.org/pub/ruby/2.4/ruby-2.4.0.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ tar -zxvf ruby-2.4.0.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ &lt;span class=&#34;built_in&#34;&gt;cd&lt;/span&gt; ruby-2.4.0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ ./configure&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ make&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ sudo make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在修改 gem 源时出现错误，使用的是国内的 https 源，提示 openssl 有问题。然而系统是安有 openssl 的，而且编译的时候并没有看到有关 openssl 的配置（也有可能是我没有仔细看）。提示可以使用 http 的方式添加源，不过略微强迫症，于是宣告源码编译安装失败。&lt;/p&gt;
&lt;h3 id=&#34;rvm-方式安装&#34;&gt;&lt;a href=&#34;#rvm-方式安装&#34; class=&#34;headerlink&#34; title=&#34;rvm 方式安装&#34;&gt;&lt;/a&gt;rvm 方式安装&lt;/h3&gt;&lt;p&gt;这也是在网上查到的第三种也是常见的最后一种安装方式，首先安装 rvm 然后用 rvm 安装 ruby。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ curl -L https://get.rvm.io | bash -s stable&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ &lt;span class=&#34;built_in&#34;&gt;source&lt;/span&gt; ~/.rvm/scripts/rvm&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ rvm requirements&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ rvm install ruby&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ gem install jekyll&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;成功安装，安装的 ruby 版本为2.3.3。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/01/25/my-first-article/</guid>
            <title>重新弄好后的第一篇文章</title>
            <link>https://blog.timerever.tk/2017/01/25/my-first-article/</link>
            <pubDate>Wed, 25 Jan 2017 07:30:11 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;经历了一番挫折，最后算是成功地把 blog 重新（也是从新）部署在了 github，对自己而言还算深夜的时候终于写下了这些东西。&lt;/p&gt;
&lt;p&gt;看来我以后要重视下 github 上的项目了，至少不能这么乱糟糟了。&lt;/p&gt;
&lt;p&gt;还有，要学习下makedown语法了。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
