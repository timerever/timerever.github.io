{
    "version": "https://jsonfeed.org/version/1",
    "title": "A Blog • All posts by \"k8s\" tag",
    "description": "Just another blog.",
    "home_page_url": "https://blog.timerever.tk",
    "items": [
        {
            "id": "https://blog.timerever.tk/2022/01/14/install-k3s-on-multi-node/",
            "url": "https://blog.timerever.tk/2022/01/14/install-k3s-on-multi-node/",
            "title": "K3s 多节点集群安装",
            "date_published": "2022-01-14T11:04:07.000Z",
            "content_html": "<p>K3s 是轻量级的 Kubernetes，精简了很多 K8s 组件，非常适合在性能较弱的机器上运行，支持 IoT 设备，支持 arm 架构，很适合在 vps 上轻量部署。正好手里有几台 vps，于是决定用 K3s 统一进行管理。</p>\n<p>官网：<a href=\"https://k3s.io/\">K3s 官网</a></p>\n<p>在官网下面有 Get Started 部分，列出了启动 server 和 agent 节点的简单命令，但是对我们而言还不够，所以参考官网文档进行安装配置。具体的安装文档可以参见：<a href=\"https://docs.rancher.cn/docs/k3s/installation/install-options/_index\">安装选项介绍</a>。</p>\n<span id=\"more\"></span>\n<h2 id=\"k3s-安装\"><a class=\"markdownIt-Anchor\" href=\"#k3s-安装\"></a> K3s 安装</h2>\n<h3 id=\"准备工作\"><a class=\"markdownIt-Anchor\" href=\"#准备工作\"></a> 准备工作</h3>\n<p>由于 K3s 默认运行环境为 containerd，所以为了使用 Docker 作为运行时，需要先在各节点正常安装 Docker，安装过程不再赘述。</p>\n<h3 id=\"安装-master-节点\"><a class=\"markdownIt-Anchor\" href=\"#安装-master-节点\"></a> 安装 master 节点</h3>\n<p>根据个人需求，按需设置 master 节点的安装参数。由于个人使用，不要多节点部署实现高可用，所以禁用 servicelb 组件。traefik 虽然是 K3s 自带的网络组件，但是其默认会占用 80 和 443 端口，所以也不打算使用。最后完整的安装参数为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sfL https://get.k3s.io | INSTALL_K3S_SKIP_SELINUX_RPM=true INSTALL_K3S_EXEC=&quot;--docker --disable servicelb --disable traefik --disable-cloud-controller&quot; sh -</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 或使用国内镜像</span></span><br><span class=\"line\">curl -sfL http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn INSTALL_K3S_SKIP_SELINUX_RPM=true INSTALL_K3S_EXEC=&quot;--docker --disable servicelb --disable traefik --disable-cloud-controller&quot; sh -</span><br></pre></td></tr></table></figure>\n<p>安装完成之后我们可以通过 <code>kubectl get node</code> 来看一下节点的情况：</p>\n<img src=\"/2022/01/14/install-k3s-on-multi-node/install-k3s-on-multi-node-1.png\" class=\"\" title=\"节点信息\">\n<h3 id=\"安装-agent-节点\"><a class=\"markdownIt-Anchor\" href=\"#安装-agent-节点\"></a> 安装 agent 节点</h3>\n<p>由于 agent 节点需要与 master 节点进行通信校验，在安装时需要指定 token，所以需要从 master 节点获取安装 token：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu-master:~# cat /var/lib/rancher/k3s/server/node-token</span><br><span class=\"line\">K10995e6e37eec07447411d8f8fcf025c3ed6f9a134e30e896ac4c2a7c4f8e6b587::server:f0af86641d91b09cc7707f25586b77e5</span><br></pre></td></tr></table></figure>\n<p>然后与 master 节点类似，指定 agent 节点的参数进行安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sfL https://get.k3s.io | K3S_URL=https://MASTER_URL:6443 K3S_TOKEN=NODE_TOKEN INSTALL_K3S_SKIP_SELINUX_RPM=true INSTALL_K3S_EXEC=&quot;--docker&quot; sh -</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 或使用国内镜像</span></span><br><span class=\"line\">curl -sfL http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn K3S_URL=https://MASTER_URL:6443 K3S_TOKEN=NODE_TOKEN INSTALL_K3S_SKIP_SELINUX_RPM=true INSTALL_K3S_EXEC=&quot;--docker&quot; sh -</span><br></pre></td></tr></table></figure>\n<p>然后同样的方式，安装其他 agent 节点。</p>\n<h3 id=\"验证安装\"><a class=\"markdownIt-Anchor\" href=\"#验证安装\"></a> 验证安装</h3>\n<p>各节点安装完成后，再次在 master 节点查看各节点状态：</p>\n<img src=\"/2022/01/14/install-k3s-on-multi-node/install-k3s-on-multi-node-2.png\" class=\"\" title=\"安装完 agent 节点后的节点信息\">\n<h2 id=\"k3s-配置\"><a class=\"markdownIt-Anchor\" href=\"#k3s-配置\"></a> K3s 配置</h2>\n<h3 id=\"为-master-分配-worker-角色\"><a class=\"markdownIt-Anchor\" href=\"#为-master-分配-worker-角色\"></a> 为 master 分配 worker 角色</h3>\n<p>默认情况下，master 节点只有 control-plane 和 master 两个角色，但是由于 master 节点性能过剩，所以可以为 master 节点添加 worker 角色来运行服务：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl label node $&#123;node&#125; node-role.kubernetes.io/worker=worker</span><br></pre></td></tr></table></figure>\n<p>然后我们再来看一下节点信息：</p>\n<img src=\"/2022/01/14/install-k3s-on-multi-node/install-k3s-on-multi-node-3.png\" class=\"\" title=\"为 master 分配 worker 角色后的节点信息\">\n<h3 id=\"在-agent-节点上使用-kubectl-命令\"><a class=\"markdownIt-Anchor\" href=\"#在-agent-节点上使用-kubectl-命令\"></a> 在 agent 节点上使用 <code>kubectl</code> 命令</h3>\n<p>默认 agent 节点安装完毕后，是不能使用 <code>kubectl</code> 命令的：</p>\n<img src=\"/2022/01/14/install-k3s-on-multi-node/install-k3s-on-multi-node-4.png\" class=\"\" title=\"agent 节点默认不能使用 kubectl 命令\">\n<p>我们可以通过环境变量指定配置文件位置，或在使用 <code>kubectl</code> 命令时指定配置文件位置，但为了方便使用需要 <code>EXPORT</code> 环境变量或者设置 <code>alias</code> 别名。不过我们可以把配置文件放在 <code>~/.kube/config</code>，这样 <code>kubectl</code> 命令可以自动应用配置文件。把 master 节点机器上的 <code>/etc/rancher/k3s/k3s.yaml</code> 文件内容写入到 <code>config</code> 文件，不要忘记修改 server 地址改为 master 节点地址：</p>\n<img src=\"/2022/01/14/install-k3s-on-multi-node/install-k3s-on-multi-node-5.png\" class=\"\" title=\"修改配置文件\">\n<p>然后我们再来执行下 <code>kubectl</code> 命令，执行正常：</p>\n<img src=\"/2022/01/14/install-k3s-on-multi-node/install-k3s-on-multi-node-6.png\" class=\"\" title=\"应用 kubectl 配置文件\">\n<h3 id=\"安装-kubernetes-仪表盘\"><a class=\"markdownIt-Anchor\" href=\"#安装-kubernetes-仪表盘\"></a> 安装 Kubernetes 仪表盘</h3>\n<blockquote>\n<p>参考文档：<a href=\"https://docs.rancher.cn/docs/k3s/installation/kube-dashboard/_index\">Kubernetes 仪表盘</a></p>\n</blockquote>\n<h4 id=\"部署仪表盘程序\"><a class=\"markdownIt-Anchor\" href=\"#部署仪表盘程序\"></a> 部署仪表盘程序</h4>\n<p>首先直接用 Kubernetes 官方的推荐配置进行部署：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GITHUB_URL=https://github.com/kubernetes/dashboard/releases</span><br><span class=\"line\">VERSION_KUBE_DASHBOARD=$(curl -w &#x27;%&#123;url_effective&#125;&#x27; -I -L -s -S $&#123;GITHUB_URL&#125;/latest -o /dev/null | sed -e &#x27;s|.*/||&#x27;)</span><br><span class=\"line\">k3s kubectl create -f https://raw.githubusercontent.com/kubernetes/dashboard/$&#123;VERSION_KUBE_DASHBOARD&#125;/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置仪表盘角色\"><a class=\"markdownIt-Anchor\" href=\"#配置仪表盘角色\"></a> 配置仪表盘角色</h4>\n<p>按文档创建用户相关 yml 配置文件:</p>\n<p><code>dashboard.admin-user.yml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin-user</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure>\n<p><code>dashboard.admin-user-role.yml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin-user</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cluster-admin</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">admin-user</span></span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure>\n<p>然后部署用户角色配置：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k3s kubectl create -f dashboard.admin-user.yml -f dashboard.admin-user-role.yml</span><br></pre></td></tr></table></figure>\n<img src=\"/2022/01/14/install-k3s-on-multi-node/install-k3s-on-multi-node-7.png\" class=\"\" title=\"应用角色配置\">\n<p>最后获取仪表盘 token 以供访问：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k3s kubectl -n kubernetes-dashboard describe secret admin-user-token | grep &#x27;^token&#x27;</span><br></pre></td></tr></table></figure>\n<img src=\"/2022/01/14/install-k3s-on-multi-node/install-k3s-on-multi-node-8.png\" class=\"\" title=\"获取仪表盘 token\">\n<h4 id=\"测试访问仪表盘\"><a class=\"markdownIt-Anchor\" href=\"#测试访问仪表盘\"></a> 测试访问仪表盘</h4>\n<p>由于 Kubernetes 仪表盘运行在集群内部，无法直接从外部访问，所以我们需要使用集群代理。打开一个新窗口，并执行一下命令开启代理：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k3s kubectl proxy</span><br></pre></td></tr></table></figure>\n<p>然后可以通过 <code>http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/</code> 来访问 Kubernetes 仪表盘。</p>\n<p>或是直接使用端口转发，但是同样需要保持前台运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 首先获取 service name 和暴露端口</span></span><br><span class=\"line\">kubectl get service -nkubernetes-dashboard</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 然后进行端口转发</span></span><br><span class=\"line\">kubectl port-forward service/kubernetes-dashboard 8443:443 -nkubernetes-dashboard</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果需要远端访问的话</span></span><br><span class=\"line\">kubectl port-forward service/kubernetes-dashboard 8443:443 -nkubernetes-dashboard --address 0.0.0.0</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置端口转发\"><a class=\"markdownIt-Anchor\" href=\"#配置端口转发\"></a> 配置端口转发</h4>\n<p>为了使用方便，当然不能每次都打开终端启动代理来访问 Kubernetes 仪表盘。但是由于我们安装的时候没有安装 lb 和网络组件，所以只能使用 NodePort 来对外暴露服务。同理也适用于其他服务。</p>\n<p>首先打开 Kubernetes 仪表盘，切换到 <code>kubernetes-dashboard</code> 命名空间，然后打开 Service tab 页，编辑 kubernetes-dashboard 项。将配置文件中 <code>type</code> 的值改为 <code>NodePort</code>，然后在 <code>ports</code> 下面添加 <code>nodePort: 31001</code>，其中 <code>31001</code> 是宿主机要监听的端口号，修改完成后点击更新应用配置。</p>\n<img src=\"/2022/01/14/install-k3s-on-multi-node/install-k3s-on-multi-node-9.png\" class=\"\" title=\"修改 service\">\n<p>注意，由于 NodePort 限制，默认限制端口范围只能为 30000-32767，具体可以看 kubernetes 官方文档：<a href=\"https://kubernetes.io/zh/docs/concepts/services-networking/service/#type-nodeport\">NodePort 类型</a>。</p>\n<p>配置更新后就可以直接从外部用浏览器访问宿主机映射之后的端口，或者再结合反代对外暴露使用。</p>\n",
            "tags": [
                "Kubernetes",
                "K8s",
                "K3s"
            ]
        }
    ]
}