{
    "version": "https://jsonfeed.org/version/1",
    "title": "A Blog • All posts by \"httpclient\" tag",
    "description": "Just another blog.",
    "home_page_url": "https://blog.timerever.tk",
    "items": [
        {
            "id": "https://blog.timerever.tk/2017/04/23/client-custom-ssl/",
            "url": "https://blog.timerever.tk/2017/04/23/client-custom-ssl/",
            "title": "Apache HttpClient 4.5.x 忽略证书验证",
            "date_published": "2017-04-23T02:44:20.000Z",
            "content_html": "<p>在使用 Apache HttpComponents 时，需要访问一个第三方接口进行数据传输，但是由于对方使用的是 Let’s Encrypt 的证书，虽然浏览器是信任的，但是在调试的时候发现程序并不信任,所以采用自定义 SSLContext 的方式解决该问题。</p>\n<h3 id=\"查找官方解决方案\"><a class=\"markdownIt-Anchor\" href=\"#查找官方解决方案\"></a> 查找官方解决方案</h3>\n<p>作为一只程序猿，翻官方文档肯定是首选方案。官方提供了一种 Custom SSL context 的实现。</p>\n<p><a href=\"http://hc.apache.org/httpcomponents-client-4.5.x/httpclient/examples/org/apache/http/examples/client/ClientCustomSSL.java\">http://hc.apache.org/httpcomponents-client-4.5.x/httpclient/examples/org/apache/http/examples/client/ClientCustomSSL.java</a></p>\n<span id=\"more\"></span>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * ====================================================================</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class=\"line\"><span class=\"comment\"> * or more contributor license agreements.  See the NOTICE file</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed with this work for additional information</span></span><br><span class=\"line\"><span class=\"comment\"> * regarding copyright ownership.  The ASF licenses this file</span></span><br><span class=\"line\"><span class=\"comment\"> * to you under the Apache License, Version 2.0 (the</span></span><br><span class=\"line\"><span class=\"comment\"> * &quot;License&quot;); you may not use this file except in compliance</span></span><br><span class=\"line\"><span class=\"comment\"> * with the License.  You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *   http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing,</span></span><br><span class=\"line\"><span class=\"comment\"> * software distributed under the License is distributed on an</span></span><br><span class=\"line\"><span class=\"comment\"> * &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class=\"line\"><span class=\"comment\"> * KIND, either express or implied.  See the License for the</span></span><br><span class=\"line\"><span class=\"comment\"> * specific language governing permissions and limitations</span></span><br><span class=\"line\"><span class=\"comment\"> * under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> * ====================================================================</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * This software consists of voluntary contributions made by many</span></span><br><span class=\"line\"><span class=\"comment\"> * individuals on behalf of the Apache Software Foundation.  For more</span></span><br><span class=\"line\"><span class=\"comment\"> * information on the Apache Software Foundation, please see</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;http://www.apache.org/&gt;.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> org.apache.http.examples.client;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.net.ssl.SSLContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.conn.ssl.TrustSelfSignedStrategy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.ssl.SSLContexts;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.util.EntityUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * This example demonstrates how to create secure connections with a custom SSL</span></span><br><span class=\"line\"><span class=\"comment\"> * context.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClientCustomSSL</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Trust own CA and all self-signed certs</span></span><br><span class=\"line\">        <span class=\"type\">SSLContext</span> <span class=\"variable\">sslcontext</span> <span class=\"operator\">=</span> SSLContexts.custom()</span><br><span class=\"line\">                .loadTrustMaterial(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;my.keystore&quot;</span>), <span class=\"string\">&quot;nopassword&quot;</span>.toCharArray(),</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">TrustSelfSignedStrategy</span>())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"comment\">// Allow TLSv1 protocol only</span></span><br><span class=\"line\">        <span class=\"type\">SSLConnectionSocketFactory</span> <span class=\"variable\">sslsf</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SSLConnectionSocketFactory</span>(</span><br><span class=\"line\">                sslcontext,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[] &#123; <span class=\"string\">&quot;TLSv1&quot;</span> &#125;,</span><br><span class=\"line\">                <span class=\"literal\">null</span>,</span><br><span class=\"line\">                SSLConnectionSocketFactory.getDefaultHostnameVerifier());</span><br><span class=\"line\">        <span class=\"type\">CloseableHttpClient</span> <span class=\"variable\">httpclient</span> <span class=\"operator\">=</span> HttpClients.custom()</span><br><span class=\"line\">                .setSSLSocketFactory(sslsf)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">HttpGet</span> <span class=\"variable\">httpget</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpGet</span>(<span class=\"string\">&quot;https://httpbin.org/&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Executing request &quot;</span> + httpget.getRequestLine());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">CloseableHttpResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> httpclient.execute(httpget);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">HttpEntity</span> <span class=\"variable\">entity</span> <span class=\"operator\">=</span> response.getEntity();</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;----------------------------------------&quot;</span>);</span><br><span class=\"line\">                System.out.println(response.getStatusLine());</span><br><span class=\"line\">                EntityUtils.consume(entity);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                response.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            httpclient.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于考虑到该接口为第三方接口，对方可能进行证书的更换，再加上由于所传输信息是可以公开的、非重要数据的数据，所以并不采用官方给出的导入证书而使用不进行检查直接信任的方式处理。</p>\n<h3 id=\"定义自己的-sslcontext\"><a class=\"markdownIt-Anchor\" href=\"#定义自己的-sslcontext\"></a> 定义自己的 SSLContext</h3>\n<p>所以问题的关键在于自定义 <code>SSLContext</code>，查看其 <code>loadTrustMaterial</code> 方法的源代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> SSLContextBuilder <span class=\"title function_\">loadTrustMaterial</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> KeyStore truststore,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> TrustStrategy trustStrategy)</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException, KeyStoreException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">TrustManagerFactory</span> <span class=\"variable\">tmfactory</span> <span class=\"operator\">=</span> TrustManagerFactory.getInstance(</span><br><span class=\"line\">            TrustManagerFactory.getDefaultAlgorithm());</span><br><span class=\"line\">    tmfactory.init(truststore);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> TrustManager[] tms = tmfactory.getTrustManagers();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tms != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (trustStrategy != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; tms.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"type\">TrustManager</span> <span class=\"variable\">tm</span> <span class=\"operator\">=</span> tms[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tm <span class=\"keyword\">instanceof</span> X509TrustManager) &#123;</span><br><span class=\"line\">                    tms[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">TrustManagerDelegate</span>(</span><br><span class=\"line\">                            (X509TrustManager) tm, trustStrategy);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">final</span> TrustManager tm : tms) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.trustmanagers.add(tm);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可见这边是使用实现了 <code>TrustStrategy</code> 接口的 <code>TrustSelfSignedStrategy</code> 对 X509 证书进行管理，所以我们需要自定义一个 <code>TrustStrategy</code> 的实例。</p>\n<p>先查看 <code>TrustStrategy</code> 接口的源代码，发现除了继承了 <code>org.apache.http.ssl.TrustStrategy</code> 之外没有添加任何内容。由于该类在 http-core 包中，直接反编译查看得：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">TrustStrategy</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isTrusted</span><span class=\"params\">(X509Certificate[] var1, String var2)</span> <span class=\"keyword\">throws</span> CertificateException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以这里需要重写 <code>isTrusted</code> 方法，不进行验证，直接返回 <code>true</code>。由于不需要导入 Keystore，所以直接给空值，代码如下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">SSLContext</span> <span class=\"variable\">sslcontext</span> <span class=\"operator\">=</span> SSLContexts.custom()</span><br><span class=\"line\">\t    .loadTrustMaterial(<span class=\"literal\">null</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">TrustStrategy</span>() &#123;</span><br><span class=\"line\">\t        <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t        <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isTrusted</span><span class=\"params\">(X509Certificate[] x509Certificates, String s)</span> <span class=\"keyword\">throws</span> CertificateException &#123;</span><br><span class=\"line\">\t            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t    &#125;)</span><br><span class=\"line\">\t    .build();</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a class=\"markdownIt-Anchor\" href=\"#测试\"></a> 测试</h3>\n<p>修改后的完整代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.conn.ssl.TrustStrategy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.ssl.SSLContexts;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.util.EntityUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.net.ssl.SSLContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.KeyManagementException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.KeyStoreException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.NoSuchAlgorithmException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.cert.CertificateException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.cert.X509Certificate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by timer on 2017/4/23.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestClientCustomSSL</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 自定义 SSLContext 使信任所有证书。</span></span><br><span class=\"line\">        <span class=\"type\">SSLContext</span> <span class=\"variable\">sslcontext</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            sslcontext = SSLContexts.custom()</span><br><span class=\"line\">\t                .loadTrustMaterial(<span class=\"literal\">null</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">TrustStrategy</span>() &#123;</span><br><span class=\"line\">\t                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t                    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isTrusted</span><span class=\"params\">(X509Certificate[] x509Certificates, String s)</span> <span class=\"keyword\">throws</span> CertificateException &#123;</span><br><span class=\"line\">\t                        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t                    &#125;</span><br><span class=\"line\">\t                &#125;)</span><br><span class=\"line\">\t                .build();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (KeyManagementException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (KeyStoreException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 仅允许 TLSv1 协议</span></span><br><span class=\"line\">        <span class=\"type\">SSLConnectionSocketFactory</span> <span class=\"variable\">sslsf</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SSLConnectionSocketFactory</span>(</span><br><span class=\"line\">                sslcontext,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[] &#123; <span class=\"string\">&quot;TLSv1&quot;</span> &#125;,</span><br><span class=\"line\">                <span class=\"literal\">null</span>,</span><br><span class=\"line\">                SSLConnectionSocketFactory.getDefaultHostnameVerifier());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>(<span class=\"type\">CloseableHttpClient</span> <span class=\"variable\">httpclient</span> <span class=\"operator\">=</span> HttpClients.custom().setSSLSocketFactory(sslsf).build()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">HttpGet</span> <span class=\"variable\">httpget</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpGet</span>(<span class=\"string\">&quot;https://httpbin.org/get&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span>(<span class=\"type\">CloseableHttpResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> httpclient.execute(httpget)) &#123;</span><br><span class=\"line\">                <span class=\"type\">HttpEntity</span> <span class=\"variable\">entity</span> <span class=\"operator\">=</span> response.getEntity();</span><br><span class=\"line\">                System.out.println(EntityUtils.toString(entity));</span><br><span class=\"line\">                EntityUtils.consume(entity);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>成功访问，输出如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;args&quot;: &#123;&#125;, </span><br><span class=\"line\">  &quot;headers&quot;: &#123;</span><br><span class=\"line\">    &quot;Accept-Encoding&quot;: &quot;gzip,deflate&quot;, </span><br><span class=\"line\">    &quot;Connection&quot;: &quot;close&quot;, </span><br><span class=\"line\">    &quot;Host&quot;: &quot;httpbin.org&quot;, </span><br><span class=\"line\">    &quot;User-Agent&quot;: &quot;Apache-HttpClient/4.5.3 (Java/1.8.0_121)&quot;</span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  &quot;origin&quot;: &quot;60.219.211.8&quot;, </span><br><span class=\"line\">  &quot;url&quot;: &quot;https://httpbin.org/get&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注：这里访问的并不是一个不受信任的站点，但是实际测试不受信任的站点也可以正常访问。</strong></p>\n",
            "tags": [
                "Java",
                "HttpClient"
            ]
        }
    ]
}