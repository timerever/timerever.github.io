{
    "version": "https://jsonfeed.org/version/1",
    "title": "A Blog • All posts by \"hibernate\" tag",
    "description": "Just another blog.",
    "home_page_url": "https://blog.timerever.tk",
    "items": [
        {
            "id": "https://blog.timerever.tk/2021/12/02/hibernate-incorrect-metamodel-with-no-reationship/",
            "url": "https://blog.timerever.tk/2021/12/02/hibernate-incorrect-metamodel-with-no-reationship/",
            "title": "Hibernate 解决 Metamodel 属性类型错误问题",
            "date_published": "2021-12-02T03:41:48.000Z",
            "content_html": "<p>因为项目上使用了 Hibernate Metamodel，而且自定义映射了数据库的 JSON 字段类型，导致生成的 Metamodel 属性类型有误。虽然并没有用映射的这些属性做 <code>CriteriaQuery</code>，所以其实在项目的使用上没有影响，但是启动时还是会报一个 ERROR 日志，所以寻找一个能够根治的解决办法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR org.hibernate.metamodel.internal.MetadataContext [MetadataContext.java:491] - HHH015007: Illegal argument on static metamodel field injection : Foo_#bars; expected type : org.hibernate.metamodel.model.domain.internal.SingularAttributeImpl; encountered type : javax.persistence.metamodel.MapAttribute</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h3 id=\"一-定位问题\"><a class=\"markdownIt-Anchor\" href=\"#一-定位问题\"></a> 一、定位问题</h3>\n<p><strong>首先是背景信息：</strong> 因为前端需要在数据库存储 JSON 字段，而且现在版本的 MySQL 天然支持 JSON ，所以建表时采用了 JSON 作为字段类型。然后在 JPA 实体层面，引入了 <code>hibernate-types</code> 依赖来增加 Hibernate 对 JSON 的支持，字段属性增加了 <code>@Type(type = &quot;json&quot;)</code> 注解，本身定义为了 <code>Map</code> 类型。</p>\n<p>其实在 Hibernate 对 JSON 处理这件事情上，传统方案是通过自定义 <code>Convert</code> 来实现。或者可能不是 JSON Object 而是 JSON Array，但无论是哪种情况，均会遇到同样的问题。</p>\n<p>通过报错信息，对代码进行 DEBUG 后得知，Hibernate 在启动时，会根据实体属性是否存在与其他实体的关系，生成不同的 <code>Attribute</code>。比如 OneToMany 一对多关系就会生成 <code>ListAttribute</code> 或 <code>SetAttribute</code>，没有关系的属性都是 <code>SingularAttribute</code>。而启动时通过反射，会 set Metamodel 的对应属性，我们可以在 target 下面看见，Metamodel 的类型为 <code>MapAttribute</code>，所以我们可以确定，问题就出在了生成 Metamodel 的时候。具体是不是直接拿实体定义的数据类型来生成的我没有去看源码，不过可以肯定的是它在判断类型的时候缺少额外的判断。</p>\n<h3 id=\"二-解决问题\"><a class=\"markdownIt-Anchor\" href=\"#二-解决问题\"></a> 二、解决问题</h3>\n<p>同样作为一个共性问题，在 Goolge 进行搜索后，定位到了一条仍然是 Hibernate 官方 Bug 追踪的链接 <a href=\"https://hibernate.atlassian.net/browse/HHH-12338\">Incorrect metamodel for basic collections</a>。简单的来说，就是当前已经在 5.5.0.Alpha1 的版本中得到了解决，不过如果你认真看了下面整个的 Activity 记录，就会发现仍然是存在一个小插曲。</p>\n<h3 id=\"三-插曲\"><a class=\"markdownIt-Anchor\" href=\"#三-插曲\"></a> 三、插曲</h3>\n<p>这个问题是在 2018 年的 3 月份被提出来的，而 5.5.0.Alpha1 已经是 2021 年 8 月份的事情了，照理说这么一个小问题不会需要三年多的时间来处理，而这个疑问的答案就在下面的讨论之中。</p>\n<p>简单来说，这个问题在当月就被解决掉了，伴随着 5.2.17 的版本发布，这个问题理论上来说就不应该再存在了。然而事与愿违，在 5.2.17 版本发布之后，很快就有人提出了新的问题。在下面的 Comment 中有记录，同时这个人也单独提了一个 issue <a href=\"https://hibernate.atlassian.net/browse/HHH-12581\">NPE for Criteria query containing fetch join as a regression of HHH-12338</a>，即这次的改动造成了 NPE。然后可以看到在另一个维护者与之前 Vlad Mihalcea 的一番讨论之后，他们决定恢复这次的改动。</p>\n<img src=\"/2021/12/02/hibernate-incorrect-metamodel-with-no-reationship/hibernate-incorrect-metamodel-with-no-reationship-1.png\" class=\"\" title=\"revert commit\">\n<p>但是回退了就意味着问题又回来了，上面提到的 Vlad Mihalcea 从红帽离职，不再维护 Hibernate 还弄了一个新的项目就是上面提到的 <code>hibernate-types</code>。所以其他人在遇到相同的问题时，有部分和我们一样是采用的 <code>hibernate-types</code> 方案，自然而然有人把问题又丢给了 Vlad Mihalcea，不过是在 <code>hibernate-types</code> 项目。</p>\n<p>于是 Vlad Mihalcea 在 Github 提了新的 PR，见 <a href=\"https://github.com/hibernate/hibernate-orm/pull/3254\">HHH-12338 - Incorrect metamodel for basic collections</a>。不过很不幸的是，并没有后续。</p>\n<p>直到今年的 7 月，又一位开发者忍无可忍决定解决这个问题，提了新的 PR 出来，见 <a href=\"https://github.com/hibernate/hibernate-orm/pull/4096\">HHH-14724 Test-case for metamodel compile error with converters and validation</a>。这次终于引起了重视，并在一番努力之后，终于得到了合并，问题就此解决。</p>\n<p>题外话，这件事情，是不是跟前阵子遇到的 <a href=\"/2021/11/26/hibernate-automatic-2nd-collection-cache-eviction/\">Hibernate 配置自动清除二级缓存之集合缓存</a> 里面的插曲有点像？笑。</p>\n<h3 id=\"四-亲力亲为\"><a class=\"markdownIt-Anchor\" href=\"#四-亲力亲为\"></a> 四、亲力亲为</h3>\n<p>虽说这件事情现在看来终于告一段落了，不过由于时今年 9 月份才最终解决，虽然代码已经被合并到了各个版本的分支中，但 5.4 已经半年没有发过新的版本了。虽说 5.5 和 5.6 的版本已经没问题了，但由于项目框架的问题，并不能直接升级 Hibernate 的版本，而且本来 5.5 的版本就存在很大改动，现有架构并不能保证完全兼容（比如还是上面提到的 <code>hibernate-types</code> 就需要引入另外一个包），所以最后没有办法，只能决定采用重打包的方式自己对源码进行更新。</p>\n<p>剩下的事情就不再赘述了，大概流程就是下载 Hibernate 源码，找到 5.4.32.Final 的 tag，在此基础上手动把修复代码的变更拷贝过来，然后改个版本号，发布到私仓，再更改当前项目依赖的版本号，最后成功解决。</p>\n",
            "tags": [
                "Java",
                "Hibernate"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2021/11/26/hibernate-automatic-2nd-collection-cache-eviction/",
            "url": "https://blog.timerever.tk/2021/11/26/hibernate-automatic-2nd-collection-cache-eviction/",
            "title": "Hibernate 配置自动清除二级缓存之集合缓存",
            "date_published": "2021-11-26T07:21:10.000Z",
            "content_html": "<p>之前在项目上使用了 Hibernate，并开启了基于 caffeine 的二级缓存。因为 Hibernate 会自动处理缓存，所以一直没怎么关注。直到最近，发现在一种特定的情况下，Hibernate 不会自动清除二级缓存里面的集合缓存。问题最后解决起来其实很简单，增加一个配置项的事。不过问题寻求解决的过程还是蛮繁琐的，并没有人能够直接告诉这个问题的答案，在此记录一下这个问题的排查过程。</p>\n<blockquote>\n<p>太长不看版：Spring Boot 中设置属性 spring.jpa.properties.auto_evict_collection_cache=true 即可解决。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"一-问题出现\"><a class=\"markdownIt-Anchor\" href=\"#一-问题出现\"></a> 一、问题出现</h3>\n<p>假定我这里有两个实体，分别为 <code>Parent</code> 和 <code>Child</code>。然后 Parent 与 Child 之间存在一对多的对应关系，即在 Parent 的实体中，存在一个属性 <code>private Set&lt;Child&gt; children</code>，然后我们开启二级缓存 <code>@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)</code>。在这种情况下，我们先访问 Parent 实体并获取其中的 <code>children</code> 属性，确保其已被缓存。然后我们再单独操作 Child，我们新建一个 Child 对象 <code>Child child = new Child()</code> 并设置其 Parent 的值 <code>child.setParent(parent)</code> 并保存 Child 实体 <code>ChildRepository.save(child)</code>。然后我们回过来获取 Parent，会发现 Parent 的 <code>children</code> 的值仍为原数组对象， 没有我们新增的 <code>child</code> 对象。</p>\n<p>通过在 Google 上进行搜索，发现 stackoverflow 上存在几个类似的问题，再进一步的搜索后，发现在 Hibernate 官方 Bug 追踪网站上有人归纳并提出了这个问题 <a href=\"https://hibernate.atlassian.net/browse/HHH-4910\">automatic L2 collection cache eviction when an element is added/updated/removed</a>，可以看到不只是自己遇到的新增，修改/删除也会有类似的问题。</p>\n<h3 id=\"二-问题解决\"><a class=\"markdownIt-Anchor\" href=\"#二-问题解决\"></a> 二、问题解决</h3>\n<p>在上面链接的内容下方，问题提出者给出了一种 workaround 的方案，提供 <code>@PostPersist</code>、<code>@PostRemove</code> 及 <code>@PreUpdate</code> 的监听，并在监听中自动清理缓存。以及在之前查阅 stackoverflow 时，也有人认为，你需要在操作多方元素的时候，同时操作一方对应的集合，对其进行 add/remove 操作。</p>\n<p>但不管怎么说，这些都是一些 workaround 方案，因为 Hibernate 本身是有能力自动处理这些事情的。话又说回来，既然问题很早就被提出了，比如这个链接中使用的版本是 <code>3.3.1</code>，同时官方也已经记录了这个问题已经在 <code>4.3.0.Beta5</code> 中被修复了，可是为什么我们还是会遇到这个问题？这个答案其实在下面的评论中。</p>\n<img src=\"/2021/11/26/hibernate-automatic-2nd-collection-cache-eviction/hibernate-automatic-2nd-collection-cache-eviction-1.png\" class=\"\" title=\"Hibernate atlassian 下面的评论\">\n<p>点进链接是 GitHub 的 PR 请求，讨论中详细地记录了从贡献者提出 PR 到最后并合并的整个流程。看下来大概就是，贡献者向负责人解释了为了提出这个改动、有负责人担心是不是会影响性能并期望做成可配置的、贡献者支持了配置项、PR 最终被合并。所以问题已经很明了了，功能上是已经被修复了，但是因为做成了配置项，所以默认没有启用，我们需要手动启用这个特性。</p>\n<img src=\"/2021/11/26/hibernate-automatic-2nd-collection-cache-eviction/hibernate-automatic-2nd-collection-cache-eviction-2.png\" class=\"\" title=\"变成配置项的 commit\">\n<p>所以我们从这里点进去，去看一下我们怎么才能打开这个特性。最后我们可以看到是在 <code>hibernate-core/src/main/java/org/hibernate/cfg/AvailableSettings.java</code> 这个文件中定义了配置的名字。</p>\n<img src=\"/2021/11/26/hibernate-automatic-2nd-collection-cache-eviction/hibernate-automatic-2nd-collection-cache-eviction-3.png\" class=\"\" title=\"配置项的名字\">\n<p>所以到这里，这个问题就算是最终解决了。</p>\n<h3 id=\"三-插曲\"><a class=\"markdownIt-Anchor\" href=\"#三-插曲\"></a> 三、插曲</h3>\n<p>由于项目使用了 <code>spring-boot-starter-data-jpa</code> 依赖，所以这个配置项的设置并不是上面 Hibernate 的改动所提及的，于是继续在 Google 用 <code>auto_evict_collection_cache</code> 作为关键字进行搜索，寻找在 Spring Boot 中的配置方式。最终是得到了答案，Spring Boot 中的配置项为 <code>spring.jpa.properties.auto_evict_collection_cache</code>，不过在此之外还发现了一个小插曲。</p>\n<p><a href=\"https://hibernate.atlassian.net/browse/HHH-10614\">Auto evict collection cache throws exception with null values</a> 中描述了一个人开启了这个特性，然后在一个特定的情况下 Hibernate 会抛出异常。虽然这个问题很快就被解决了，不过现在回来想想，维护者在维护这种已经已经很庞大的项目时，对所有的改动都抱有谨慎的态度还是很有必要的。做成了配置项，虽然一方面会让很多不知道的人继续遇到这个问题，但同时也让很多无关的人避免了可能带来的新问题。所以这两种方案孰优孰劣，可能就见仁见智了吧。</p>\n",
            "tags": [
                "Java",
                "Hibernate"
            ]
        }
    ]
}