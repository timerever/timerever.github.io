<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>A Blog • Posts by &#34;jackson&#34; tag</title>
        <link>https://blog.timerever.tk</link>
        <description>Just another blog.</description>
        <language>zh-CN</language>
        <pubDate>Wed, 09 Feb 2022 07:49:35 +0000</pubDate>
        <lastBuildDate>Wed, 09 Feb 2022 07:49:35 +0000</lastBuildDate>
        <category>Java</category>
        <category>HttpClient</category>
        <category>Jackson</category>
        <category>Design Pattern</category>
        <category>Docker</category>
        <category>Dockerfile</category>
        <category>Java Web</category>
        <category>Factory Patterns</category>
        <category>Linux</category>
        <category>C</category>
        <category>Android</category>
        <category>Huawei</category>
        <category>CyanogenMod</category>
        <category>Git</category>
        <category>GitHub</category>
        <category>Hibernate</category>
        <category>Kubernetes</category>
        <category>K8s</category>
        <category>K3s</category>
        <category>Keycloak</category>
        <category>OAuth2</category>
        <category>SSO</category>
        <category>VMware</category>
        <category>vmdk</category>
        <category>wget</category>
        <category>Regular Expression</category>
        <category>Sharding</category>
        <category>Sharding-JDBC</category>
        <category>Algorithm</category>
        <category>Sort</category>
        <category>Ubuntu</category>
        <category>Ruby</category>
        <category>Jekyll</category>
        <category>Windows</category>
        <category>Regedit</category>
        <category>PowerShell</category>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2022/02/09/custom-jackson-serializer-for-clob-type/</guid>
            <title>自定义 Jackson Serializer 解决无法序列化 SerialClob 的问题</title>
            <link>https://blog.timerever.tk/2022/02/09/custom-jackson-serializer-for-clob-type/</link>
            <category>Java</category>
            <category>Jackson</category>
            <pubDate>Wed, 09 Feb 2022 07:49:35 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;由于种种原因，项目上在做数据查询时，没有选择任何的 ORM 框架而是使用了 &lt;code&gt;JdbcTemplate&lt;/code&gt; 进行数据库查询。查询出来也没做太多事情，只是简单地对数据做了下封装，然后直接返回给了前端。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt; data = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;JdbcTemplate jdbcTemplate = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; JdbcTemplate(ds);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SqlRowSet sqlRowSet = jdbcTemplate.queryForRowSet(sql);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; columnSize = sqlRowSet.getMetaData().getColumnNames().length;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (sqlRowSet.next()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Map&amp;lt;String, Object&amp;gt; tmp = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; LinkedHashMap&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i &amp;lt;= columnSize; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		tmp.put(i + &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, sqlRowSet.getObject(i));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	data.add(tmp);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;本来一直岁月静好，知道某一天查了一张新表，然后后台报了异常：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class java.io.ByteArrayInputStream and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.demo.web.rest.util.ResponseEnvelope[&amp;quot;data&amp;quot;]-&amp;gt;com.demo.service.dto.SqlQueryDto[&amp;quot;data&amp;quot;]-&amp;gt;java.util.ArrayList[0]-&amp;gt;java.util.LinkedHashMap[&amp;quot;LOG_MSG&amp;quot;]-&amp;gt;javax.sql.rowset.serial.SerialClob[&amp;quot;asciiStream&amp;quot;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1300)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:400)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:46)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:728)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:774)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields(MapSerializer.java:808)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeWithoutTypeInfo(MapSerializer.java:764)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:720)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:35)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at com.fasterxml.jackson.datatype.hibernate5.PersistentCollectionSerializer.serialize(PersistentCollectionSerializer.java:244)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:119)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:79)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:18)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at com.fasterxml.jackson.datatype.hibernate5.PersistentCollectionSerializer.serialize(PersistentCollectionSerializer.java:244)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:728)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:774)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:728)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:774)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1518)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1007)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:454)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	... 123 common frames omitted&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;乍一看，可以通过提示所说的设置 &lt;code&gt;SerializationFeature.FAIL_ON_EMPTY_BEANS&lt;/code&gt; 为 &lt;code&gt;false&lt;/code&gt; 来避免这个问题，但这个问题其实远远没有这么简单。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h3 id=&#34;尝试按照提示解决&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#尝试按照提示解决&#34;&gt;&lt;/a&gt; 尝试按照提示解决&lt;/h3&gt;
&lt;p&gt;既然异常中已经给出了解决方案，所以我们可以先尝试用给出的方案解决。由于我们是 spring 项目，所以我们可以很简单地通过在 yaml 中添加配置而不是采用写大段代码的方式来设置这个序列化属性：&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;spring:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;jackson:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;serialization:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;FAIL_ON_EMPTY_BEANS:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;让我们再调用下接口。好，没问题，不报错了！再看眼返回值，等等，这是个啥？&lt;/p&gt;
&lt;img src=&#34;/2022/02/09/custom-jackson-serializer-for-clob-type/custom-jackson-serializer-for-clob-type-1.png&#34; class=&#34;&#34; title=&#34;并不是所期望的结果&#34;&gt;
&lt;p&gt;这个字段明明在数据库中是有值的，而且正常也不会变成这种嵌套结构，所以看来这个解决办法并不可行。&lt;/p&gt;
&lt;h3 id=&#34;寻找问题根源&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#寻找问题根源&#34;&gt;&lt;/a&gt; 寻找问题根源&lt;/h3&gt;
&lt;p&gt;所以简单的解决方式不行，就只能按部就班先看问题出在哪里了。废话不多说，既然我们知道了问题出在哪个字段，就直接打个断点先看眼程序拿到的返回值是什么样子。&lt;/p&gt;
&lt;p&gt;已知数据库是 H2，对应的字段类型为 &lt;code&gt;CHARACTER LARGE OBJECT&lt;/code&gt;，再看眼拿到的值：&lt;/p&gt;
&lt;img src=&#34;/2022/02/09/custom-jackson-serializer-for-clob-type/custom-jackson-serializer-for-clob-type-2.png&#34; class=&#34;&#34; title=&#34;实际拿到的返回值&#34;&gt;
&lt;p&gt;可以看到，程序所拿到的返回值是 &lt;code&gt;javax.sql.rowset.serial.SerialClob&lt;/code&gt; 的对象，而这个对象里面所包含的 &lt;code&gt;clob&lt;/code&gt; 字段就是 H2 的 &lt;code&gt;org.h2.jdbc.JdbcClob&lt;/code&gt; 对象。&lt;/p&gt;
&lt;img src=&#34;/2022/02/09/custom-jackson-serializer-for-clob-type/custom-jackson-serializer-for-clob-type-3.png&#34; class=&#34;&#34; title=&#34;SerialClob 类&#34;&gt;
&lt;p&gt;也就是说，默认情况下 Jackson 无法序列化 &lt;code&gt;SerialClob&lt;/code&gt; 这个类所创建的对象，是不是由于 &lt;code&gt;clob&lt;/code&gt; 字段所包含的具体实现类导致的并没有进一步研究，因为数据库的种类很多，我们需要着手做的是解决这个不能序列化的问题。&lt;/p&gt;
&lt;h3 id=&#34;自定义-serializer-解决问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自定义-serializer-解决问题&#34;&gt;&lt;/a&gt; 自定义 Serializer 解决问题&lt;/h3&gt;
&lt;p&gt;我们知道 Jackson 可以通过扩展 &lt;code&gt;Module&lt;/code&gt; 来支持更多类型的序列化操作，所以我们也可以采用同样的方式来增加对 &lt;code&gt;SerialClob&lt;/code&gt; 的支持。&lt;/p&gt;
&lt;p&gt;不过我们不需要自定义 &lt;code&gt;Module&lt;/code&gt;，使用自带的 &lt;code&gt;SimpleModule&lt;/code&gt; 即可，要做的只是自定义对应的 Serializer：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Slf4j&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SerialClobSerializer&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;JsonSerializer&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;SerialClob&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(SerialClob clob, JsonGenerator gen, SerializerProvider serializers)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			gen.writeString(clob.getCharacterStream(), (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;) clob.length());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (SerialException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			log.error(&lt;span class=&#34;string&#34;&gt;&amp;quot;Serialize SerialClob error&amp;quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后要做的就是将自定义的 &lt;code&gt;SerialClobSerializer&lt;/code&gt; 注册到 ObjectMapper 中去，通常网上的方法都是自定义创建全局的 &lt;code&gt;ObjectMapper&lt;/code&gt; 供 Spring 使用。这个方法定制化强，完全由自己来创建 &lt;code&gt;ObjectMapper&lt;/code&gt;，但个人希望在可以应用 Spring 默认创建的 &lt;code&gt;ObjectMapper&lt;/code&gt; 属性的同时，将 &lt;code&gt;SerialClobSerializer&lt;/code&gt; 注册进去，所以采用下面的方法：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;JacksonConfiguration&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Resource&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; ObjectMapper objectMapper;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@PostConstruct&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;customSerializerSupport&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        objectMapper.registerModule(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; SimpleModule().addSerializer(SerialClob.class, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; SerialClobSerializer()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到此，问题就得到了解决，调用接口后不再报错，且可以返回正确的结果。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
