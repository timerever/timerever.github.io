{
    "version": "https://jsonfeed.org/version/1",
    "title": "A Blog • All posts by \"jackson\" tag",
    "description": "Just another blog.",
    "home_page_url": "https://blog.timerever.tk",
    "items": [
        {
            "id": "https://blog.timerever.tk/2022/02/09/custom-jackson-serializer-for-clob-type/",
            "url": "https://blog.timerever.tk/2022/02/09/custom-jackson-serializer-for-clob-type/",
            "title": "自定义 Jackson Serializer 解决无法序列化 SerialClob 的问题",
            "date_published": "2022-02-09T07:49:35.000Z",
            "content_html": "<p>由于种种原因，项目上在做数据查询时，没有选择任何的 ORM 框架而是使用了 <code>JdbcTemplate</code> 进行数据库查询。查询出来也没做太多事情，只是简单地对数据做了下封装，然后直接返回给了前端。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Map&lt;String, Object&gt;&gt; data = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"type\">JdbcTemplate</span> <span class=\"variable\">jdbcTemplate</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JdbcTemplate</span>(ds);</span><br><span class=\"line\"><span class=\"type\">SqlRowSet</span> <span class=\"variable\">sqlRowSet</span> <span class=\"operator\">=</span> jdbcTemplate.queryForRowSet(sql);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">columnSize</span> <span class=\"operator\">=</span> sqlRowSet.getMetaData().getColumnNames().length;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (sqlRowSet.next()) &#123;</span><br><span class=\"line\">\tMap&lt;String, Object&gt; tmp = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashMap</span>&lt;&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= columnSize; i++) &#123;</span><br><span class=\"line\">\t\ttmp.put(i + <span class=\"string\">&quot;&quot;</span>, sqlRowSet.getObject(i));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdata.add(tmp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>本来一直岁月静好，知道某一天查了一张新表，然后后台报了异常：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class java.io.ByteArrayInputStream and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.demo.web.rest.util.ResponseEnvelope[&quot;data&quot;]-&gt;com.demo.service.dto.SqlQueryDto[&quot;data&quot;]-&gt;java.util.ArrayList[0]-&gt;java.util.LinkedHashMap[&quot;LOG_MSG&quot;]-&gt;javax.sql.rowset.serial.SerialClob[&quot;asciiStream&quot;])</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1300)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:400)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:46)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:728)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:774)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields(MapSerializer.java:808)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeWithoutTypeInfo(MapSerializer.java:764)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:720)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:35)</span><br><span class=\"line\">\tat com.fasterxml.jackson.datatype.hibernate5.PersistentCollectionSerializer.serialize(PersistentCollectionSerializer.java:244)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:119)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:79)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:18)</span><br><span class=\"line\">\tat com.fasterxml.jackson.datatype.hibernate5.PersistentCollectionSerializer.serialize(PersistentCollectionSerializer.java:244)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:728)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:774)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:728)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:774)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1518)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1007)</span><br><span class=\"line\">\tat org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:454)</span><br><span class=\"line\">\t... 123 common frames omitted</span><br></pre></td></tr></table></figure>\n<p>乍一看，可以通过提示所说的设置 <code>SerializationFeature.FAIL_ON_EMPTY_BEANS</code> 为 <code>false</code> 来避免这个问题，但这个问题其实远远没有这么简单。</p>\n<span id=\"more\"></span>\n<h3 id=\"尝试按照提示解决\"><a class=\"markdownIt-Anchor\" href=\"#尝试按照提示解决\"></a> 尝试按照提示解决</h3>\n<p>既然异常中已经给出了解决方案，所以我们可以先尝试用给出的方案解决。由于我们是 spring 项目，所以我们可以很简单地通过在 yaml 中添加配置而不是采用写大段代码的方式来设置这个序列化属性：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">jackson:</span></span><br><span class=\"line\">    <span class=\"attr\">serialization:</span></span><br><span class=\"line\">      <span class=\"attr\">FAIL_ON_EMPTY_BEANS:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>让我们再调用下接口。好，没问题，不报错了！再看眼返回值，等等，这是个啥？</p>\n<img src=\"/2022/02/09/custom-jackson-serializer-for-clob-type/custom-jackson-serializer-for-clob-type-1.png\" class=\"\" title=\"并不是所期望的结果\">\n<p>这个字段明明在数据库中是有值的，而且正常也不会变成这种嵌套结构，所以看来这个解决办法并不可行。</p>\n<h3 id=\"寻找问题根源\"><a class=\"markdownIt-Anchor\" href=\"#寻找问题根源\"></a> 寻找问题根源</h3>\n<p>所以简单的解决方式不行，就只能按部就班先看问题出在哪里了。废话不多说，既然我们知道了问题出在哪个字段，就直接打个断点先看眼程序拿到的返回值是什么样子。</p>\n<p>已知数据库是 H2，对应的字段类型为 <code>CHARACTER LARGE OBJECT</code>，再看眼拿到的值：</p>\n<img src=\"/2022/02/09/custom-jackson-serializer-for-clob-type/custom-jackson-serializer-for-clob-type-2.png\" class=\"\" title=\"实际拿到的返回值\">\n<p>可以看到，程序所拿到的返回值是 <code>javax.sql.rowset.serial.SerialClob</code> 的对象，而这个对象里面所包含的 <code>clob</code> 字段就是 H2 的 <code>org.h2.jdbc.JdbcClob</code> 对象。</p>\n<img src=\"/2022/02/09/custom-jackson-serializer-for-clob-type/custom-jackson-serializer-for-clob-type-3.png\" class=\"\" title=\"SerialClob 类\">\n<p>也就是说，默认情况下 Jackson 无法序列化 <code>SerialClob</code> 这个类所创建的对象，是不是由于 <code>clob</code> 字段所包含的具体实现类导致的并没有进一步研究，因为数据库的种类很多，我们需要着手做的是解决这个不能序列化的问题。</p>\n<h3 id=\"自定义-serializer-解决问题\"><a class=\"markdownIt-Anchor\" href=\"#自定义-serializer-解决问题\"></a> 自定义 Serializer 解决问题</h3>\n<p>我们知道 Jackson 可以通过扩展 <code>Module</code> 来支持更多类型的序列化操作，所以我们也可以采用同样的方式来增加对 <code>SerialClob</code> 的支持。</p>\n<p>不过我们不需要自定义 <code>Module</code>，使用自带的 <code>SimpleModule</code> 即可，要做的只是自定义对应的 Serializer：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SerialClobSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">JsonSerializer</span>&lt;SerialClob&gt; &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serialize</span><span class=\"params\">(SerialClob clob, JsonGenerator gen, SerializerProvider serializers)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tgen.writeString(clob.getCharacterStream(), (<span class=\"type\">int</span>) clob.length());</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SerialException e) &#123;</span><br><span class=\"line\">\t\t\tlog.error(<span class=\"string\">&quot;Serialize SerialClob error&quot;</span>, e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后要做的就是将自定义的 <code>SerialClobSerializer</code> 注册到 ObjectMapper 中去，通常网上的方法都是自定义创建全局的 <code>ObjectMapper</code> 供 Spring 使用。这个方法定制化强，完全由自己来创建 <code>ObjectMapper</code>，但个人希望在可以应用 Spring 默认创建的 <code>ObjectMapper</code> 属性的同时，将 <code>SerialClobSerializer</code> 注册进去，所以采用下面的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JacksonConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectMapper objectMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">customSerializerSupport</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        objectMapper.registerModule(<span class=\"keyword\">new</span> <span class=\"title class_\">SimpleModule</span>().addSerializer(SerialClob.class, <span class=\"keyword\">new</span> <span class=\"title class_\">SerialClobSerializer</span>()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到此，问题就得到了解决，调用接口后不再报错，且可以返回正确的结果。</p>\n",
            "tags": [
                "Java",
                "Jackson"
            ]
        }
    ]
}