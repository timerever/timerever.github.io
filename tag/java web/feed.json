{
    "version": "https://jsonfeed.org/version/1",
    "title": "A Blog • All posts by \"java web\" tag",
    "description": "Just another blog.",
    "home_page_url": "https://blog.timerever.tk",
    "items": [
        {
            "id": "https://blog.timerever.tk/2017/03/13/docker-learning-trip-6/",
            "url": "https://blog.timerever.tk/2017/03/13/docker-learning-trip-6/",
            "title": "Docker 学习之旅（六）：使用 Docker 搭建 Java Web 运行环境",
            "date_published": "2017-03-13T01:58:28.000Z",
            "content_html": "<p>学习 Docker 在一开始肯定不是去学习它的理论（至少对大部分人而言），而是学习它的使用方法进而去使用。大概搭建好了 Docker 的环境，也尝试了创建自己的 Docker 镜像，现在就可以尝试一些比较实用的东西，比如使用 Docker 来搭建 Java Web 运行环境。</p>\n<h3 id=\"寻找镜像\"><a class=\"markdownIt-Anchor\" href=\"#寻找镜像\"></a> 寻找镜像</h3>\n<p>既然官方的镜像那么多，那么我们为什么不先去看一下官方镜像呢？打开 Docker Hub 一搜索 tomcat，排在第一个的就是。</p>\n<p>地址：<a href=\"https://hub.docker.com/_/tomcat/\">https://hub.docker.com/_/tomcat/</a></p>\n<p>这边选择 tomcat7 + jre7，但是通过查看构建所使用的 <code>Dockfile</code> 文件发现，tomcat 的官方源采用的是 jre7 是 openJDK7 的 jre，这里需要注意。</p>\n<span id=\"more\"></span>\n<h3 id=\"下载运行-tomcat\"><a class=\"markdownIt-Anchor\" href=\"#下载运行-tomcat\"></a> 下载运行 tomcat</h3>\n<p>tomcat 的默认启动参数为 <code>CMD [&quot;catalina.sh&quot;, &quot;run&quot;]</code>，启动方式为：</p>\n<pre><code>docker run -it --rm tomcat:7.0\n</code></pre>\n<p>使用 <code>http://container-ip:8080</code> 在浏览器访问。</p>\n<p>或者将端口映射到本地，运行：</p>\n<pre><code>$ docker run -it --rm -p 8888:8080 tomcat:7.0\n</code></pre>\n<p>然后使用 <code>http://localhost:8888</code> 或是 <code>http://host-ip:8888</code> 访问。</p>\n<h3 id=\"部署-java-web-项目\"><a class=\"markdownIt-Anchor\" href=\"#部署-java-web-项目\"></a> 部署 Java Web 项目</h3>\n<p>文档上已经说明，对于 tomcat 7 ，tomcat 所在目录为 <code>/usr/local/tomcat</code>，所以对其进行修改完成部署。</p>\n<h4 id=\"复制文件\"><a class=\"markdownIt-Anchor\" href=\"#复制文件\"></a> 复制文件</h4>\n<p>先使用如下命令启动容器：</p>\n<pre><code>$ docker run -it -v /home/ubuntu/tomcat:/mnt/war tomcat:7.0 /bin/bash\n</code></pre>\n<p>此处相关参数包括：</p>\n<ul>\n<li><code>-i</code>：表示以“交互模式”运行容器</li>\n<li><code>-t</code>：表示容器启动后会进入其命令行</li>\n<li><code>-v</code>：表示需要将本地哪个目录挂载到容器中，格式：-v &lt;宿主机目录&gt;:&lt;容器目录&gt;</li>\n</ul>\n<p>即运行后进入容器命令行，并将主机的 <code>/home/ubuntu/tomcat</code> 挂载到了容器的 <code>/mnt/war</code> 目录。</p>\n<p>然后将部署文件拷贝到主机的 <code>/home/ubuntu/tomcat</code> 目录并继续在容器中操作部署程序。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cd webapps/ROOT/</span></span><br><span class=\"line\"><span class=\"comment\"># rm -rf *</span></span><br><span class=\"line\"><span class=\"comment\"># cp -r /mnt/war/* .</span></span><br><span class=\"line\"><span class=\"comment\"># exit</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建镜像\"><a class=\"markdownIt-Anchor\" href=\"#创建镜像\"></a> 创建镜像</h4>\n<p>此处需要记住刚才所运行容器的 ID，bash 里面 <code>root@0b2d4744734c</code> 的 ‘root@’ 后面的便是容器 ID。如果已经找不到，可使用 <code>docker ps -a</code> 查看之前所运行过的所有容器。</p>\n<p>然后创建镜像。</p>\n<pre><code>$ docker commit 0b2d4744734c timerever/javaweb:1.0\n</code></pre>\n<h3 id=\"运行镜像\"><a class=\"markdownIt-Anchor\" href=\"#运行镜像\"></a> 运行镜像</h3>\n<p>使用刚刚自定的名称运行镜像。</p>\n<pre><code>docker run -it --rm -p 8888:8080 timerever/javaweb:1.0 catalina.sh run\n</code></pre>\n",
            "tags": [
                "Docker",
                "Java Web"
            ]
        }
    ]
}