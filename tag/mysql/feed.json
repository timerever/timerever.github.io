{
    "version": "https://jsonfeed.org/version/1",
    "title": "A Blog • All posts by \"mysql\" tag",
    "description": "Just another blog.",
    "home_page_url": "https://blog.timerever.tk",
    "items": [
        {
            "id": "https://blog.timerever.tk/2022/03/15/trino-deploy-tutorials/",
            "url": "https://blog.timerever.tk/2022/03/15/trino-deploy-tutorials/",
            "title": "Trino 介绍及部署使用",
            "date_published": "2022-03-15T08:15:36.000Z",
            "content_html": "<p>之前我们提到项目上有一个跨库进行 MySQL join 操作的需求，当时选择使用了 MySQL 的 FEDERATED 存储引擎来解决这个问题，具体可以看 <a href=\"/2022/02/28/mysql-federated-storage-engine-tutorials/\">MySQL FEDERATED 存储引擎介绍及使用</a>。但是 FEDERATED 本身只支持 MySQL 数据库，如果我们需要对多个不同种类的数据库进行关联操作，那么还是要依赖第三方组件来进行，比如这次要介绍的 Trino。</p>\n<p>Trino 是基于 Java 开发的高性能的、分布式的大数据 SQL 查询引擎，支持基本上所有的常见数据源以及你所想象不到的中间件存储比如 Kafka，同时也支持在单个查询中使用多个数据源来进行关联查询。</p>\n<p>官网：<a href=\"https://trino.io/\">Trino</a></p>\n<span id=\"more\"></span>\n<h3 id=\"前世今生\"><a class=\"markdownIt-Anchor\" href=\"#前世今生\"></a> 前世今生</h3>\n<p>Trino 的前身是 Facebook 的 Presto。2012 年， Martin Traverso、Dain Sundstrom 和 David Phillips 入职了 Facebook 的大数据基建部门，并和 Eric Hwang 一同开发了 Presto 来解决 Facebook 的海量 Hadoop 数据仓库的低延迟交互分析的问题，随后在 2013 年 11 月将 Presto 开源。但好景不长，在 2018 年 Facebook 的管理层想要对 Presto 项目及其未来拥有更多的控制，并让毫无 Presto 经验的开发者可以直接提交代码，而且这个决定是在没有 Presto 社区参与的情况下做出的。创始人们觉得这和拥有一个健康开放的社区相矛盾，所以为了使 Presto 的成长更加健康，他们决定离开了 Facebook。</p>\n<p>2019 年 1 月，Presto 软件基金会成立了，创始人们决定在未来的 10 个月中不再受雇于任何企业来专门与全球的用户和开发者们接触以及和贡献者合作来扩大和加强社区。随着参与的人员越来越多，Presto 项目也比以前更拥有活力，这个分支叫做 PrestoSQL。</p>\n<img src=\"/2022/03/15/trino-deploy-tutorials/trino-deploy-tutorials-0.png\" class=\"\" title=\"commit 比较\">\n<p>在 PrestoSQL 稳固几个月之后，Facebook 决定通过 Linux 基金会来创建一个具有竞争关系的社区，第一部就是为 Presto 申请了商标。2019 年 9 月，Facebook 在 Linux 基金会成立了 Presto 基金会，这边的分支叫做 PrestoDB。所以 PrestoSQL 不得不改名，最后将名称改为了 Trino。</p>\n<p>最后引用官宣改名文章的最后一句话：<strong>If you love this project, you already love Trino.</strong> ❤️</p>\n<h3 id=\"server-节点安装\"><a class=\"markdownIt-Anchor\" href=\"#server-节点安装\"></a> server 节点安装</h3>\n<p>因为现阶段只是简单地进行试用，所以我们只安装 server 节点，而且 server 节点同时也可以作为 worker 节点使用。</p>\n<h4 id=\"java-环境\"><a class=\"markdownIt-Anchor\" href=\"#java-环境\"></a> Java 环境</h4>\n<p>为什么要单独强调 Java 环境，是因为 Trino 对 Java 环境很挑剔，官网文档要求 64 位的 Java 11 运行环境，且最低版本号为 11.0.11。如果是 Java 12 或者 13、17 等后续版本，官方说可能正常工作，并没有做过测试。同时推荐 <a href=\"https://www.azul.com/downloads/?package=jdk#download-openjdk\">Azul Zulu</a> 的 JDK，官方说只针对 Azul Zulu 的发行版做了测试，可以说是很娇贵了。</p>\n<p>所以为了避免因为 JDK 的问题使程序出现问题，我们还是老老实实按照要求使用 Azul Zulu 的 Open JDK，具体安装过程不再赘述，是用的版本为当前 Java 11 的最新版 11.0.14.1+1。</p>\n<img src=\"/2022/03/15/trino-deploy-tutorials/trino-deploy-tutorials-1.png\" class=\"\" title=\"JDK 版本\">\n<h4 id=\"python-环境\"><a class=\"markdownIt-Anchor\" href=\"#python-环境\"></a> Python 环境</h4>\n<p>Python 环境的要求相对来说就很宽泛了，官方说 2.6.x、2.7.x、或者 3.x 的版本均可，因为 Python 环境只是给启动脚本使用的，并不会影响程序的正常运行。都 2022 年了，所以我们这里使用 Python 3 的最新版即可。</p>\n<img src=\"/2022/03/15/trino-deploy-tutorials/trino-deploy-tutorials-2.png\" class=\"\" title=\"Python 版本\">\n<h4 id=\"安装-trino\"><a class=\"markdownIt-Anchor\" href=\"#安装-trino\"></a> 安装 Trino</h4>\n<p>从官网下载 server 节点压缩包并解压即可。Trino 需要一个目录来存储日志等数据，官方建议放在 Trino 安装目录外，因为这样可以很方便地在后续升级 Trino 版本，具体配置放下面再说。</p>\n<h3 id=\"trino-配置\"><a class=\"markdownIt-Anchor\" href=\"#trino-配置\"></a> Trino 配置</h3>\n<p>安装完 Trino 之后还需要对 Trino 进行一连串的配置才可以运行。首先在安装目录创建 <code>etc</code> 文件夹，用来放置配置信息，然后通过创建对应文件的方式对 Trino 进行配置。</p>\n<h4 id=\"node-节点配置文件\"><a class=\"markdownIt-Anchor\" href=\"#node-节点配置文件\"></a> Node 节点配置文件</h4>\n<p>创建 <code>node.properties</code> 文件配置节点信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 集群的环境名称，同一集群下的节点必须具有相同的环境名</span><br><span class=\"line\">node.environment=test</span><br><span class=\"line\"># 节点的唯一 ID，集群内不能重复</span><br><span class=\"line\">node.id=b0e4c61a-a304-47d3-bfc7-88be4c6a22c1</span><br><span class=\"line\"># 数据存储路径</span><br><span class=\"line\">node.data-dir=/opt/trino-server-374/data</span><br></pre></td></tr></table></figure>\n<h4 id=\"jvm-配置\"><a class=\"markdownIt-Anchor\" href=\"#jvm-配置\"></a> JVM 配置</h4>\n<p>创建 <code>jvm.config</code> 文件存储 JVM 启动参数，在官方样例中删掉了 OOM 相关的参数并调整了下内存需求：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-server</span><br><span class=\"line\">-Xmx4G</span><br><span class=\"line\">-XX:-UseBiasedLocking</span><br><span class=\"line\">-XX:+UseG1GC</span><br><span class=\"line\">-XX:G1HeapRegionSize=32M</span><br><span class=\"line\">-XX:+ExplicitGCInvokesConcurrent</span><br><span class=\"line\">-XX:-OmitStackTraceInFastThrow</span><br><span class=\"line\">-XX:ReservedCodeCacheSize=512M</span><br><span class=\"line\">-XX:PerMethodRecompilationCutoff=10000</span><br><span class=\"line\">-XX:PerBytecodeRecompilationCutoff=10000</span><br><span class=\"line\">-Djdk.attach.allowAttachSelf=true</span><br><span class=\"line\">-Djdk.nio.maxCachedBufferSize=2000000</span><br></pre></td></tr></table></figure>\n<h4 id=\"config-配置文件\"><a class=\"markdownIt-Anchor\" href=\"#config-配置文件\"></a> Config 配置文件</h4>\n<p>创建 <code>config.properties</code> 文件，储存的是一些杂七杂八的配置。因为我们只有一个节点做测试，即当 server 又当 worker，所以使用下列配置，端口按需调整：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 标识为协调员，可以接受客户端请求并管理查询</span><br><span class=\"line\">coordinator=true</span><br><span class=\"line\"># 作为协调员的同时可作为 worker 节点使用</span><br><span class=\"line\">node-scheduler.include-coordinator=true</span><br><span class=\"line\">http-server.http.port=8080</span><br><span class=\"line\">query.max-memory=2GB</span><br><span class=\"line\">query.max-memory-per-node=2GB</span><br><span class=\"line\"># 协调员的地址，注册发现使用</span><br><span class=\"line\">discovery.uri=http://127.0.0.1:8080</span><br></pre></td></tr></table></figure>\n<h4 id=\"日志等级\"><a class=\"markdownIt-Anchor\" href=\"#日志等级\"></a> 日志等级</h4>\n<p>创建 <code>log.properties</code> 文件调整日志等级，可选，默认为 <code>INFO</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">io.trino=INFO</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据源配置\"><a class=\"markdownIt-Anchor\" href=\"#数据源配置\"></a> 数据源配置</h4>\n<p>Trino 支持的数据源非常的多，具体可以看官方文档 <a href=\"https://trino.io/docs/current/connector.html\">Connectors</a>，这里我们只配置一个 MySQL 和一个 PostgreSQL 作为测试。</p>\n<p>首先创建 <code>catalog</code> 文件夹，然后创建 <code>mysql.properties</code> 文件，文件名的 <code>mysql</code> 前缀为 catalog 名称，可以自由指定。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 指定为 MySQL</span><br><span class=\"line\">connector.name=mysql</span><br><span class=\"line\"># JDBC 连接地址，注意，MySQL 作为数据源时不能指定具体 database</span><br><span class=\"line\">connection-url=jdbc:mysql://192.168.1.202:3306?useSSL=false</span><br><span class=\"line\">connection-user=root</span><br><span class=\"line\">connection-password=root</span><br></pre></td></tr></table></figure>\n<p>然后再创建 <code>postgresql.properties</code> 文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connector.name=postgresql</span><br><span class=\"line\">connection-url=jdbc:postgresql://192.168.1.202:5432/test</span><br><span class=\"line\">connection-user=postgres</span><br><span class=\"line\">connection-password=postgres</span><br></pre></td></tr></table></figure>\n<h4 id=\"启动-trino\"><a class=\"markdownIt-Anchor\" href=\"#启动-trino\"></a> 启动 Trino</h4>\n<p>可以通过运行 <code>bin</code> 目录下的 <code>launcher</code> 文件启动：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">后台运行</span></span><br><span class=\"line\">ubuntu@CRUCIAL:/opt/trino-server-374/bin$ ./launcher start</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">前台运行</span></span><br><span class=\"line\">ubuntu@CRUCIAL:/opt/trino-server-374/bin$ ./launcher run</span><br></pre></td></tr></table></figure>\n<p>看到显示 <code>SERVER STARTED</code> 后就说明 Trino 正常启动了，可以通过浏览器直接访问 HTTP 端口来查看集群状态，用户名随意输入：</p>\n<img src=\"/2022/03/15/trino-deploy-tutorials/trino-deploy-tutorials-3.png\" class=\"\" title=\"web ui\">\n<h3 id=\"trino-使用\"><a class=\"markdownIt-Anchor\" href=\"#trino-使用\"></a> Trino 使用</h3>\n<p>我们可以通过两种方式来使用 Trino，使用官方的 CLI 命令工具，或者通过 JDBC 驱动在 Java 程序中使用。</p>\n<h4 id=\"cli-工具\"><a class=\"markdownIt-Anchor\" href=\"#cli-工具\"></a> CLI 工具</h4>\n<p>CLI 工具需要 Java 8 或更高版本作为运行环境，我们只需要下载官方提供的 jar 包即可直接使用。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu@CRUCIAL:/opt/trino-server-374$ wget https://repo1.maven.org/maven2/io/trino/trino-cli/374/trino-cli-374-executable.jar</span><br><span class=\"line\">ubuntu@CRUCIAL:/opt/trino-server-374$ chmod +x trino-cli-374-executable.jar</span><br><span class=\"line\">ubuntu@CRUCIAL:/opt/trino-server-374$ ./trino-cli-374-executable.jar --server localhost:8080 --execute &#x27;SHOW TABLES FROM mysql.test&#x27;</span><br><span class=\"line\">ubuntu@CRUCIAL:/opt/trino-server-374$ ./trino-cli-374-executable.jar --server localhost:8080 --execute &#x27;SELECT * FROM mysql.test.user&#x27;</span><br></pre></td></tr></table></figure>\n<p>其中，<code>mysql</code> 指的是我们在 catlog 文件夹创建的文件名，<code>test</code> 为我们 MySQL 的数据库名称，<code>user</code> 为表名。</p>\n<h4 id=\"jdbc-驱动\"><a class=\"markdownIt-Anchor\" href=\"#jdbc-驱动\"></a> JDBC 驱动</h4>\n<p>CLI 工具的泛用性不强，真要产品化使用还是得采用 JDBC 方式。首先按照官方，添加 JDBC 驱动：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.trino<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>trino-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>374<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后配置 JDBC 连接地址。这里可以有多种方案来配置，其中 <code>catalog</code> 为文件名，<code>schema</code> 相当于 MySQL 的 database：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc:trino://host:port</span><br><span class=\"line\">jdbc:trino://host:port/catalog</span><br><span class=\"line\">jdbc:trino://host:port/catalog/schema</span><br></pre></td></tr></table></figure>\n<p>用户名可以任意输入，然后就可以正常使用了。</p>\n<h3 id=\"高级配置\"><a class=\"markdownIt-Anchor\" href=\"#高级配置\"></a> 高级配置</h3>\n<p>上面的流程是可以正常使用的，但是细节上处理的都不到位，比如默认是匿名访问的，用户名可以任意输入；默认没有权限控制，可以访问所有的 catalog 等等，所以我们需要进行一下高级配置。</p>\n<h4 id=\"配置认证方式\"><a class=\"markdownIt-Anchor\" href=\"#配置认证方式\"></a> 配置认证方式</h4>\n<p>Trino 支持很多种的认证方式，基本上常见的都支持。为了减少应用配置复杂度，我们仍然选择通用的用户名/密码方式进行认证。</p>\n<p>首先打开我们的 <code>config.properties</code> 文件，添加认证配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http-server.authentication.type=PASSWORD</span><br></pre></td></tr></table></figure>\n<p>然后仍然是在 <code>etc</code> 目录下创建 <code>password-authenticator.properties</code> 文件，指定密码来源：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 采用文件的方式</span><br><span class=\"line\">password-authenticator.name=file</span><br><span class=\"line\">指定密码文件位置</span><br><span class=\"line\">file.password-file=/opt/trino-server-374/etc/password.db</span><br></pre></td></tr></table></figure>\n<p>然后创建密码文件，我们可以使用 <a href=\"https://httpd.apache.org/\">Apache HTTP Server</a> 的 <a href=\"https://httpd.apache.org/docs/current/programs/htpasswd.html\">htpasswd</a> 工具来生成密码文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch password.db</span><br><span class=\"line\">htpasswd -B -C 10 password.db user</span><br></pre></td></tr></table></figure>\n<p><code>user</code> 为我们想要创建的用户名，然后输入密码即可。</p>\n<h4 id=\"开启-tls-支持\"><a class=\"markdownIt-Anchor\" href=\"#开启-tls-支持\"></a> 开启 TLS 支持</h4>\n<p>当采用用户名/密码的方式进行认证时，Trino 强制要求我们使用 TLS，所以我们需要对其进行配置。</p>\n<p>首先我们需要创建 HTTPS 证书，由于是本地测试，所以我们直接自己签发一个。Trino 支持 PEM 文件和 JKS 文件，我们使用标准的 PEM 文件进行配置。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成私钥</span></span><br><span class=\"line\">ubuntu@CRUCIAL:/opt/trino-server-374/etc/ssl$ openssl genrsa -out server.key 2048</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成 CSR</span> </span><br><span class=\"line\">ubuntu@CRUCIAL:/opt/trino-server-374/etc/ssl$ openssl req -new -key server.key -out server.csr</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自己派发证书</span></span><br><span class=\"line\">ubuntu@CRUCIAL:/opt/trino-server-374/etc/ssl$ openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成 PEM 格式文件</span></span><br><span class=\"line\">ubuntu@CRUCIAL:/opt/trino-server-374/etc/ssl$ cat server.key server.crt &gt; server.pem</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">校验 PEM 文件</span></span><br><span class=\"line\">ubuntu@CRUCIAL:/opt/trino-server-374/etc/ssl$ openssl rsa -in server.pem -check -noout</span><br><span class=\"line\">ubuntu@CRUCIAL:/opt/trino-server-374/etc/ssl$ openssl x509 -in server.pem -text -noout</span><br></pre></td></tr></table></figure>\n<p>生成完证书后，在 <code>config.properties</code> 文件中添加如下配置即可开启 TLS 支持：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 开启 https</span><br><span class=\"line\">http-server.https.enabled=true</span><br><span class=\"line\"># 指定 https 端口</span><br><span class=\"line\">http-server.https.port=8443</span><br><span class=\"line\"># 指定证书文件</span><br><span class=\"line\">http-server.https.keystore.path=/opt/trino-server-374/etc/ssl/server.pem</span><br></pre></td></tr></table></figure>\n<p>最后修改 JDBC 连接地址，由于是自签证书，所以我们需要关闭证书校验：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc:trino://127.0.0.1:8443?SSL=true&amp;SSLVerification=NONE</span><br></pre></td></tr></table></figure>\n<p>同理，CLI 命令修改为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./trino-cli-374-executable.jar --server https://localhost:8443 --user user --password --execute &#x27;SELECT * FROM mysql.test.user&#x27; --insecure</span><br></pre></td></tr></table></figure>\n<h4 id=\"权限控制\"><a class=\"markdownIt-Anchor\" href=\"#权限控制\"></a> 权限控制</h4>\n<p>默认在不开启权限控制的情况下，用户都拥有最大权限，这显示是很不安全的，所以需要配置权限控制。</p>\n<p>创建 <code>access-control.properties</code> 文件，指定权限控制文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">access-control.name=file</span><br><span class=\"line\"># 指定控制文件位置</span><br><span class=\"line\">security.config-file=/opt/trino-server-374/etc/rules.json</span><br><span class=\"line\"># 自动刷新间隔，不再需要重启 Trino 即可自动生效</span><br><span class=\"line\">security.refresh-period=1s</span><br></pre></td></tr></table></figure>\n<p>创建 <code>group-provider.properties</code> 文件，指定群组配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">group-provider.name=file</span><br><span class=\"line\">file.group-file=/opt/trino-server-374/etc/group.txt</span><br></pre></td></tr></table></figure>\n<p>然后编辑群组映射关系 <code>group.txt</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">admin:admin-user</span><br></pre></td></tr></table></figure>\n<p>然后创建 <code>rules.json</code> 文件编写规则，具体的权限控制比较复杂，可以参考 <a href=\"https://trino.io/docs/current/security/file-system-access-control.html\">File-based access control</a>，这里我们只写一个基础的权限控制规则，实现 <code>admin</code> 组的用户可以进行所有操作，任意用户可以访问 <code>mysql</code>，user 可以读取 <code>postgresql</code> 的数据，<code>system</code> 没有用户可以访问。权限匹配是从上到下的，如果没有匹配到，则默认拒绝权限。具体配置如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;catalogs&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;group&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;admin&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;allow&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;all&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;catalog&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;mysql&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;allow&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;all&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;user&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;user&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;catalog&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;postgresql&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;allow&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;read-only&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;catalog&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;system&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;allow&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>再创建用户 user2 及 admin-user，来测试一下效果：</p>\n<p><strong>这是开启权限控制之前 user 可以看到的</strong></p>\n<img src=\"/2022/03/15/trino-deploy-tutorials/trino-deploy-tutorials-4.png\" class=\"\" title=\"开启权限控制之前 user 可见范围\">\n<p><strong>这是开启权限控制之后 user 可以看到的</strong></p>\n<img src=\"/2022/03/15/trino-deploy-tutorials/trino-deploy-tutorials-5.png\" class=\"\" title=\"开启权限控制之后 user 可见范围\">\n<p><strong>这是 user2 可以看到的</strong></p>\n<img src=\"/2022/03/15/trino-deploy-tutorials/trino-deploy-tutorials-6.png\" class=\"\" title=\"user2 可见范围\">\n<p><strong>最后这是 admin-user 可以看到的</strong></p>\n<img src=\"/2022/03/15/trino-deploy-tutorials/trino-deploy-tutorials-7.png\" class=\"\" title=\"admin-user 可见范围\">\n",
            "tags": [
                "MySQL",
                "Tutorial"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2022/02/28/mysql-federated-storage-engine-tutorials/",
            "url": "https://blog.timerever.tk/2022/02/28/mysql-federated-storage-engine-tutorials/",
            "title": "MySQL FEDERATED 存储引擎介绍及使用",
            "date_published": "2022-02-28T06:55:51.000Z",
            "content_html": "<p>项目上遇到了一个需求，需要在 MySQL（不同实例）进行跨库 join 操作。我们都知道如果是同一实例，那么 MySQL 跨库查询肯定是没有问题的，但是不同实例的跨库查询之前一直没有做过。不过以前还在用 Oracle 的时候，Oracle 有个功能叫做 DATABASE LINK（参见 <a href=\"https://docs.oracle.com/cd/B19306_01/server.102/b14200/statements_5005.htm\">CREATE DATABASE LINK</a>），是将远程数据库映射到本地，这样就可以在一个实例中访问其他数据库了。在谷歌搜索 MySQL 跨库查询的时候，发现 MySQL 也有类似的东西，叫做 FEDERATED 存储引擎。所以我们就可以使用 FEDERATED 将需要 join 的远端表映射到本地数据库，这样在做查询的时候使用上就跟本地表一样了。</p>\n<p>官方文档：<a href=\"https://dev.mysql.com/doc/refman/8.0/en/federated-storage-engine.html\">The FEDERATED Storage Engine</a></p>\n<span id=\"more\"></span>\n<h3 id=\"federated-表介绍\"><a class=\"markdownIt-Anchor\" href=\"#federated-表介绍\"></a> FEDERATED 表介绍</h3>\n<p>FEDERATED 表在使用上与普通表没有区别，不过 FEDERATED 表只会在本地存储表结构定义而不会直接存储数据，所以在每次查询时数据均需要从远端获取。<br />\nFEDERATED 表支持 DML 语句，DDL 语句只支持 <code>DROP TABLE</code>，效果为删除本地的 FEDERATED 表。</p>\n<p>官方架构如下：</p>\n<img src=\"/2022/02/28/mysql-federated-storage-engine-tutorials/mysql-federated-storage-engine-tutorials-1.png\" class=\"\" title=\"FEDERATED 架构\">\n<h3 id=\"准备工作\"><a class=\"markdownIt-Anchor\" href=\"#准备工作\"></a> 准备工作</h3>\n<p>在使用 FEDERATED 表前，需要先看一下是否满足条件：</p>\n<ul>\n<li>创建 FEDERATED 表的 MySQL 实例需要支持 FEDERATED 引擎，如果是安装的二进制包则没有问题，如果是从源码编译，需要在编译时加上 <code>-DWITH_FEDERATED_STORAGE_ENGINE</code> 参数</li>\n<li>创建 FEDERATED 表的 MySQL 实例需要打开 FEDERATED 引擎支持，MySQL 默认没有打开，需要在启动时追加 <code>--federated</code> 命令，或是在配置文件的 <code>[mysqld]</code> 小节添加 <code>federated</code> 并重启服务器。可以在 MySQL 中执行 <code>SHOW ENGINES</code> 语句来查询支持状态</li>\n<li>FEDERATED 表支持的远端数据库只能为 MySQL，同时支持 <code>MyISAM</code> 和 <code>InnoDB</code> 存储引擎</li>\n<li>经测试，5.7 版本的数据库连接 8.0 版本会报 SSL 错误，所以建议使用 8.0 版本</li>\n</ul>\n<h3 id=\"创建-federated-表\"><a class=\"markdownIt-Anchor\" href=\"#创建-federated-表\"></a> 创建 FEDERATED 表</h3>\n<p>创建 FEDERATED 表有两种方式，但是大同小异，区别只是远端数据库连接是存储在表定义中还是存储到单独的位置。因为 FEDERATED 是表维度，所以为了复用远端连接，建议采用 <code>CREATE SERVER</code> 的方式创建 FEDERATED表。</p>\n<h4 id=\"使用-create-server-的方式创建-federated-表\"><a class=\"markdownIt-Anchor\" href=\"#使用-create-server-的方式创建-federated-表\"></a> 使用 CREATE SERVER 的方式创建 FEDERATED 表</h4>\n<p>首先我们需要先创建远端数据库连接，创建远端连接的格式为：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> SERVER</span><br><span class=\"line\">server_name</span><br><span class=\"line\"><span class=\"keyword\">FOREIGN</span> DATA WRAPPER wrapper_name</span><br><span class=\"line\">OPTIONS (option [, option] ...)</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> SERVER fedlink</span><br><span class=\"line\"><span class=\"keyword\">FOREIGN</span> DATA WRAPPER mysql</span><br><span class=\"line\">OPTIONS (<span class=\"keyword\">USER</span> <span class=\"string\">&#x27;fed_user&#x27;</span>, PASSWORD <span class=\"string\">&#x27;password&#x27;</span>, HOST <span class=\"string\">&#x27;remote_host&#x27;</span>, PORT <span class=\"number\">9306</span>, DATABASE <span class=\"string\">&#x27;federated&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>我们需要记住输入的 <code>server_name</code> 即 fedlink，然后我们需要拿到要创建的源表的表结构，可以使用 <code>SHOW CREATE TABLE table_name</code> 来打印，然后将 <code>ENGINE</code> 改为 FEDERATED，添加 <code>CONNECTION='fedlink/table_name'</code>，执行后即在本地生成了 FEDERATED 表。例如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> test_table (</span><br><span class=\"line\">    id     <span class=\"type\">INT</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">    name   <span class=\"type\">VARCHAR</span>(<span class=\"number\">32</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    other  <span class=\"type\">INT</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;0&#x27;</span>,</span><br><span class=\"line\">    <span class=\"keyword\">PRIMARY</span> KEY  (id),</span><br><span class=\"line\">    INDEX name (name),</span><br><span class=\"line\">    INDEX other_key (other)</span><br><span class=\"line\">)</span><br><span class=\"line\">ENGINE<span class=\"operator\">=</span>FEDERATED</span><br><span class=\"line\"><span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8mb4</span><br><span class=\"line\">CONNECTION<span class=\"operator\">=</span><span class=\"string\">&#x27;fedlink/test_table&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>这里创建的表名即 <code>CREATE TABLE</code> 后面的表名可以与源表不一样，只需在 <code>CONNECTION</code> 中指定源表名即可。</p>\n<h4 id=\"使用-connection-的方式创建-federated-表\"><a class=\"markdownIt-Anchor\" href=\"#使用-connection-的方式创建-federated-表\"></a> 使用 CONNECTION 的方式创建 FEDERATED 表</h4>\n<p>如果没有 <code>CREATE SERVER</code> 权限，也可以直接使用 CONNECTION 的方式创建 FEDERATED 表，只需将上面建表语句中 <code>CONNECTION</code> 的值改为完整连接即可，例如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> federated_table (</span><br><span class=\"line\">    id     <span class=\"type\">INT</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">    name   <span class=\"type\">VARCHAR</span>(<span class=\"number\">32</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    other  <span class=\"type\">INT</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;0&#x27;</span>,</span><br><span class=\"line\">    <span class=\"keyword\">PRIMARY</span> KEY  (id),</span><br><span class=\"line\">    INDEX name (name),</span><br><span class=\"line\">    INDEX other_key (other)</span><br><span class=\"line\">)</span><br><span class=\"line\">ENGINE<span class=\"operator\">=</span>FEDERATED</span><br><span class=\"line\"><span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8mb4</span><br><span class=\"line\">CONNECTION<span class=\"operator\">=</span><span class=\"string\">&#x27;mysql://fed_user@remote_host:9306/federated/test_table&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>需要注意的是：</strong></p>\n<ul>\n<li>采用这种方式创建的 FEDERATED 表，可以通过 <code>SHOW CREATE TABLE</code> 看到原始的连接信息</li>\n<li>如果密码中包含 <code>@</code>，由于 <code>@</code> 需要作为 url 的分界符，所以这种情况下只能使用 <code>CREATE SERVER</code> 的方式创建 FEDERATED 表</li>\n</ul>\n",
            "tags": [
                "MySQL",
                "Tutorial"
            ]
        }
    ]
}