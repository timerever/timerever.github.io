<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>A Blog • Posts by &#34;sso&#34; tag</title>
        <link>https://blog.timerever.tk</link>
        <description>Just another blog.</description>
        <language>zh-CN</language>
        <pubDate>Wed, 05 Jan 2022 07:00:00 +0000</pubDate>
        <lastBuildDate>Wed, 05 Jan 2022 07:00:00 +0000</lastBuildDate>
        <category>Java</category>
        <category>HttpClient</category>
        <category>Jackson</category>
        <category>Docker</category>
        <category>Design Pattern</category>
        <category>Dockerfile</category>
        <category>Java Web</category>
        <category>Linux</category>
        <category>C</category>
        <category>Android</category>
        <category>Huawei</category>
        <category>CyanogenMod</category>
        <category>Factory Patterns</category>
        <category>Hibernate</category>
        <category>Git</category>
        <category>GitHub</category>
        <category>Keycloak</category>
        <category>OAuth2</category>
        <category>SSO</category>
        <category>VMware</category>
        <category>vmdk</category>
        <category>wget</category>
        <category>Regular Expression</category>
        <category>Algorithm</category>
        <category>Sort</category>
        <category>Ubuntu</category>
        <category>Ruby</category>
        <category>Jekyll</category>
        <category>Windows</category>
        <category>Regedit</category>
        <category>PowerShell</category>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2022/01/05/keycloak-custom-idp/</guid>
            <title>Keycloak 配置自定义社交帐号登录组件</title>
            <link>https://blog.timerever.tk/2022/01/05/keycloak-custom-idp/</link>
            <category>Java</category>
            <category>Keycloak</category>
            <category>OAuth2</category>
            <category>SSO</category>
            <pubDate>Wed, 05 Jan 2022 07:00:00 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;由于 Keycloak 由红帽开发维护，所以其自带的 Social Identity Providers 都是国外的平台。现有需求对接公司 SSO，且由于国内 OAuth2 协议实现均不标准（公司的也是），所以无法使用 Keycloak 的 OpenID Connect 自定义接入，需要自己扩展 Identity Provider 实现。和国内的微信、钉钉、飞书等系统接入代码类似，但发现现有的接入组件没有实现 &lt;code&gt;UserAttributeMapper&lt;/code&gt;，且版本变动，代码并不兼容，所以参考 Github 的实现进行开发。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Keycloak 使用当前最新版：16.1.0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;一、自定义-IdentityProvider&#34;&gt;&lt;a href=&#34;#一、自定义-IdentityProvider&#34; class=&#34;headerlink&#34; title=&#34;一、自定义 IdentityProvider&#34;&gt;&lt;/a&gt;一、自定义 IdentityProvider&lt;/h2&gt;&lt;h3 id=&#34;0-引入依赖&#34;&gt;&lt;a href=&#34;#0-引入依赖&#34; class=&#34;headerlink&#34; title=&#34;0. 引入依赖&#34;&gt;&lt;/a&gt;0. 引入依赖&lt;/h3&gt;&lt;p&gt;引入 Keycloak 相关依赖，依赖版本要与使用的 Keycloak 版本保持一致，scope 使用 &lt;code&gt;provided&lt;/code&gt; 即可。&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.keycloak&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;keycloak-services&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;$&amp;#123;keycloak.version&amp;#125;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;provided&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.keycloak&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;keycloak-server-spi&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;$&amp;#123;keycloak.version&amp;#125;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;provided&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.keycloak&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;keycloak-server-spi-private&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;$&amp;#123;keycloak.version&amp;#125;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;provided&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;0-5-自定义-IdentityProvider&#34;&gt;&lt;a href=&#34;#0-5-自定义-IdentityProvider&#34; class=&#34;headerlink&#34; title=&#34;0.5. 自定义 IdentityProvider&#34;&gt;&lt;/a&gt;0.5. 自定义 IdentityProvider&lt;/h3&gt;&lt;p&gt;由于后续需要，我们先新建一个 IdentityProvider 放在这里。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyIdentityProvider&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AbstractOAuth2IdentityProvider&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;OAuth2IdentityProviderConfig&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SocialIdentityProvider&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;OAuth2IdentityProviderConfig&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyIdentityProvider&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(KeycloakSession session, OAuth2IdentityProviderConfig config)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;super&lt;/span&gt;(session, config);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;getDefaultScopes&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;1-自定义-IdentityProviderFactory&#34;&gt;&lt;a href=&#34;#1-自定义-IdentityProviderFactory&#34; class=&#34;headerlink&#34; title=&#34;1. 自定义 IdentityProviderFactory&#34;&gt;&lt;/a&gt;1. 自定义 IdentityProviderFactory&lt;/h3&gt;&lt;p&gt;我们先来看一下 GitHub 的 &lt;code&gt;GitHubIdentityProviderFactory&lt;/code&gt;，很简单，有一个唯一的 &lt;code&gt;PROVIDER_ID&lt;/code&gt;，然后 &lt;code&gt;getName&lt;/code&gt; 方法返回了一个名称用于展示。&lt;/p&gt;
&lt;img src=&#34;/2022/01/05/keycloak-custom-idp/keycloak-custom-idp-1.png&#34; class=&#34;&#34; title=&#34;Github IdentityProviderFactory&#34;&gt;

&lt;p&gt;我们照着改一下即可。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyIdentityProviderFactoryFactory&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AbstractIdentityProviderFactory&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;MyIdentityProvider&lt;/span&gt;&amp;gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SocialIdentityProviderFactory&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;MyIdentityProvider&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; String PROVIDER_ID = &lt;span class=&#34;string&#34;&gt;&amp;quot;my-idp&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;My IDP&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; MyIdentityProvider &lt;span class=&#34;title&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(KeycloakSession session, IdentityProviderModel model)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MyIdentityProvider(session, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; OAuth2IdentityProviderConfig(model));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; IdentityProviderModel &lt;span class=&#34;title&#34;&gt;createConfig&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; OAuth2IdentityProviderConfig();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;getId&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; PROVIDER_ID;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;2-自定义-IdentityProvider&#34;&gt;&lt;a href=&#34;#2-自定义-IdentityProvider&#34; class=&#34;headerlink&#34; title=&#34;2. 自定义 IdentityProvider&#34;&gt;&lt;/a&gt;2. 自定义 IdentityProvider&lt;/h3&gt;&lt;h4 id=&#34;先定义并在构造时传入-Authorize、Token-及-Profile-的-Url。&#34;&gt;&lt;a href=&#34;#先定义并在构造时传入-Authorize、Token-及-Profile-的-Url。&#34; class=&#34;headerlink&#34; title=&#34;先定义并在构造时传入 Authorize、Token 及 Profile 的 Url。&#34;&gt;&lt;/a&gt;先定义并在构造时传入 Authorize、Token 及 Profile 的 Url。&lt;/h4&gt;&lt;img src=&#34;/2022/01/05/keycloak-custom-idp/keycloak-custom-idp-2.png&#34; class=&#34;&#34; title=&#34;AUTH URL&#34;&gt;

&lt;h4 id=&#34;重写必须要求实现的抽象方法&#34;&gt;&lt;a href=&#34;#重写必须要求实现的抽象方法&#34; class=&#34;headerlink&#34; title=&#34;重写必须要求实现的抽象方法&#34;&gt;&lt;/a&gt;重写必须要求实现的抽象方法&lt;/h4&gt;&lt;p&gt;重写 &lt;code&gt;getDefaultScopes&lt;/code&gt; 的抽象方法，返回自定义 SCOPE。&lt;/p&gt;
&lt;h4 id=&#34;按需重写方法&#34;&gt;&lt;a href=&#34;#按需重写方法&#34; class=&#34;headerlink&#34; title=&#34;按需重写方法&#34;&gt;&lt;/a&gt;按需重写方法&lt;/h4&gt;&lt;p&gt;首先重写 &lt;code&gt;supportsExternalExchange&lt;/code&gt;方法，写死返回 &lt;code&gt;true&lt;/code&gt;。这个官方文档也没有找到注释，但是各实现类均这么重写的，所以这里我们也一起重写。&lt;/p&gt;
&lt;p&gt;由于我们继承了 &lt;code&gt;AbstractOAuth2IdentityProvider&lt;/code&gt;，剩下的可以直接看抽象类的实现，按需重写非标准定义下无法使用默认实现调用的方法。&lt;/p&gt;
&lt;p&gt;比如我需要对应自己系统返回的 &lt;code&gt;User&lt;/code&gt; 和 Keycloak 的 &lt;code&gt;User&lt;/code&gt; 对象的字段映射关系，所以重写 &lt;code&gt;extractIdentityFromProfile&lt;/code&gt; 方法。这个方法也是默认空实现，一定要重写的。我们可以直接拷贝 GitHub 的实现再进行修改，同时，如果我们需要额外存储用户信息，可以使用 &lt;code&gt;setUserAttribute&lt;/code&gt; 方法进行。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; BrokeredIdentityContext &lt;span class=&#34;title&#34;&gt;extractIdentityFromProfile&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(EventBuilder event, JsonNode profile)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    BrokeredIdentityContext user = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; BrokeredIdentityContext(getJsonProperty(profile, &lt;span class=&#34;string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String username = getJsonProperty(profile, &lt;span class=&#34;string&#34;&gt;&amp;quot;login&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    user.setUsername(username);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    user.setName(getJsonProperty(profile, &lt;span class=&#34;string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    user.setEmail(getJsonProperty(profile, &lt;span class=&#34;string&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    user.setIdpConfig(getConfig());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    user.setIdp(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    user.setUserAttribute(USER_ATTRIBUTE_EMPLOY_ID, getJsonProperty(profile, USER_ATTRIBUTE_EMPLOY_ID));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    AbstractJsonUserAttributeMapper.storeUserProfileForMapper(user, profile, getConfig().getAlias());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; user;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;3-重写回调方法&#34;&gt;&lt;a href=&#34;#3-重写回调方法&#34; class=&#34;headerlink&#34; title=&#34;3. 重写回调方法&#34;&gt;&lt;/a&gt;3. 重写回调方法&lt;/h3&gt;&lt;p&gt;可以发现，我们之前重写的方法，都是接受到回调之后获取 token、获取用户信息的逻辑，如果我们的回调接口传参也不是标准实现的话，那么我们可以重写回调方法。&lt;/p&gt;
&lt;h4 id=&#34;自定义-Endpoint&#34;&gt;&lt;a href=&#34;#自定义-Endpoint&#34; class=&#34;headerlink&#34; title=&#34;自定义 Endpoint&#34;&gt;&lt;/a&gt;自定义 Endpoint&lt;/h4&gt;&lt;p&gt;编写自定义 Endpoint 类，继承 &lt;code&gt;AbstractOAuth2IdentityProvider&lt;/code&gt; 内部 &lt;code&gt;Endpoint&lt;/code&gt; 类。然后重写 &lt;code&gt;authResponse&lt;/code&gt; 方法，自定义接收参数，然后仿照默认实现，通过 &lt;code&gt;authorizationCode&lt;/code&gt; 换取用户信息并通过 &lt;code&gt;callback.authenticated(federatedIdentity)&lt;/code&gt; 返回。&lt;/p&gt;
&lt;h4 id=&#34;注册自定义-Endpoint&#34;&gt;&lt;a href=&#34;#注册自定义-Endpoint&#34; class=&#34;headerlink&#34; title=&#34;注册自定义 Endpoint&#34;&gt;&lt;/a&gt;注册自定义 Endpoint&lt;/h4&gt;&lt;p&gt;重写 &lt;code&gt;AbstractOAuth2IdentityProvider&lt;/code&gt; 的 &lt;code&gt;callback&lt;/code&gt; 方法，返回自定义 Endpoint。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;title&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(RealmModel realm, AuthenticationCallback callback, EventBuilder event)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MyEndpoint(callback, realm, event);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;4-注册-IdentityProviderFactory&#34;&gt;&lt;a href=&#34;#4-注册-IdentityProviderFactory&#34; class=&#34;headerlink&#34; title=&#34;4. 注册 IdentityProviderFactory&#34;&gt;&lt;/a&gt;4. 注册 IdentityProviderFactory&lt;/h3&gt;&lt;p&gt;在 &lt;code&gt;resources&lt;/code&gt; 文件夹下，新建 &lt;code&gt;MEAT-INF&lt;/code&gt; 文件夹，并在其下面建立 &lt;code&gt;services&lt;/code&gt; 文件。新增 &lt;code&gt;org.keycloak.broker.social.SocialIdentityProviderFactory&lt;/code&gt; 文件，在里面直接填写 &lt;code&gt;MyIdentityProviderFactory&lt;/code&gt; 的全限定类名即可。&lt;/p&gt;
&lt;img src=&#34;/2022/01/05/keycloak-custom-idp/keycloak-custom-idp-3.png&#34; class=&#34;&#34; title=&#34;注册 IdentityProviderFactory&#34;&gt;

&lt;hr&gt;
&lt;p&gt;大体流程就是这样，OAuth2 认证后回调默认的 &lt;code&gt;EndPoint&lt;/code&gt; 类的 &lt;code&gt;authResponse&lt;/code&gt; 方法。如果大体流程标准，且回调参数标准，可以直接参照默认实现，按需重写所调用的 &lt;code&gt;IdentityProvider&lt;/code&gt; 方法；如果回调参数会流程不标准，则需要自定义 EndPoint 并进行注册，再重写 &lt;code&gt;authResponse&lt;/code&gt; 方法。&lt;/p&gt;
&lt;h2 id=&#34;二、自定义-IdentityProvider-配置页&#34;&gt;&lt;a href=&#34;#二、自定义-IdentityProvider-配置页&#34; class=&#34;headerlink&#34; title=&#34;二、自定义 IdentityProvider 配置页&#34;&gt;&lt;/a&gt;二、自定义 IdentityProvider 配置页&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在新建&amp;#x2F;编辑 IdentityProvider 时，页面元素是可以配置的，我们可以按需增减页面需要填写的字段。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先打开 Keycloak 路径下的 &lt;code&gt;themes\base\admin\resources\partials\&lt;/code&gt; 文件夹，我们还是将 &lt;code&gt;realm-identity-provider-github.html&lt;/code&gt; 及 &lt;code&gt;realm-identity-provider-github-ext.html&lt;/code&gt; 复制并重命名为 &lt;code&gt;realm-identity-provider-my-idp.html&lt;/code&gt; 及 &lt;code&gt;realm-identity-provider-my-idp-ext.html&lt;/code&gt;。如果不需要自定义，那么保持原样即可。如果需要修改页面字段展示，打开 &lt;code&gt;realm-identity-provider-my-idp.html&lt;/code&gt; 文件，将文件内容替换为 &lt;code&gt;realm-identity-provider-social.html&lt;/code&gt; 文件的内容，然后再对其进行修改即可。我们可以看到，默认页面就是引用了这个文件的内容。&lt;/p&gt;
&lt;h2 id=&#34;三、部署-jar-文件&#34;&gt;&lt;a href=&#34;#三、部署-jar-文件&#34; class=&#34;headerlink&#34; title=&#34;三、部署 jar 文件&#34;&gt;&lt;/a&gt;三、部署 jar 文件&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;以 standalone 模式为例：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将打包后的 jar 文件复制到 &lt;code&gt;standalone\deployments\&lt;/code&gt; 文件夹，不需要重启服务，Keycloak 会自动热部署，并在同级目录生成 &lt;code&gt;文件名.deployed&lt;/code&gt; 文件。&lt;/p&gt;
&lt;p&gt;如果后续调用时出现 问题，可以参考 &lt;a href=&#34;https://stackoverflow.com/questions/57778240/noclassdeffounderror-in-a-provider-jar-when-using-a-class-from-org-keycloak-auth&#34;&gt;NoClassDefFoundError in a provider jar&lt;/a&gt; 在 &lt;code&gt;maven-jar-plugin&lt;/code&gt; 插件配置依赖即可。&lt;/p&gt;
&lt;h2 id=&#34;四、使用自定义-IDP&#34;&gt;&lt;a href=&#34;#四、使用自定义-IDP&#34; class=&#34;headerlink&#34; title=&#34;四、使用自定义 IDP&#34;&gt;&lt;/a&gt;四、使用自定义 IDP&lt;/h2&gt;&lt;p&gt;回到 Keycloak 后台，右上角点击 &lt;code&gt;Server Info&lt;/code&gt;，切到 &lt;code&gt;Providers&lt;/code&gt; Tab，如果在 &lt;code&gt;social&lt;/code&gt; 栏看到了 &lt;code&gt;my-idp&lt;/code&gt;（即上面定义的 provider id），说明部署成功，在 Identity Providers 后台正常新增即可。&lt;/p&gt;
&lt;img src=&#34;/2022/01/05/keycloak-custom-idp/keycloak-custom-idp-4.png&#34; class=&#34;&#34; title=&#34;展示出了 my-idp&#34;&gt;

&lt;h2 id=&#34;五、自定义-UserAttributeMapper&#34;&gt;&lt;a href=&#34;#五、自定义-UserAttributeMapper&#34; class=&#34;headerlink&#34; title=&#34;五、自定义 UserAttributeMapper&#34;&gt;&lt;/a&gt;五、自定义 UserAttributeMapper&lt;/h2&gt;&lt;p&gt;由于之前我们需要额外储存用户信息，所以在重写 &lt;code&gt;extractIdentityFromProfile&lt;/code&gt; 方法时，使用了 &lt;code&gt;setUserAttribute&lt;/code&gt; 方法设置自定义属性。但由于 Keycloak 是冗余的用户数据，我们希望用户每次登录后，都可以自动更新用户信息。我们当然可以在 IDP 的配置中设置 &lt;code&gt;Sync Mode&lt;/code&gt; 为 &lt;code&gt;force&lt;/code&gt; 来每次更新用户信息，但此时只会自动同步更新 User 中 Details Tab 下的基本信息，不会再次同步 Attributes。&lt;br&gt;正常我们就会想到，可以通过设置 IDP 的 Mappers 来进行属性的放置，结果就会发现，&lt;code&gt;Mapper Type&lt;/code&gt; 只有三个 Hardcoded 开头的硬编码的 Mapper。所以为了能够重新使用 &lt;code&gt;Attribute Importer&lt;/code&gt;，需要我们自定义一个 &lt;code&gt;UserAttributeMapper&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;1-自定义-UserAttributeMapper&#34;&gt;&lt;a href=&#34;#1-自定义-UserAttributeMapper&#34; class=&#34;headerlink&#34; title=&#34;1. 自定义 UserAttributeMapper&#34;&gt;&lt;/a&gt;1. 自定义 UserAttributeMapper&lt;/h3&gt;&lt;p&gt;仍然参考 GitHub 的 &lt;code&gt;GitHubUserAttributeMapper&lt;/code&gt;，直接拷贝过来，将 &lt;code&gt;PROVIDER_ID&lt;/code&gt; 改成自己的即可。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyUserAttributeMapper&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AbstractJsonUserAttributeMapper&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; String PROVIDER_ID = &lt;span class=&#34;string&#34;&gt;&amp;quot;my-idp-user-attribute-mapper&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; String[] cp = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; String[] &amp;#123; MyIdentityProviderFactory.PROVIDER_ID &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String[] getCompatibleProviders() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; cp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;getId&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; PROVIDER_ID;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在这我们也可以看到，Keycloak 是通过 &lt;code&gt;AbstractJsonUserAttributeMapper&lt;/code&gt; 的 &lt;code&gt;getCompatibleProviders&lt;/code&gt; 方法来控制 IDP 可选哪些 Mapper 的。&lt;/p&gt;
&lt;h3 id=&#34;2-注册自定义-UserAttributeMapper&#34;&gt;&lt;a href=&#34;#2-注册自定义-UserAttributeMapper&#34; class=&#34;headerlink&#34; title=&#34;2. 注册自定义 UserAttributeMapper&#34;&gt;&lt;/a&gt;2. 注册自定义 UserAttributeMapper&lt;/h3&gt;&lt;p&gt;同之前注册 &lt;code&gt;IdentityProvider&lt;/code&gt;，在 &lt;code&gt;META-INF/service/&lt;/code&gt; 下新建 &lt;code&gt;org.keycloak.broker.provider.IdentityProviderMapper&lt;/code&gt; 文件，并在其中填写我们自定义的 UserAttributeMapper 的全限定类名。&lt;br&gt;最后，别忘了重新打包部署，我们就可以继续在自定义的 IDP 中使用 &lt;code&gt;Attribute Importer&lt;/code&gt; 了。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
