{
    "version": "https://jsonfeed.org/version/1",
    "title": "A Blog • All posts by \"java\" tag",
    "description": "Just another blog.",
    "home_page_url": "https://blog.timerever.tk",
    "items": [
        {
            "id": "https://blog.timerever.tk/2022/03/01/resolve-class-not-found-in-sharding-jdbc/",
            "url": "https://blog.timerever.tk/2022/03/01/resolve-class-not-found-in-sharding-jdbc/",
            "title": "修复 Sharding-JDBC 使用时的两次 NoClassDefFoundError",
            "date_published": "2022-03-01T06:38:32.000Z",
            "content_html": "<p>由于项目上有着某些需求，所以需要使用 Sharding-JDBC。根据官方文档，引入 <code>shardingsphere-jdbc-core</code> 依赖并使用当前最新版本 5.1.0，结果在测试的过程中出现了两次 NoClassDefFoundError，分别记录一下解决过程。</p>\n<span id=\"more\"></span>\n<h3 id=\"一-classnotfoundexception-orgapachetomcatdbcpdbcp2basicdatasource\"><a class=\"markdownIt-Anchor\" href=\"#一-classnotfoundexception-orgapachetomcatdbcpdbcp2basicdatasource\"></a> 一、ClassNotFoundException: org.apache.tomcat.dbcp.dbcp2.BasicDataSource</h3>\n<p>配置完程序，兴冲冲地打开前端准备测试，可没想到刚打开就报了个错。老规矩，先看最后一个 Caused by，结果是个没头没脑的 ClassNotFoundException。</p>\n<img src=\"/2022/03/01/resolve-class-not-found-in-sharding-jdbc/resolve-class-not-found-in-sharding-jdbc-1.png\" class=\"\" title=\"报错信息\">\n<p>那就继续往上翻，看一下异常栈信息。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: java.lang.NoClassDefFoundError: org/apache/tomcat/dbcp/dbcp2/BasicDataSource</span><br><span class=\"line\">\tat org.apache.shardingsphere.infra.datasource.pool.metadata.type.dbcp.TomcatDBCPDataSourcePoolMetaData.getType(TomcatDBCPDataSourcePoolMetaData.java:67)</span><br><span class=\"line\">\tat org.apache.shardingsphere.spi.typed.TypedSPIRegistry.lambda$findRegisteredService$0(TypedSPIRegistry.java:44)</span><br><span class=\"line\">\tat java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:174)</span><br><span class=\"line\">\tat java.util.ArrayList$ArrayListSpliterator.tryAdvance(ArrayList.java:1361)</span><br><span class=\"line\">\tat java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126)</span><br><span class=\"line\">\tat java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:499)</span><br><span class=\"line\">\tat java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:486)</span><br><span class=\"line\">\tat java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)</span><br><span class=\"line\">\tat java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:152)</span><br><span class=\"line\">\tat java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)</span><br><span class=\"line\">\tat java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:531)</span><br><span class=\"line\">\tat org.apache.shardingsphere.spi.typed.TypedSPIRegistry.findRegisteredService(TypedSPIRegistry.java:44)</span><br><span class=\"line\">\tat org.apache.shardingsphere.infra.datasource.pool.metadata.DataSourcePoolMetaDataFactory.newInstance(DataSourcePoolMetaDataFactory.java:46)</span><br><span class=\"line\">\tat org.apache.shardingsphere.infra.datasource.props.DataSourcePropertiesCreator.createProperties(DataSourcePropertiesCreator.java:81)</span><br><span class=\"line\">\tat org.apache.shardingsphere.infra.datasource.props.DataSourcePropertiesCreator.create(DataSourcePropertiesCreator.java:57)</span><br><span class=\"line\">\tat org.apache.shardingsphere.infra.metadata.resource.DataSourcesMetaData.&lt;init&gt;(DataSourcesMetaData.java:41)</span><br><span class=\"line\">\tat org.apache.shardingsphere.infra.metadata.ShardingSphereMetaData.createResource(ShardingSphereMetaData.java:73)</span><br><span class=\"line\">\tat org.apache.shardingsphere.infra.metadata.ShardingSphereMetaData.create(ShardingSphereMetaData.java:66)</span><br><span class=\"line\">\tat org.apache.shardingsphere.mode.metadata.MetaDataContextsBuilder.getMetaDataMap(MetaDataContextsBuilder.java:105)</span><br><span class=\"line\">\tat org.apache.shardingsphere.mode.metadata.MetaDataContextsBuilder.build(MetaDataContextsBuilder.java:96)</span><br><span class=\"line\">\tat org.apache.shardingsphere.mode.manager.memory.MemoryContextManagerBuilder.build(MemoryContextManagerBuilder.java:49)</span><br><span class=\"line\">\tat org.apache.shardingsphere.driver.jdbc.core.datasource.ShardingSphereDataSource.createContextManager(ShardingSphereDataSource.java:81)</span><br><span class=\"line\">\tat org.apache.shardingsphere.driver.jdbc.core.datasource.ShardingSphereDataSource.&lt;init&gt;(ShardingSphereDataSource.java:64)</span><br><span class=\"line\">\tat org.apache.shardingsphere.driver.api.ShardingSphereDataSourceFactory.createDataSource(ShardingSphereDataSourceFactory.java:77)</span><br></pre></td></tr></table></figure>\n<p>首先点进去看一下第一行的 <code>TomcatDBCPDataSourcePoolMetaData</code> 这个类，IDE 很明显地提示了错误，所以根源在于 Sharding 使用了 <code>BasicDataSource</code> 类却没有引入其依赖。</p>\n<img src=\"/2022/03/01/resolve-class-not-found-in-sharding-jdbc/resolve-class-not-found-in-sharding-jdbc-2.png\" class=\"\" title=\"IDE 报红\">\n<p>既然问题的根源找到了，那么接下来看一眼为什么会触发到这里。</p>\n<p>接着看第二行，<code>TypedSPIRegistry</code> 类的 44 行，并在这里下一个断点：</p>\n<img src=\"/2022/03/01/resolve-class-not-found-in-sharding-jdbc/resolve-class-not-found-in-sharding-jdbc-3.png\" class=\"\" title=\"打下断点\">\n<img src=\"/2022/03/01/resolve-class-not-found-in-sharding-jdbc/resolve-class-not-found-in-sharding-jdbc-4.png\" class=\"\" title=\"断点暂停\">\n<img src=\"/2022/03/01/resolve-class-not-found-in-sharding-jdbc/resolve-class-not-found-in-sharding-jdbc-5.png\" class=\"\" title=\"运行表达式\">\n<p>可以看到，<code>ShardingSphereServiceLoader.newServiceInstances(typedSPIClass)</code> 方法传入了 SPI 类 <code>DataSourcePoolMetaData</code>， 并获取到了其三个实现类，而最后一个 <code>TomcatDBCPDataSourcePoolMetaData</code> 类就是刚才抛出异常的类。</p>\n<img src=\"/2022/03/01/resolve-class-not-found-in-sharding-jdbc/resolve-class-not-found-in-sharding-jdbc-6.png\" class=\"\" title=\"DataSourcePoolMetaData 实现类\">\n<p>然后在后续的 <code>filter</code> 中，会循环每个对象，在调用 <code>getType()</code> 方法时便出现了异常。</p>\n<p>所以看上去并不是自己的问题，在谷歌之后发现，近期已经有人提出了这个问题，具体可以参见：<a href=\"https://github.com/apache/shardingsphere/issues/15507\">Add example that implements the Metadata SPI for third-party JDBC pools</a>。</p>\n<p>通过 issue 中的描述我们可以得知，这个问题是在 5.1.0 中才出现的。看上去已经有人提了 PR 修复了这个问题，但是目前还没有发布新版本。所以我们可以降级到 5.0.0 使用旧版本来规避这个问题，或者直接引入缺失的依赖使代码不再报错。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.tomcat<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tomcat-dbcp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>10.0.16<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"二-noclassdeffounderror-organtlrv4runtimecodepointbuffer\"><a class=\"markdownIt-Anchor\" href=\"#二-noclassdeffounderror-organtlrv4runtimecodepointbuffer\"></a> 二、NoClassDefFoundError: org/antlr/v4/runtime/CodePointBuffer</h3>\n<p>修复好刚才的问题之后，重新运行程序，创建数据源，好，没有报错。再执行一下 SQL 查询，不好，又报错了…</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: java.lang.NoClassDefFoundError: org/antlr/v4/runtime/CodePointBuffer</span><br><span class=\"line\">\tat org.apache.shardingsphere.sql.parser.core.SQLParserFactory.getSQLCharStream(SQLParserFactory.java:82)</span><br><span class=\"line\">\tat org.apache.shardingsphere.sql.parser.core.SQLParserFactory.createTokenStream(SQLParserFactory.java:76)</span><br><span class=\"line\">\tat org.apache.shardingsphere.sql.parser.core.SQLParserFactory.newInstance(SQLParserFactory.java:55)</span><br><span class=\"line\">\tat org.apache.shardingsphere.sql.parser.core.database.parser.SQLParserExecutor.twoPhaseParse(SQLParserExecutor.java:58)</span><br><span class=\"line\">\tat org.apache.shardingsphere.sql.parser.core.database.parser.SQLParserExecutor.parse(SQLParserExecutor.java:49)</span><br><span class=\"line\">\tat org.apache.shardingsphere.sql.parser.api.SQLParserEngine.parse(SQLParserEngine.java:47)</span><br><span class=\"line\">\tat org.apache.shardingsphere.infra.parser.sql.SQLStatementParserExecutor.parse(SQLStatementParserExecutor.java:48)</span><br><span class=\"line\">\tat org.apache.shardingsphere.infra.parser.sql.SQLStatementParserEngine.parse(SQLStatementParserEngine.java:47)</span><br><span class=\"line\">\tat org.apache.shardingsphere.infra.parser.ShardingSphereSQLParserEngine.parse0(ShardingSphereSQLParserEngine.java:70)</span><br><span class=\"line\">\tat org.apache.shardingsphere.infra.parser.ShardingSphereSQLParserEngine.parse(ShardingSphereSQLParserEngine.java:59)</span><br><span class=\"line\">\tat org.apache.shardingsphere.driver.jdbc.core.statement.ShardingSphereStatement.createLogicSQL(ShardingSphereStatement.java:414)</span><br><span class=\"line\">\tat org.apache.shardingsphere.driver.jdbc.core.statement.ShardingSphereStatement.executeQuery(ShardingSphereStatement.java:144)</span><br><span class=\"line\">\tat org.springframework.jdbc.core.JdbcTemplate$1QueryStatementCallback.doInStatement(JdbcTemplate.java:452)</span><br><span class=\"line\">\tat org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:381)</span><br><span class=\"line\">\tat org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:465)</span><br><span class=\"line\">\tat org.springframework.jdbc.core.JdbcTemplate.queryForRowSet(JdbcTemplate.java:530)</span><br></pre></td></tr></table></figure>\n<p>从第一行点进去先看眼，又是找不到类，不过这次不太一样。看下上面的 import，发现这个包下的大部分的类都可以找到，只有这两个没有找到：</p>\n<img src=\"/2022/03/01/resolve-class-not-found-in-sharding-jdbc/resolve-class-not-found-in-sharding-jdbc-7.png\" class=\"\" title=\"import 信息\">\n<p>只能盲猜是版本问题，打开 Maven Helper 看一下依赖情况，果然是和公司自己的包发生了版本冲突。手动指定版本到 4.9.2，问题解决。</p>\n<img src=\"/2022/03/01/resolve-class-not-found-in-sharding-jdbc/resolve-class-not-found-in-sharding-jdbc-8.png\" class=\"\" title=\"import 信息\">\n",
            "tags": [
                "Java",
                "Sharding",
                "Sharding-JDBC"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2022/02/09/custom-jackson-serializer-for-clob-type/",
            "url": "https://blog.timerever.tk/2022/02/09/custom-jackson-serializer-for-clob-type/",
            "title": "自定义 Jackson Serializer 解决无法序列化 SerialClob 的问题",
            "date_published": "2022-02-09T07:49:35.000Z",
            "content_html": "<p>由于种种原因，项目上在做数据查询时，没有选择任何的 ORM 框架而是使用了 <code>JdbcTemplate</code> 进行数据库查询。查询出来也没做太多事情，只是简单地对数据做了下封装，然后直接返回给了前端。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Map&lt;String, Object&gt;&gt; data = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"type\">JdbcTemplate</span> <span class=\"variable\">jdbcTemplate</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JdbcTemplate</span>(ds);</span><br><span class=\"line\"><span class=\"type\">SqlRowSet</span> <span class=\"variable\">sqlRowSet</span> <span class=\"operator\">=</span> jdbcTemplate.queryForRowSet(sql);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">columnSize</span> <span class=\"operator\">=</span> sqlRowSet.getMetaData().getColumnNames().length;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (sqlRowSet.next()) &#123;</span><br><span class=\"line\">\tMap&lt;String, Object&gt; tmp = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashMap</span>&lt;&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= columnSize; i++) &#123;</span><br><span class=\"line\">\t\ttmp.put(i + <span class=\"string\">&quot;&quot;</span>, sqlRowSet.getObject(i));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdata.add(tmp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>本来一直岁月静好，知道某一天查了一张新表，然后后台报了异常：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class java.io.ByteArrayInputStream and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.demo.web.rest.util.ResponseEnvelope[&quot;data&quot;]-&gt;com.demo.service.dto.SqlQueryDto[&quot;data&quot;]-&gt;java.util.ArrayList[0]-&gt;java.util.LinkedHashMap[&quot;LOG_MSG&quot;]-&gt;javax.sql.rowset.serial.SerialClob[&quot;asciiStream&quot;])</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1300)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:400)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:46)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:728)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:774)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields(MapSerializer.java:808)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeWithoutTypeInfo(MapSerializer.java:764)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:720)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:35)</span><br><span class=\"line\">\tat com.fasterxml.jackson.datatype.hibernate5.PersistentCollectionSerializer.serialize(PersistentCollectionSerializer.java:244)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:119)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:79)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:18)</span><br><span class=\"line\">\tat com.fasterxml.jackson.datatype.hibernate5.PersistentCollectionSerializer.serialize(PersistentCollectionSerializer.java:244)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:728)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:774)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:728)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:774)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1518)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1007)</span><br><span class=\"line\">\tat org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:454)</span><br><span class=\"line\">\t... 123 common frames omitted</span><br></pre></td></tr></table></figure>\n<p>乍一看，可以通过提示所说的设置 <code>SerializationFeature.FAIL_ON_EMPTY_BEANS</code> 为 <code>false</code> 来避免这个问题，但这个问题其实远远没有这么简单。</p>\n<span id=\"more\"></span>\n<h3 id=\"尝试按照提示解决\"><a class=\"markdownIt-Anchor\" href=\"#尝试按照提示解决\"></a> 尝试按照提示解决</h3>\n<p>既然异常中已经给出了解决方案，所以我们可以先尝试用给出的方案解决。由于我们是 spring 项目，所以我们可以很简单地通过在 yaml 中添加配置而不是采用写大段代码的方式来设置这个序列化属性：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">jackson:</span></span><br><span class=\"line\">    <span class=\"attr\">serialization:</span></span><br><span class=\"line\">      <span class=\"attr\">FAIL_ON_EMPTY_BEANS:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>让我们再调用下接口。好，没问题，不报错了！再看眼返回值，等等，这是个啥？</p>\n<img src=\"/2022/02/09/custom-jackson-serializer-for-clob-type/custom-jackson-serializer-for-clob-type-1.png\" class=\"\" title=\"并不是所期望的结果\">\n<p>这个字段明明在数据库中是有值的，而且正常也不会变成这种嵌套结构，所以看来这个解决办法并不可行。</p>\n<h3 id=\"寻找问题根源\"><a class=\"markdownIt-Anchor\" href=\"#寻找问题根源\"></a> 寻找问题根源</h3>\n<p>所以简单的解决方式不行，就只能按部就班先看问题出在哪里了。废话不多说，既然我们知道了问题出在哪个字段，就直接打个断点先看眼程序拿到的返回值是什么样子。</p>\n<p>已知数据库是 H2，对应的字段类型为 <code>CHARACTER LARGE OBJECT</code>，再看眼拿到的值：</p>\n<img src=\"/2022/02/09/custom-jackson-serializer-for-clob-type/custom-jackson-serializer-for-clob-type-2.png\" class=\"\" title=\"实际拿到的返回值\">\n<p>可以看到，程序所拿到的返回值是 <code>javax.sql.rowset.serial.SerialClob</code> 的对象，而这个对象里面所包含的 <code>clob</code> 字段就是 H2 的 <code>org.h2.jdbc.JdbcClob</code> 对象。</p>\n<img src=\"/2022/02/09/custom-jackson-serializer-for-clob-type/custom-jackson-serializer-for-clob-type-3.png\" class=\"\" title=\"SerialClob 类\">\n<p>也就是说，默认情况下 Jackson 无法序列化 <code>SerialClob</code> 这个类所创建的对象，是不是由于 <code>clob</code> 字段所包含的具体实现类导致的并没有进一步研究，因为数据库的种类很多，我们需要着手做的是解决这个不能序列化的问题。</p>\n<h3 id=\"自定义-serializer-解决问题\"><a class=\"markdownIt-Anchor\" href=\"#自定义-serializer-解决问题\"></a> 自定义 Serializer 解决问题</h3>\n<p>我们知道 Jackson 可以通过扩展 <code>Module</code> 来支持更多类型的序列化操作，所以我们也可以采用同样的方式来增加对 <code>SerialClob</code> 的支持。</p>\n<p>不过我们不需要自定义 <code>Module</code>，使用自带的 <code>SimpleModule</code> 即可，要做的只是自定义对应的 Serializer：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SerialClobSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">JsonSerializer</span>&lt;SerialClob&gt; &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serialize</span><span class=\"params\">(SerialClob clob, JsonGenerator gen, SerializerProvider serializers)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tgen.writeString(clob.getCharacterStream(), (<span class=\"type\">int</span>) clob.length());</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SerialException e) &#123;</span><br><span class=\"line\">\t\t\tlog.error(<span class=\"string\">&quot;Serialize SerialClob error&quot;</span>, e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后要做的就是将自定义的 <code>SerialClobSerializer</code> 注册到 ObjectMapper 中去，通常网上的方法都是自定义创建全局的 <code>ObjectMapper</code> 供 Spring 使用。这个方法定制化强，完全由自己来创建 <code>ObjectMapper</code>，但个人希望在可以应用 Spring 默认创建的 <code>ObjectMapper</code> 属性的同时，将 <code>SerialClobSerializer</code> 注册进去，所以采用下面的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JacksonConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectMapper objectMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">customSerializerSupport</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        objectMapper.registerModule(<span class=\"keyword\">new</span> <span class=\"title class_\">SimpleModule</span>().addSerializer(SerialClob.class, <span class=\"keyword\">new</span> <span class=\"title class_\">SerialClobSerializer</span>()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到此，问题就得到了解决，调用接口后不再报错，且可以返回正确的结果。</p>\n",
            "tags": [
                "Java",
                "Jackson"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2022/01/07/soft-deletion-in-hibernate-things-you-may-miss/",
            "url": "https://blog.timerever.tk/2022/01/07/soft-deletion-in-hibernate-things-you-may-miss/",
            "title": "【翻译】Hibernate 软删除：你可能忽略掉的一些东西",
            "date_published": "2022-01-07T11:34:47.000Z",
            "content_html": "<img src=\"/2022/01/07/soft-deletion-in-hibernate-things-you-may-miss/soft-deletion-in-hibernate-things-you-may-miss-1.png\" class=\"\">\n<p>我们在设计生产系统的时候，无论是为了方便恢复、便于查找问题还是审计等，总是绕不开软删除这个话题。国内互联网公司大部分均使用 MyBatis 作为 ORM 框架，所以大部分的资料也都是 MyBatis 的各种软删除实现，用起来也都没什么问题。但是手里项目使用的是 Hibernate，虽然 Hibernate 也可以找到很多软删除的方案，当初最开始参考的也是原文列出的第一个 Baeldung 网站的方案，但是由于 Hibernate 大部分时候都是直接对实体进行操作，所以软删除用起来会遇到很多的问题。比如自己就遇到了软删除 + 二级缓存冲突的问题，先抛开这个不谈，毕竟在权衡之下直接关闭二级缓存就解决了问题，在基本使用时软删除也不可避免地会遇到各种问题。正好偶然看到了 JPA Buddy 上一篇文章在说这个问题，索性简单翻译下，希望大家在设计软删除方案的时候能够进行充分的考虑。</p>\n<p>原文：<a href=\"https://www.jpa-buddy.com/blog/soft-deletion-in-hibernate-things-you-may-miss/\">Soft Deletion in Hibernate: Things You May Miss</a></p>\n<span id=\"more\"></span>\n<hr />\n<p>软删除是一种广泛使用的模式，简单来说就是：你仅仅将实体标记为删除状态并通过在 SELECT 查询中过滤他们而不是物理删除这些实体。使用软删除有很多常见的原因：审计、可恢复性、或者可以很方便地在将数据伪造成删除状态的同时保持着对这些“已删除”记录的引用。</p>\n<p>在这篇文章中我们将关注一些大部分讲述软删除方案的文章所未提到的细节。</p>\n<h4 id=\"sqldelete-where\"><a class=\"markdownIt-Anchor\" href=\"#sqldelete-where\"></a> @SQLDelete + @Where</h4>\n<p>如果你以“soft deletion hibernate”为关键词在谷歌上进行搜索的话，你很可能找到 <a href=\"https://www.baeldung.com/spring-jpa-soft-delete\">Eugen Paraschiv</a>、<a href=\"https://vladmihalcea.com/the-best-way-to-soft-delete-with-hibernate/\">Vlad Mihalcea</a> 或是 <a href=\"https://thorben-janssen.com/implement-soft-delete-hibernate/\">Thorben Janssen</a> 写的教程。他们都建议使用 Hibernate 的 <code>@SQLDelete</code> 和 <code>@Where</code> 注解来让程序自动设置删除标识并可以在查询时自动过滤这些数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table(name = &quot;article&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@SQLDelete(sql = &quot;update article set deleted=true where id=?&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Where(clause = &quot;deleted = false&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Article</span> &#123;</span><br><span class=\"line\">   <span class=\"meta\">@Id</span></span><br><span class=\"line\">   <span class=\"meta\">@GeneratedValue(strategy = GenerationType.SEQUENCE)</span></span><br><span class=\"line\">   <span class=\"meta\">@Column(name = &quot;id&quot;, nullable = false)</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Column(name = &quot;deleted&quot;, nullable = false)</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">Boolean</span> <span class=\"variable\">deleted</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// other properties, getters and setters omitted</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>@SQLDelete</code> 注解会在 Hibernate 管理的对象被删除时执行我们设定好的原生 SQL 语句。<code>@Where</code> 注解通过将自身的查询条件自动追加到 SELECT 查询语句中来帮你自动过滤掉这些被标记为删除的数据。</p>\n<p>这个方法看上去是一剂良药，但是里面有坑。普通查询肯定可以正常工作，但是如果是关联查询呢？</p>\n<h4 id=\"关联查询所遇到的问题\"><a class=\"markdownIt-Anchor\" href=\"#关联查询所遇到的问题\"></a> 关联查询所遇到的问题</h4>\n<p>让我们仔细思考一下，假设你拥有一个实体，里面可能关联了另一个实体的集合，或者仅仅是另一个实体对象，但相同的是他们均被软删除。当你获取到这个实体对象时，你期望发生什么？实际上，这里没有几个选项可供选择：被删除的记录呈现或者不呈现在查询结果中，而不同的选择取决于不同的场景用例。比如，我们在商城购物车中有很多的商品，当一件商品被删除时我们期望其从购物车中消失对吧？但是被删除的商品仍应该出现在历史账单中，这难道不矛盾嘛？</p>\n<p>让我们来看一下 <code>@SQLDelete</code> 和 <code>@Where</code> 注解在不同类型的关联关系、FetchType 和不同的查询 API 中是怎样工作的。下面是我们将要在后续实验中使用的 ER 图：</p>\n<img src=\"/2022/01/07/soft-deletion-in-hibernate-things-you-may-miss/soft-deletion-in-hibernate-things-you-may-miss-2.png\" class=\"\" title=\"ER 图\">\n<p>Article 和 Author 拥有多对多关系，和 Comment 有着一对多关系，以及和 ArticleDetails 有着一对一的关系。那么问题来了，他们中的某一个在被其他实体引用时被软删除会发生什么？</p>\n<h4 id=\"onetomany-manytomany\"><a class=\"markdownIt-Anchor\" href=\"#onetomany-manytomany\"></a> OneToMany &amp; ManyToMany</h4>\n<p>Hibernate 会自动在所有对多关系中过滤掉被删除的实体。如果你在删除一个 Author 之前和之后分别运行下面的代码，打印出的 Author 的名字数量会发生变化：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional&lt;Article&gt; articleOptional = articleRepository.findById(<span class=\"number\">4L</span>);</span><br><span class=\"line\">articleOptional.ifPresent(article -&gt; &#123;</span><br><span class=\"line\">   article.getAuthors()</span><br><span class=\"line\">           .forEach(author -&gt; logger.info(author.getName()));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>好消息是，无论 FetchType 的值是什么或者用哪种查询方式（比如 entityManager、Criteria API、Spring Data JPA 等），上述结果都成立。</p>\n<h4 id=\"懒加载下的-manytoone-onetoone\"><a class=\"markdownIt-Anchor\" href=\"#懒加载下的-manytoone-onetoone\"></a> 懒加载下的 ManyToOne &amp; OneToOne</h4>\n<p>让我们试着想象一下我们软删除了一篇文章，但我们不希望删除这篇文章下面的评论，因为这样在恢复文章时评论也会自动恢复。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table(name = &quot;comment&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Comment</span> &#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">   <span class=\"meta\">@ManyToOne(fetch = FetchType.LAZY)</span></span><br><span class=\"line\">   <span class=\"meta\">@JoinColumn(name = &quot;article_id&quot;)</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> Article article;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，让我们尝试获取一条对应文章被删除的评论：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional&lt;Comment&gt; comment = commentRepository.findById(id);</span><br><span class=\"line\">comment.ifPresent(com -&gt; logger.info(com.getArticle().getText()));</span><br></pre></td></tr></table></figure>\n<p>如果你在第一行打一个断点，你可以看到 article 属性的值是 Hibernate Proxy 对象。</p>\n<img src=\"/2022/01/07/soft-deletion-in-hibernate-things-you-may-miss/soft-deletion-in-hibernate-things-you-may-miss-3.png\" class=\"\" title=\"debug\">\n<p>这很容易理解，因为 Hibernate 并不能提前知道这个实体是否已经被删除。但是当我们执行 <code>com.getArticle().getText()</code> 方法时，却抛出了 EntityNotFoundException 异常，这是你所期望的吗？</p>\n<h4 id=\"提前加载下的-manytoone-onetoone\"><a class=\"markdownIt-Anchor\" href=\"#提前加载下的-manytoone-onetoone\"></a> 提前加载下的 ManyToOne &amp; OneToOne</h4>\n<p>让我们将 FetchType 的值改为 EAGER 后再次重复相同的实验。现在我们在程序不使用代理的情况下获取到了关联的 article 对象，虽然 Hibernate 知道 article 已经被删除了。让我们进行同样的测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional&lt;Comment&gt; comment = commentRepository.findById(id);</span><br><span class=\"line\">comment.ifPresent(com -&gt; logger.info(com.getArticle().getText()));</span><br></pre></td></tr></table></figure>\n<p>被关联查询且被软删除的 article 对象在没有报任何异常的情况下被加载了，其软删除标志为也依然为 <code>true</code>：</p>\n<img src=\"/2022/01/07/soft-deletion-in-hibernate-things-you-may-miss/soft-deletion-in-hibernate-things-you-may-miss-4.png\" class=\"\" title=\"debug\">\n<p>这种不一致的行为很容易被解释，提前加载让 Hibernate 查询时 join 了 <code>article</code> 表。Hibernate 面临着立即抛出 EntityNotFoundException 异常还是正常加载的抉择，但因为 article 已经被加载了，<code>@Where</code> 注解失去了它的作用，所以 Hibernate 只是简单地为对象赋了值。</p>\n<p>现在让我们批量查询 comments：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Iterable&lt;Comment&gt; comments = commentRepository.findAll();</span><br></pre></td></tr></table></figure>\n<p>现在我们又遇到了 EntityNotFoundException 异常！出现异常是因为 <code>findAll</code> 方法分离查询被关联的 Article 对象，详情可以参考 <a href=\"https://stackoverflow.com/questions/49192255/spring-data-findall-does-not-fetch-eagerly/49193254\">Spring data findAll() does not fetch eagerly</a>。</p>\n<p>任何时候被软删除的对象在被使用分离查询时都会导致上面的异常，因为 Hibernate 在生成分离查询时应用了 <code>@Where</code> 所定义的条件，所以很显然 Hibernate 并不能查询到被软删除的实体。所以很显然，这种查询并不能查到 Hibernate 所期望的结果，所以在这种情况下导致了 EntityNotFoundException 异常。</p>\n<p>所以更有趣的是你需要进行很多实验来认识到 Hibernate 在使用不同的 API 时是怎样获取数据的。首先，无论是对多还是对一的实体，在使用 DSL 查询时你均会遇到同样的异常。与此同时，criteria API 会在提前加载的一对一关系下返回被删除的实体，但会在提前加载的多对一关系中抛出 EntityNotFoundException 异常。这难道不令人困惑吗？</p>\n<h4 id=\"避免-entitynotfoundexception-异常的解决方式\"><a class=\"markdownIt-Anchor\" href=\"#避免-entitynotfoundexception-异常的解决方式\"></a> 避免 EntityNotFoundException 异常的解决方式</h4>\n<p>这里有一个可以避免 EntityNotFoundException 异常的解决方法。Hibernate <a href=\"https://docs.jboss.org/hibernate/orm/5.2/userguide/html_single/Hibernate_User_Guide.html#associations-not-found\">介绍</a>了 <code>@NotFound</code> 注解，它能够让程序不再抛出异常，而是直接将关联对象的值设置为 <code>null</code>。</p>\n<p>这个解决办法看起来是一个灵丹妙药，但它同时带来了额外的缺点：无论 FetchType 设置为什么，所有的对一关系均会提前加载。</p>\n<img src=\"/2022/01/07/soft-deletion-in-hibernate-things-you-may-miss/soft-deletion-in-hibernate-things-you-may-miss-5.png\" class=\"\" title=\"官网介绍\">\n<h4 id=\"约束和索引带来的问题\"><a class=\"markdownIt-Anchor\" href=\"#约束和索引带来的问题\"></a> 约束和索引带来的问题</h4>\n<p>我们知道被软删除的实体和正常的实体均会被唯一约束和索引所限制，因此，常规的索引在这种情况下不再适用。假设一个 Author 实体的 login 字段有唯一约束，在软删除表中已有的记录后，记录仍然存在，所以正常状态的 Author 实体的同样的字段也不能再被设置为被软删除的相同的值。</p>\n<p>如果你正在使用 PostgreSQL，那么你很幸运，因为你可以使用部分索引：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE UNIQUE INDEX author_login_idx ON <span class=\"title function_\">author</span> <span class=\"params\">(login)</span> <span class=\"type\">WHERE</span> <span class=\"variable\">deleted</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n<p>但如果你使用的是 MySQL，那么很不幸，这个问题无解。</p>\n<h4 id=\"结论\"><a class=\"markdownIt-Anchor\" href=\"#结论\"></a> 结论</h4>\n<p>所以你可以看到，软删除是一个很容易被理解但不容易去实现的模式。看上去现在还没有一个完美的解决方案，至少 Hibernate 现阶段还没有提供。</p>\n<p>在一些简单的场景，你确实可以直接采用使用 <code>@SQLDelete</code> + <code>@Where</code> 注解的方式，但在软删除实体出现在一对一或者多对一关联关系的时候，你并不能期望他们行为一致。只是简单地改变 FetchType 的值，或是使用 <code>@EntityGraph</code>，或者将你的查询从 Criteria API 迁移到 DSL 查询，或是其他任何改变都很可能影响查询结果：从被意外抛出异常到意外地成功加载了被删除的实体，或是直接获得了意料之外的 <code>null</code> 值。</p>\n",
            "tags": [
                "Java",
                "Hibernate",
                "Translate"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2022/01/05/keycloak-custom-idp/",
            "url": "https://blog.timerever.tk/2022/01/05/keycloak-custom-idp/",
            "title": "Keycloak 配置自定义社交帐号登录组件",
            "date_published": "2022-01-05T07:00:00.000Z",
            "content_html": "<p>由于 Keycloak 由红帽开发维护，所以其自带的 Social Identity Providers 都是国外的平台。现有需求对接公司 SSO，且由于国内 OAuth2 协议实现均不标准（公司的也是），所以无法使用 Keycloak 的 OpenID Connect 自定义接入，需要自己扩展 Identity Provider 实现。和国内的微信、钉钉、飞书等系统接入代码类似，但发现现有的接入组件没有实现 <code>UserAttributeMapper</code>，且版本变动，代码并不兼容，所以参考 Github 的实现进行开发。</p>\n<blockquote>\n<p>Keycloak 使用当前最新版：16.1.0</p>\n</blockquote>\n<h2 id=\"一-自定义-identityprovider\"><a class=\"markdownIt-Anchor\" href=\"#一-自定义-identityprovider\"></a> 一、自定义 IdentityProvider</h2>\n<h3 id=\"0-引入依赖\"><a class=\"markdownIt-Anchor\" href=\"#0-引入依赖\"></a> 0. 引入依赖</h3>\n<p>引入 Keycloak 相关依赖，依赖版本要与使用的 Keycloak 版本保持一致，scope 使用 <code>provided</code> 即可。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.keycloak<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>keycloak-services<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;keycloak.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.keycloak<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>keycloak-server-spi<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;keycloak.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.keycloak<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>keycloak-server-spi-private<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;keycloak.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"05-自定义-identityprovider\"><a class=\"markdownIt-Anchor\" href=\"#05-自定义-identityprovider\"></a> 0.5. 自定义 IdentityProvider</h3>\n<p>由于后续需要，我们先新建一个 IdentityProvider 放在这里。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyIdentityProvider</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractOAuth2IdentityProvider</span>&lt;OAuth2IdentityProviderConfig&gt;</span><br><span class=\"line\">        <span class=\"keyword\">implements</span> <span class=\"title class_\">SocialIdentityProvider</span>&lt;OAuth2IdentityProviderConfig&gt; &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyIdentityProvider</span><span class=\"params\">(KeycloakSession session, OAuth2IdentityProviderConfig config)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(session, config);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String <span class=\"title function_\">getDefaultScopes</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-自定义-identityproviderfactory\"><a class=\"markdownIt-Anchor\" href=\"#1-自定义-identityproviderfactory\"></a> 1. 自定义 IdentityProviderFactory</h3>\n<p>我们先来看一下 GitHub 的 <code>GitHubIdentityProviderFactory</code>，很简单，有一个唯一的 <code>PROVIDER_ID</code>，然后 <code>getName</code> 方法返回了一个名称用于展示。</p>\n<img src=\"/2022/01/05/keycloak-custom-idp/keycloak-custom-idp-1.png\" class=\"\" title=\"Github IdentityProviderFactory\">\n<p>我们照着改一下即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyIdentityProviderFactoryFactory</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractIdentityProviderFactory</span>&lt;MyIdentityProvider&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">SocialIdentityProviderFactory</span>&lt;MyIdentityProvider&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PROVIDER_ID</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;my-idp&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;My IDP&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MyIdentityProvider <span class=\"title function_\">create</span><span class=\"params\">(KeycloakSession session, IdentityProviderModel model)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyIdentityProvider</span>(session, <span class=\"keyword\">new</span> <span class=\"title class_\">OAuth2IdentityProviderConfig</span>(model));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IdentityProviderModel <span class=\"title function_\">createConfig</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OAuth2IdentityProviderConfig</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> PROVIDER_ID;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-自定义-identityprovider\"><a class=\"markdownIt-Anchor\" href=\"#2-自定义-identityprovider\"></a> 2. 自定义 IdentityProvider</h3>\n<h4 id=\"先定义并在构造时传入-authorize-token-及-profile-的-url\"><a class=\"markdownIt-Anchor\" href=\"#先定义并在构造时传入-authorize-token-及-profile-的-url\"></a> 先定义并在构造时传入 Authorize、Token 及 Profile 的 Url。</h4>\n<img src=\"/2022/01/05/keycloak-custom-idp/keycloak-custom-idp-2.png\" class=\"\" title=\"AUTH URL\">\n<h4 id=\"重写必须要求实现的抽象方法\"><a class=\"markdownIt-Anchor\" href=\"#重写必须要求实现的抽象方法\"></a> 重写必须要求实现的抽象方法</h4>\n<p>重写 <code>getDefaultScopes</code> 的抽象方法，返回自定义 SCOPE。</p>\n<h4 id=\"按需重写方法\"><a class=\"markdownIt-Anchor\" href=\"#按需重写方法\"></a> 按需重写方法</h4>\n<p>首先重写 <code>supportsExternalExchange</code>方法，写死返回 <code>true</code>。这个官方文档也没有找到注释，但是各实现类均这么重写的，所以这里我们也一起重写。</p>\n<p>由于我们继承了 <code>AbstractOAuth2IdentityProvider</code>，剩下的可以直接看抽象类的实现，按需重写非标准定义下无法使用默认实现调用的方法。</p>\n<p>比如我需要对应自己系统返回的 <code>User</code> 和 Keycloak 的 <code>User</code> 对象的字段映射关系，所以重写 <code>extractIdentityFromProfile</code> 方法。这个方法也是默认空实现，一定要重写的。我们可以直接拷贝 GitHub 的实现再进行修改，同时，如果我们需要额外存储用户信息，可以使用 <code>setUserAttribute</code> 方法进行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> BrokeredIdentityContext <span class=\"title function_\">extractIdentityFromProfile</span><span class=\"params\">(EventBuilder event, JsonNode profile)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">BrokeredIdentityContext</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BrokeredIdentityContext</span>(getJsonProperty(profile, <span class=\"string\">&quot;id&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> getJsonProperty(profile, <span class=\"string\">&quot;login&quot;</span>);</span><br><span class=\"line\">    user.setUsername(username);</span><br><span class=\"line\">    user.setName(getJsonProperty(profile, <span class=\"string\">&quot;name&quot;</span>));</span><br><span class=\"line\">    user.setEmail(getJsonProperty(profile, <span class=\"string\">&quot;email&quot;</span>));</span><br><span class=\"line\">    user.setIdpConfig(getConfig());</span><br><span class=\"line\">    user.setIdp(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    user.setUserAttribute(USER_ATTRIBUTE_EMPLOY_ID, getJsonProperty(profile, USER_ATTRIBUTE_EMPLOY_ID));</span><br><span class=\"line\"></span><br><span class=\"line\">    AbstractJsonUserAttributeMapper.storeUserProfileForMapper(user, profile, getConfig().getAlias());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-重写回调方法\"><a class=\"markdownIt-Anchor\" href=\"#3-重写回调方法\"></a> 3. 重写回调方法</h3>\n<p>可以发现，我们之前重写的方法，都是接受到回调之后获取 token、获取用户信息的逻辑，如果我们的回调接口传参也不是标准实现的话，那么我们可以重写回调方法。</p>\n<h4 id=\"自定义-endpoint\"><a class=\"markdownIt-Anchor\" href=\"#自定义-endpoint\"></a> 自定义 Endpoint</h4>\n<p>编写自定义 Endpoint 类，继承 <code>AbstractOAuth2IdentityProvider</code> 内部 <code>Endpoint</code> 类。然后重写 <code>authResponse</code> 方法，自定义接收参数，然后仿照默认实现，通过 <code>authorizationCode</code> 换取用户信息并通过 <code>callback.authenticated(federatedIdentity)</code> 返回。</p>\n<h4 id=\"注册自定义-endpoint\"><a class=\"markdownIt-Anchor\" href=\"#注册自定义-endpoint\"></a> 注册自定义 Endpoint</h4>\n<p>重写 <code>AbstractOAuth2IdentityProvider</code> 的 <code>callback</code> 方法，返回自定义 Endpoint。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">callback</span><span class=\"params\">(RealmModel realm, AuthenticationCallback callback, EventBuilder event)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyEndpoint</span>(callback, realm, event);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-注册-identityproviderfactory\"><a class=\"markdownIt-Anchor\" href=\"#4-注册-identityproviderfactory\"></a> 4. 注册 IdentityProviderFactory</h3>\n<p>在 <code>resources</code> 文件夹下，新建 <code>MEAT-INF</code> 文件夹，并在其下面建立 <code>services</code> 文件。新增 <code>org.keycloak.broker.social.SocialIdentityProviderFactory</code> 文件，在里面直接填写 <code>MyIdentityProviderFactory</code> 的全限定类名即可。</p>\n<img src=\"/2022/01/05/keycloak-custom-idp/keycloak-custom-idp-3.png\" class=\"\" title=\"注册 IdentityProviderFactory\">\n<hr />\n<p>大体流程就是这样，OAuth2 认证后回调默认的 <code>EndPoint</code> 类的 <code>authResponse</code> 方法。如果大体流程标准，且回调参数标准，可以直接参照默认实现，按需重写所调用的 <code>IdentityProvider</code> 方法；如果回调参数会流程不标准，则需要自定义 EndPoint 并进行注册，再重写 <code>authResponse</code> 方法。</p>\n<h2 id=\"二-自定义-identityprovider-配置页\"><a class=\"markdownIt-Anchor\" href=\"#二-自定义-identityprovider-配置页\"></a> 二、自定义 IdentityProvider 配置页</h2>\n<blockquote>\n<p>在新建/编辑 IdentityProvider 时，页面元素是可以配置的，我们可以按需增减页面需要填写的字段。</p>\n</blockquote>\n<p>首先打开 Keycloak 路径下的 <code>themes\\base\\admin\\resources\\partials\\</code> 文件夹，我们还是将 <code>realm-identity-provider-github.html</code> 及 <code>realm-identity-provider-github-ext.html</code> 复制并重命名为 <code>realm-identity-provider-my-idp.html</code> 及 <code>realm-identity-provider-my-idp-ext.html</code>。如果不需要自定义，那么保持原样即可。如果需要修改页面字段展示，打开 <code>realm-identity-provider-my-idp.html</code> 文件，将文件内容替换为 <code>realm-identity-provider-social.html</code> 文件的内容，然后再对其进行修改即可。我们可以看到，默认页面就是引用了这个文件的内容。</p>\n<h2 id=\"三-部署-jar-文件\"><a class=\"markdownIt-Anchor\" href=\"#三-部署-jar-文件\"></a> 三、部署 jar 文件</h2>\n<p><strong>以 standalone 模式为例：</strong></p>\n<p>将打包后的 jar 文件复制到 <code>standalone\\deployments\\</code> 文件夹，不需要重启服务，Keycloak 会自动热部署，并在同级目录生成 <code>文件名.deployed</code> 文件。</p>\n<p>如果后续调用时出现 问题，可以参考 <a href=\"https://stackoverflow.com/questions/57778240/noclassdeffounderror-in-a-provider-jar-when-using-a-class-from-org-keycloak-auth\">NoClassDefFoundError in a provider jar</a> 在 <code>maven-jar-plugin</code> 插件配置依赖即可。</p>\n<h2 id=\"四-使用自定义-idp\"><a class=\"markdownIt-Anchor\" href=\"#四-使用自定义-idp\"></a> 四、使用自定义 IDP</h2>\n<p>回到 Keycloak 后台，右上角点击 <code>Server Info</code>，切到 <code>Providers</code> Tab，如果在 <code>social</code> 栏看到了 <code>my-idp</code>（即上面定义的 provider id），说明部署成功，在 Identity Providers 后台正常新增即可。</p>\n<img src=\"/2022/01/05/keycloak-custom-idp/keycloak-custom-idp-4.png\" class=\"\" title=\"展示出了 my-idp\">\n<h2 id=\"五-自定义-userattributemapper\"><a class=\"markdownIt-Anchor\" href=\"#五-自定义-userattributemapper\"></a> 五、自定义 UserAttributeMapper</h2>\n<p>由于之前我们需要额外储存用户信息，所以在重写 <code>extractIdentityFromProfile</code> 方法时，使用了 <code>setUserAttribute</code> 方法设置自定义属性。但由于 Keycloak 是冗余的用户数据，我们希望用户每次登录后，都可以自动更新用户信息。我们当然可以在 IDP 的配置中设置 <code>Sync Mode</code> 为 <code>force</code> 来每次更新用户信息，但此时只会自动同步更新 User 中 Details Tab 下的基本信息，不会再次同步 Attributes。<br />\n正常我们就会想到，可以通过设置 IDP 的 Mappers 来进行属性的放置，结果就会发现，<code>Mapper Type</code> 只有三个 Hardcoded 开头的硬编码的 Mapper。所以为了能够重新使用 <code>Attribute Importer</code>，需要我们自定义一个 <code>UserAttributeMapper</code>。</p>\n<h3 id=\"1-自定义-userattributemapper\"><a class=\"markdownIt-Anchor\" href=\"#1-自定义-userattributemapper\"></a> 1. 自定义 UserAttributeMapper</h3>\n<p>仍然参考 GitHub 的 <code>GitHubUserAttributeMapper</code>，直接拷贝过来，将 <code>PROVIDER_ID</code> 改成自己的即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyUserAttributeMapper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractJsonUserAttributeMapper</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PROVIDER_ID</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;my-idp-user-attribute-mapper&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String[] cp = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[] &#123; MyIdentityProviderFactory.PROVIDER_ID &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String[] getCompatibleProviders() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> cp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">getId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> PROVIDER_ID;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这我们也可以看到，Keycloak 是通过 <code>AbstractJsonUserAttributeMapper</code> 的 <code>getCompatibleProviders</code> 方法来控制 IDP 可选哪些 Mapper 的。</p>\n<h3 id=\"2-注册自定义-userattributemapper\"><a class=\"markdownIt-Anchor\" href=\"#2-注册自定义-userattributemapper\"></a> 2. 注册自定义 UserAttributeMapper</h3>\n<p>同之前注册 <code>IdentityProvider</code>，在 <code>META-INF/service/</code> 下新建 <code>org.keycloak.broker.provider.IdentityProviderMapper</code> 文件，并在其中填写我们自定义的 UserAttributeMapper 的全限定类名。<br />\n最后，别忘了重新打包部署，我们就可以继续在自定义的 IDP 中使用 <code>Attribute Importer</code> 了。</p>\n",
            "tags": [
                "Java",
                "Keycloak",
                "OAuth2",
                "SSO"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2021/12/02/hibernate-incorrect-metamodel-with-no-reationship/",
            "url": "https://blog.timerever.tk/2021/12/02/hibernate-incorrect-metamodel-with-no-reationship/",
            "title": "Hibernate 解决 Metamodel 属性类型错误问题",
            "date_published": "2021-12-02T03:41:48.000Z",
            "content_html": "<p>因为项目上使用了 Hibernate Metamodel，而且自定义映射了数据库的 JSON 字段类型，导致生成的 Metamodel 属性类型有误。虽然并没有用映射的这些属性做 <code>CriteriaQuery</code>，所以其实在项目的使用上没有影响，但是启动时还是会报一个 ERROR 日志，所以寻找一个能够根治的解决办法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR org.hibernate.metamodel.internal.MetadataContext [MetadataContext.java:491] - HHH015007: Illegal argument on static metamodel field injection : Foo_#bars; expected type : org.hibernate.metamodel.model.domain.internal.SingularAttributeImpl; encountered type : javax.persistence.metamodel.MapAttribute</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h3 id=\"一-定位问题\"><a class=\"markdownIt-Anchor\" href=\"#一-定位问题\"></a> 一、定位问题</h3>\n<p><strong>首先是背景信息：</strong> 因为前端需要在数据库存储 JSON 字段，而且现在版本的 MySQL 天然支持 JSON ，所以建表时采用了 JSON 作为字段类型。然后在 JPA 实体层面，引入了 <code>hibernate-types</code> 依赖来增加 Hibernate 对 JSON 的支持，字段属性增加了 <code>@Type(type = &quot;json&quot;)</code> 注解，本身定义为了 <code>Map</code> 类型。</p>\n<p>其实在 Hibernate 对 JSON 处理这件事情上，传统方案是通过自定义 <code>Convert</code> 来实现。或者可能不是 JSON Object 而是 JSON Array，但无论是哪种情况，均会遇到同样的问题。</p>\n<p>通过报错信息，对代码进行 DEBUG 后得知，Hibernate 在启动时，会根据实体属性是否存在与其他实体的关系，生成不同的 <code>Attribute</code>。比如 OneToMany 一对多关系就会生成 <code>ListAttribute</code> 或 <code>SetAttribute</code>，没有关系的属性都是 <code>SingularAttribute</code>。而启动时通过反射，会 set Metamodel 的对应属性，我们可以在 target 下面看见，Metamodel 的类型为 <code>MapAttribute</code>，所以我们可以确定，问题就出在了生成 Metamodel 的时候。具体是不是直接拿实体定义的数据类型来生成的我没有去看源码，不过可以肯定的是它在判断类型的时候缺少额外的判断。</p>\n<h3 id=\"二-解决问题\"><a class=\"markdownIt-Anchor\" href=\"#二-解决问题\"></a> 二、解决问题</h3>\n<p>同样作为一个共性问题，在 Goolge 进行搜索后，定位到了一条仍然是 Hibernate 官方 Bug 追踪的链接 <a href=\"https://hibernate.atlassian.net/browse/HHH-12338\">Incorrect metamodel for basic collections</a>。简单的来说，就是当前已经在 5.5.0.Alpha1 的版本中得到了解决，不过如果你认真看了下面整个的 Activity 记录，就会发现仍然是存在一个小插曲。</p>\n<h3 id=\"三-插曲\"><a class=\"markdownIt-Anchor\" href=\"#三-插曲\"></a> 三、插曲</h3>\n<p>这个问题是在 2018 年的 3 月份被提出来的，而 5.5.0.Alpha1 已经是 2021 年 8 月份的事情了，照理说这么一个小问题不会需要三年多的时间来处理，而这个疑问的答案就在下面的讨论之中。</p>\n<p>简单来说，这个问题在当月就被解决掉了，伴随着 5.2.17 的版本发布，这个问题理论上来说就不应该再存在了。然而事与愿违，在 5.2.17 版本发布之后，很快就有人提出了新的问题。在下面的 Comment 中有记录，同时这个人也单独提了一个 issue <a href=\"https://hibernate.atlassian.net/browse/HHH-12581\">NPE for Criteria query containing fetch join as a regression of HHH-12338</a>，即这次的改动造成了 NPE。然后可以看到在另一个维护者与之前 Vlad Mihalcea 的一番讨论之后，他们决定恢复这次的改动。</p>\n<img src=\"/2021/12/02/hibernate-incorrect-metamodel-with-no-reationship/hibernate-incorrect-metamodel-with-no-reationship-1.png\" class=\"\" title=\"revert commit\">\n<p>但是回退了就意味着问题又回来了，上面提到的 Vlad Mihalcea 从红帽离职，不再维护 Hibernate 还弄了一个新的项目就是上面提到的 <code>hibernate-types</code>。所以其他人在遇到相同的问题时，有部分和我们一样是采用的 <code>hibernate-types</code> 方案，自然而然有人把问题又丢给了 Vlad Mihalcea，不过是在 <code>hibernate-types</code> 项目。</p>\n<p>于是 Vlad Mihalcea 在 Github 提了新的 PR，见 <a href=\"https://github.com/hibernate/hibernate-orm/pull/3254\">HHH-12338 - Incorrect metamodel for basic collections</a>。不过很不幸的是，并没有后续。</p>\n<p>直到今年的 7 月，又一位开发者忍无可忍决定解决这个问题，提了新的 PR 出来，见 <a href=\"https://github.com/hibernate/hibernate-orm/pull/4096\">HHH-14724 Test-case for metamodel compile error with converters and validation</a>。这次终于引起了重视，并在一番努力之后，终于得到了合并，问题就此解决。</p>\n<p>题外话，这件事情，是不是跟前阵子遇到的 <a href=\"/2021/11/26/hibernate-automatic-2nd-collection-cache-eviction/\">Hibernate 配置自动清除二级缓存之集合缓存</a> 里面的插曲有点像？笑。</p>\n<h3 id=\"四-亲力亲为\"><a class=\"markdownIt-Anchor\" href=\"#四-亲力亲为\"></a> 四、亲力亲为</h3>\n<p>虽说这件事情现在看来终于告一段落了，不过由于时今年 9 月份才最终解决，虽然代码已经被合并到了各个版本的分支中，但 5.4 已经半年没有发过新的版本了。虽说 5.5 和 5.6 的版本已经没问题了，但由于项目框架的问题，并不能直接升级 Hibernate 的版本，而且本来 5.5 的版本就存在很大改动，现有架构并不能保证完全兼容（比如还是上面提到的 <code>hibernate-types</code> 就需要引入另外一个包），所以最后没有办法，只能决定采用重打包的方式自己对源码进行更新。</p>\n<p>剩下的事情就不再赘述了，大概流程就是下载 Hibernate 源码，找到 5.4.32.Final 的 tag，在此基础上手动把修复代码的变更拷贝过来，然后改个版本号，发布到私仓，再更改当前项目依赖的版本号，最后成功解决。</p>\n",
            "tags": [
                "Java",
                "Hibernate"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2021/11/26/hibernate-automatic-2nd-collection-cache-eviction/",
            "url": "https://blog.timerever.tk/2021/11/26/hibernate-automatic-2nd-collection-cache-eviction/",
            "title": "Hibernate 配置自动清除二级缓存之集合缓存",
            "date_published": "2021-11-26T07:21:10.000Z",
            "content_html": "<p>之前在项目上使用了 Hibernate，并开启了基于 caffeine 的二级缓存。因为 Hibernate 会自动处理缓存，所以一直没怎么关注。直到最近，发现在一种特定的情况下，Hibernate 不会自动清除二级缓存里面的集合缓存。问题最后解决起来其实很简单，增加一个配置项的事。不过问题寻求解决的过程还是蛮繁琐的，并没有人能够直接告诉这个问题的答案，在此记录一下这个问题的排查过程。</p>\n<blockquote>\n<p>太长不看版：Spring Boot 中设置属性 spring.jpa.properties.auto_evict_collection_cache=true 即可解决。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"一-问题出现\"><a class=\"markdownIt-Anchor\" href=\"#一-问题出现\"></a> 一、问题出现</h3>\n<p>假定我这里有两个实体，分别为 <code>Parent</code> 和 <code>Child</code>。然后 Parent 与 Child 之间存在一对多的对应关系，即在 Parent 的实体中，存在一个属性 <code>private Set&lt;Child&gt; children</code>，然后我们开启二级缓存 <code>@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)</code>。在这种情况下，我们先访问 Parent 实体并获取其中的 <code>children</code> 属性，确保其已被缓存。然后我们再单独操作 Child，我们新建一个 Child 对象 <code>Child child = new Child()</code> 并设置其 Parent 的值 <code>child.setParent(parent)</code> 并保存 Child 实体 <code>ChildRepository.save(child)</code>。然后我们回过来获取 Parent，会发现 Parent 的 <code>children</code> 的值仍为原数组对象， 没有我们新增的 <code>child</code> 对象。</p>\n<p>通过在 Google 上进行搜索，发现 stackoverflow 上存在几个类似的问题，再进一步的搜索后，发现在 Hibernate 官方 Bug 追踪网站上有人归纳并提出了这个问题 <a href=\"https://hibernate.atlassian.net/browse/HHH-4910\">automatic L2 collection cache eviction when an element is added/updated/removed</a>，可以看到不只是自己遇到的新增，修改/删除也会有类似的问题。</p>\n<h3 id=\"二-问题解决\"><a class=\"markdownIt-Anchor\" href=\"#二-问题解决\"></a> 二、问题解决</h3>\n<p>在上面链接的内容下方，问题提出者给出了一种 workaround 的方案，提供 <code>@PostPersist</code>、<code>@PostRemove</code> 及 <code>@PreUpdate</code> 的监听，并在监听中自动清理缓存。以及在之前查阅 stackoverflow 时，也有人认为，你需要在操作多方元素的时候，同时操作一方对应的集合，对其进行 add/remove 操作。</p>\n<p>但不管怎么说，这些都是一些 workaround 方案，因为 Hibernate 本身是有能力自动处理这些事情的。话又说回来，既然问题很早就被提出了，比如这个链接中使用的版本是 <code>3.3.1</code>，同时官方也已经记录了这个问题已经在 <code>4.3.0.Beta5</code> 中被修复了，可是为什么我们还是会遇到这个问题？这个答案其实在下面的评论中。</p>\n<img src=\"/2021/11/26/hibernate-automatic-2nd-collection-cache-eviction/hibernate-automatic-2nd-collection-cache-eviction-1.png\" class=\"\" title=\"Hibernate atlassian 下面的评论\">\n<p>点进链接是 GitHub 的 PR 请求，讨论中详细地记录了从贡献者提出 PR 到最后并合并的整个流程。看下来大概就是，贡献者向负责人解释了为了提出这个改动、有负责人担心是不是会影响性能并期望做成可配置的、贡献者支持了配置项、PR 最终被合并。所以问题已经很明了了，功能上是已经被修复了，但是因为做成了配置项，所以默认没有启用，我们需要手动启用这个特性。</p>\n<img src=\"/2021/11/26/hibernate-automatic-2nd-collection-cache-eviction/hibernate-automatic-2nd-collection-cache-eviction-2.png\" class=\"\" title=\"变成配置项的 commit\">\n<p>所以我们从这里点进去，去看一下我们怎么才能打开这个特性。最后我们可以看到是在 <code>hibernate-core/src/main/java/org/hibernate/cfg/AvailableSettings.java</code> 这个文件中定义了配置的名字。</p>\n<img src=\"/2021/11/26/hibernate-automatic-2nd-collection-cache-eviction/hibernate-automatic-2nd-collection-cache-eviction-3.png\" class=\"\" title=\"配置项的名字\">\n<p>所以到这里，这个问题就算是最终解决了。</p>\n<h3 id=\"三-插曲\"><a class=\"markdownIt-Anchor\" href=\"#三-插曲\"></a> 三、插曲</h3>\n<p>由于项目使用了 <code>spring-boot-starter-data-jpa</code> 依赖，所以这个配置项的设置并不是上面 Hibernate 的改动所提及的，于是继续在 Google 用 <code>auto_evict_collection_cache</code> 作为关键字进行搜索，寻找在 Spring Boot 中的配置方式。最终是得到了答案，Spring Boot 中的配置项为 <code>spring.jpa.properties.auto_evict_collection_cache</code>，不过在此之外还发现了一个小插曲。</p>\n<p><a href=\"https://hibernate.atlassian.net/browse/HHH-10614\">Auto evict collection cache throws exception with null values</a> 中描述了一个人开启了这个特性，然后在一个特定的情况下 Hibernate 会抛出异常。虽然这个问题很快就被解决了，不过现在回来想想，维护者在维护这种已经已经很庞大的项目时，对所有的改动都抱有谨慎的态度还是很有必要的。做成了配置项，虽然一方面会让很多不知道的人继续遇到这个问题，但同时也让很多无关的人避免了可能带来的新问题。所以这两种方案孰优孰劣，可能就见仁见智了吧。</p>\n",
            "tags": [
                "Java",
                "Hibernate"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/04/29/factory-patterns-with-java/",
            "url": "https://blog.timerever.tk/2017/04/29/factory-patterns-with-java/",
            "title": "设计模式之工厂模式的 Java 实现",
            "date_published": "2017-04-29T08:14:03.000Z",
            "content_html": "<p><strong>工厂模式</strong> 属于设计模式中创建型数据模式的一种，同时是软件设计模式中最常使用的模式。广义的工厂模式只是一个统称，其还可以继续分为 <strong>简单工厂模式</strong>、<strong>工厂模式</strong> 和 <strong>抽象工厂模式</strong>。这里对这些工厂模式进行说明并使用 Java 代码进行实现。</p>\n<span id=\"more\"></span>\n<h2 id=\"通常状态下的对象创建\"><a class=\"markdownIt-Anchor\" href=\"#通常状态下的对象创建\"></a> 通常状态下的对象创建</h2>\n<p>在不使用任何模式的时候，我们通常是需要什么对象，就直接创建什么对象，如下所示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Bicycle.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Bicycle</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Bicycle</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"built_in\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Motorbike.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Motorbike</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Motorbike</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"built_in\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Main.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Bicycle</span> <span class=\"variable\">bicycle</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Bicycle</span>();</span><br><span class=\"line\">        <span class=\"type\">Motorbike</span> <span class=\"variable\">motorbike</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Motorbike</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>Bicycle\nMotorbike\n</code></pre>\n<p>这很符合面向对象的思想，通过使用 <code>new</code> 操作符去构造对象实例，但是如果我们需要在实例化时做点初始化的工作呢？我们可以去使用构造方法，但是假如要做的事情很多，代码很长呢？或是我们在创建需要的对象之前必须先生成一些辅助功能的对象，我们就可以使用工厂模式来生成对象，而不用去关心构造对象实例的细节和其复杂的过程。</p>\n<h2 id=\"简单工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#简单工厂模式\"></a> 简单工厂模式</h2>\n<h3 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\"></a> 定义</h3>\n<p><strong>简单工厂模式 (Simple Factory Pattern)</strong> 又称为静态工厂方法 (Static Factory Method) 模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p>\n<h3 id=\"适用环境\"><a class=\"markdownIt-Anchor\" href=\"#适用环境\"></a> 适用环境</h3>\n<p>在以下情况下可以使用简单工厂模式：</p>\n<ul>\n<li>工厂类负责创建的对象比较少；由于创建的对象较少，不会造成工厂方法中的业务逻辑太过复杂。</li>\n<li>客户端只知道传入工厂类的参数，对于如何创建对象不关心；客户端既不需要关心创建细节，甚至连类名都不需要记住，只需要知道类型所对应的参数。</li>\n</ul>\n<h3 id=\"模式结构\"><a class=\"markdownIt-Anchor\" href=\"#模式结构\"></a> 模式结构</h3>\n<img src=\"/2017/04/29/factory-patterns-with-java/factory-patterns-with-java-1.png\" class=\"\" title=\"简单工厂模式模式结构\">\n<h3 id=\"举例\"><a class=\"markdownIt-Anchor\" href=\"#举例\"></a> 举例</h3>\n<img src=\"/2017/04/29/factory-patterns-with-java/factory-patterns-with-java-2.png\" class=\"\" title=\"简单工厂模式举例\">\n<p>假如这里有一个农场充当工厂类，通过告知农场所需要的水果类型返回所需的水果，即通过传入不同的参数获取不同的对象。</p>\n<p>对象类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Fruit.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Fruit</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Apple.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Apple</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Fruit</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Apple</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"built_in\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Banana.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Banana</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Fruit</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Banana</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"built_in\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Orange.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Orange</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Fruit</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Orange</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"built_in\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>工厂类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* FarmFactory.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FarmFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Fruit <span class=\"title function_\">get</span><span class=\"params\">(String variety)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (variety) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;apple&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Apple</span>();</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;banana&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Banana</span>();</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;orange&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Orange</span>();</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Main.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">FarmFactory</span> <span class=\"variable\">farmFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FarmFactory</span>();</span><br><span class=\"line\">        <span class=\"type\">Fruit</span> <span class=\"variable\">apple</span> <span class=\"operator\">=</span> farmFactory.get(<span class=\"string\">&quot;apple&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Fruit</span> <span class=\"variable\">banana</span> <span class=\"operator\">=</span> farmFactory.get(<span class=\"string\">&quot;banana&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Fruit</span> <span class=\"variable\">orange</span> <span class=\"operator\">=</span> farmFactory.get(<span class=\"string\">&quot;orange&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<pre><code>Apple\nBanana\nOrange\n</code></pre>\n<h2 id=\"工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#工厂模式\"></a> 工厂模式</h2>\n<h3 id=\"模式动机\"><a class=\"markdownIt-Anchor\" href=\"#模式动机\"></a> 模式动机</h3>\n<p>接上面的例子，假如现在农场新种植了一种水果，那么为了完成工厂类的任务，就需要去修改工厂类的代码添加内部逻辑，这显然是违背开闭原则的。</p>\n<p>所谓开闭原则，就是对扩展开放，对修改关闭。“开”是指对于组件功能的扩展是开放的，是允许对其进行功能扩展的，“闭”是对原有代码的修改是封闭的，即修改原有的代码对外部的使用是透明的。即对模块行为进行扩展时，不必改动模块的源代码或者二进制代码，所以就出现了工厂模式。</p>\n<p>参见：<a href=\"http://baike.baidu.com/item/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99\">http://baike.baidu.com/item/开闭原则</a></p>\n<p>现假如有一个生产各种按钮的工厂，通过对该系统进行修改，不再设计一个按钮工厂类来统一负责所有产品的创建，而是将具体按钮的创建过程交给专门的工厂子类去完成，我们先定义一个抽象的按钮工厂类，再定义具体的工厂类来生成圆形按钮、矩形按钮、菱形按钮等，它们实现在在抽象按钮工厂中定义的方法。这种抽象化的结果使这种结构可以在不修改具体工厂类的情况下引进新的产品，如果出现新的按钮类型，只需要为这种新类型的按钮创建一个具体的工厂类就可以获得该新按钮的实例，这一特点无疑使得工厂方法模式具有超越简单工厂模式的优越性，更加符合“开闭原则”。</p>\n<img src=\"/2017/04/29/factory-patterns-with-java/factory-patterns-with-java-3.png\" class=\"\" title=\"简单工厂模式\"> <img src=\"/2017/04/29/factory-patterns-with-java/factory-patterns-with-java-4.png\" class=\"\" title=\"工厂模式\">\n<h3 id=\"定义-2\"><a class=\"markdownIt-Anchor\" href=\"#定义-2\"></a> 定义</h3>\n<p><strong>工厂方法模式 (Factory Method Pattern)</strong> 又称为工厂模式，也叫虚拟构造器 (Virtual Constructor) 模式或者多态工厂 (Polymorphic Factory) 模式，它属于类创建型模式。在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪—个具体产品类。</p>\n<h3 id=\"模式结构-2\"><a class=\"markdownIt-Anchor\" href=\"#模式结构-2\"></a> 模式结构</h3>\n<img src=\"/2017/04/29/factory-patterns-with-java/factory-patterns-with-java-5.png\" class=\"\" title=\"工厂模式模式结构\">\n<h3 id=\"举例-2\"><a class=\"markdownIt-Anchor\" href=\"#举例-2\"></a> 举例</h3>\n<p>对上面的按钮工厂的工厂模式实现。</p>\n<p>对象类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Button.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Button</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CircleButton.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CircleButton</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Button</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">CircleButton</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"built_in\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* DiamondButton.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DiamondButton</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Button</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DiamondButton</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"built_in\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* RectangleButton.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RectangleButton</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Button</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">RectangleButton</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"built_in\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>工厂类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* FarmFactory.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ButtonFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Button <span class=\"title function_\">create</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CircleButtonFactory.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CircleButtonFactory</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ButtonFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Button <span class=\"title function_\">create</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CircleButton</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* DiamondButtonFactory.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DiamondButtonFactory</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ButtonFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Button <span class=\"title function_\">create</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DiamondButton</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* RectangleButtonFactory.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RectangleButtonFactory</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ButtonFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Button <span class=\"title function_\">create</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RectangleButton</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Main.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ButtonFactory</span> <span class=\"variable\">buttonFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CircleButtonFactory</span>();</span><br><span class=\"line\">        <span class=\"type\">Button</span> <span class=\"variable\">button</span> <span class=\"operator\">=</span> buttonFactory.create();</span><br><span class=\"line\">        buttonFactory = <span class=\"keyword\">new</span> <span class=\"title class_\">DiamondButtonFactory</span>();</span><br><span class=\"line\">        button = buttonFactory.create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<pre><code>CircleButton\nDiamondButton\n</code></pre>\n<h2 id=\"抽象工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#抽象工厂模式\"></a> 抽象工厂模式</h2>\n<h3 id=\"模式动机-2\"><a class=\"markdownIt-Anchor\" href=\"#模式动机-2\"></a> 模式动机</h3>\n<p>在工厂方法模式中具体工厂负责生产具体的产品，每一个具体工厂对应一种具体产品，工厂方法也具有唯一性，一般情况下，一个具体工厂中只有一个工厂方法或者一组重栽的工厂方法。但是有时候我们需要一个工厂可以提供多个产品对象，而不是单一的产品对象。</p>\n<p>为了更清晰地理解工厂方法糢式，需要先引入两个概念：</p>\n<ul>\n<li>产品等级结构：产品等级结构即产品的继承结构，如一个抽象类是电视机，其子类有海尔电视机、海信电视机、TCL电视机，则抽象电视机与具体品牌的电视机之间构成了—个产品等级结构，抽象电视机是父类，而具体品牌的电视机是其子类。</li>\n<li>产品族：在抽象工厂模式中，产品族是指由同一个工厂生产的，位于不同产品等级结构中的一组产品，如海尔电器工厂生产的海尔电视机、海尔电冰箱，海尔电视机位于电视机产品等级结构中，海尔电冰箱位于电冰箱产品等级结构中。</li>\n</ul>\n<h3 id=\"定义-3\"><a class=\"markdownIt-Anchor\" href=\"#定义-3\"></a> 定义</h3>\n<p><strong>抽象工厂模式 (Abstract Factory Pattern)</strong> 提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为 Kit 模式，属于对象创建型模式。</p>\n<h3 id=\"应用场景\"><a class=\"markdownIt-Anchor\" href=\"#应用场景\"></a> 应用场景</h3>\n<ul>\n<li>当系统所提供的工厂生产的具体产品并不是一个简单的对象，而是多个位于不同产品等级结构、属于不同类型的具体产品时就可以使用抽象工厂模式。</li>\n<li>抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形式。</li>\n</ul>\n<img src=\"/2017/04/29/factory-patterns-with-java/factory-patterns-with-java-6.png\" class=\"\" title=\"抽象工厂模式应用场景\">\n<h3 id=\"模式适用环境\"><a class=\"markdownIt-Anchor\" href=\"#模式适用环境\"></a> 模式适用环境</h3>\n<ul>\n<li>一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节。</li>\n<li>系统中有多于一个的产品族，但每次只使用其中某一产品族。</li>\n<li>属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。</li>\n<li>产品等级结构稳定，设计完成之后，不会向系统中增加新的产品等级结构或者删除已有的产品等级结构。</li>\n</ul>\n<h3 id=\"模式结构-3\"><a class=\"markdownIt-Anchor\" href=\"#模式结构-3\"></a> 模式结构</h3>\n<img src=\"/2017/04/29/factory-patterns-with-java/factory-patterns-with-java-7.png\" class=\"\" title=\"抽象工厂模式模式结构\">\n<h3 id=\"举例-3\"><a class=\"markdownIt-Anchor\" href=\"#举例-3\"></a> 举例</h3>\n<p>某软件公司要开发一套界面皮肤库，可以对基于 .NET 平台的桌面软件进行界面美化。用户在使用时可以通过菜单来选择皮肤，不同的皮肤将提供视觉效果不同的按钮、文本框、组合框等界面元素，例如春天 (Spring) 风格的皮肤将提供浅绿色的按钮、绿色边框的文本框和绿色边框的组合框，而夏天 (Summer) 风格的皮肤则提供浅蓝色的按钮、蓝色边框的文本框和蓝色边框的组合框，其结构示意图如下图所示：</p>\n<img src=\"/2017/04/29/factory-patterns-with-java/factory-patterns-with-java-8.png\" class=\"\" title=\"抽象工厂模式举例\">\n<p>该皮肤库需要具备良好的灵活性和可扩展性，用户可以自由选择不同的皮肤，开发人员可以在不修改既有代码的基础上增加新的皮肤，现使用抽象工厂模式来设计该界面皮肤库。</p>\n<p>对象类：</p>\n<ul>\n<li>ComboBox</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* ComboBox.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ComboBox</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* SummerComboBox.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SummerComboBox</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ComboBox</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SummerComboBox</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"built_in\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* SpringComboBox.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringComboBox</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ComboBox</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SpringComboBox</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"built_in\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Button</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Button.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Button</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* SummerButton.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SummerButton</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Button</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SummerButton</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"built_in\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* SpringButton.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringButton</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Button</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SpringButton</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"built_in\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>TextField</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* TextField.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TextField</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* SummerTextField.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SummerTextField</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">TextField</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SummerTextField</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"built_in\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* SpringTextField.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringTextField</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">TextField</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SpringTextField</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"built_in\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>工厂类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* SkinFactory.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SkinFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> ComboBox <span class=\"title function_\">getComboBox</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Button <span class=\"title function_\">getButton</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> TextField <span class=\"title function_\">getTextField</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* SummerSkinFactory.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SummerSkinFactory</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SkinFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ComboBox <span class=\"title function_\">getComboBox</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SummerComboBox</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Button <span class=\"title function_\">getButton</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SummerButton</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TextField <span class=\"title function_\">getTextField</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SummerTextField</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* SpringSkinFactory.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringSkinFactory</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SkinFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ComboBox <span class=\"title function_\">getComboBox</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SpringComboBox</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Button <span class=\"title function_\">getButton</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SpringButton</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TextField <span class=\"title function_\">getTextField</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SpringTextField</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Main.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">SkinFactory</span> <span class=\"variable\">skinFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SummerSkinFactory</span>();</span><br><span class=\"line\">        <span class=\"type\">ComboBox</span> <span class=\"variable\">comboBox</span> <span class=\"operator\">=</span> skinFactory.getComboBox();</span><br><span class=\"line\">        <span class=\"type\">Button</span> <span class=\"variable\">button</span> <span class=\"operator\">=</span> skinFactory.getButton();</span><br><span class=\"line\">        <span class=\"type\">TextField</span> <span class=\"variable\">textField</span> <span class=\"operator\">=</span> skinFactory.getTextField();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<pre><code>SummerComboBox\nSummerButton\nSummerTextField\n</code></pre>\n",
            "tags": [
                "Java",
                "Design Pattern",
                "Factory Patterns"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/04/23/client-custom-ssl/",
            "url": "https://blog.timerever.tk/2017/04/23/client-custom-ssl/",
            "title": "Apache HttpClient 4.5.x 忽略证书验证",
            "date_published": "2017-04-23T02:44:20.000Z",
            "content_html": "<p>在使用 Apache HttpComponents 时，需要访问一个第三方接口进行数据传输，但是由于对方使用的是 Let’s Encrypt 的证书，虽然浏览器是信任的，但是在调试的时候发现程序并不信任,所以采用自定义 SSLContext 的方式解决该问题。</p>\n<h3 id=\"查找官方解决方案\"><a class=\"markdownIt-Anchor\" href=\"#查找官方解决方案\"></a> 查找官方解决方案</h3>\n<p>作为一只程序猿，翻官方文档肯定是首选方案。官方提供了一种 Custom SSL context 的实现。</p>\n<p><a href=\"http://hc.apache.org/httpcomponents-client-4.5.x/httpclient/examples/org/apache/http/examples/client/ClientCustomSSL.java\">http://hc.apache.org/httpcomponents-client-4.5.x/httpclient/examples/org/apache/http/examples/client/ClientCustomSSL.java</a></p>\n<span id=\"more\"></span>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * ====================================================================</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class=\"line\"><span class=\"comment\"> * or more contributor license agreements.  See the NOTICE file</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed with this work for additional information</span></span><br><span class=\"line\"><span class=\"comment\"> * regarding copyright ownership.  The ASF licenses this file</span></span><br><span class=\"line\"><span class=\"comment\"> * to you under the Apache License, Version 2.0 (the</span></span><br><span class=\"line\"><span class=\"comment\"> * &quot;License&quot;); you may not use this file except in compliance</span></span><br><span class=\"line\"><span class=\"comment\"> * with the License.  You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *   http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing,</span></span><br><span class=\"line\"><span class=\"comment\"> * software distributed under the License is distributed on an</span></span><br><span class=\"line\"><span class=\"comment\"> * &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class=\"line\"><span class=\"comment\"> * KIND, either express or implied.  See the License for the</span></span><br><span class=\"line\"><span class=\"comment\"> * specific language governing permissions and limitations</span></span><br><span class=\"line\"><span class=\"comment\"> * under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> * ====================================================================</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * This software consists of voluntary contributions made by many</span></span><br><span class=\"line\"><span class=\"comment\"> * individuals on behalf of the Apache Software Foundation.  For more</span></span><br><span class=\"line\"><span class=\"comment\"> * information on the Apache Software Foundation, please see</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;http://www.apache.org/&gt;.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> org.apache.http.examples.client;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.net.ssl.SSLContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.conn.ssl.TrustSelfSignedStrategy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.ssl.SSLContexts;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.util.EntityUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * This example demonstrates how to create secure connections with a custom SSL</span></span><br><span class=\"line\"><span class=\"comment\"> * context.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClientCustomSSL</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Trust own CA and all self-signed certs</span></span><br><span class=\"line\">        <span class=\"type\">SSLContext</span> <span class=\"variable\">sslcontext</span> <span class=\"operator\">=</span> SSLContexts.custom()</span><br><span class=\"line\">                .loadTrustMaterial(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;my.keystore&quot;</span>), <span class=\"string\">&quot;nopassword&quot;</span>.toCharArray(),</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">TrustSelfSignedStrategy</span>())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"comment\">// Allow TLSv1 protocol only</span></span><br><span class=\"line\">        <span class=\"type\">SSLConnectionSocketFactory</span> <span class=\"variable\">sslsf</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SSLConnectionSocketFactory</span>(</span><br><span class=\"line\">                sslcontext,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[] &#123; <span class=\"string\">&quot;TLSv1&quot;</span> &#125;,</span><br><span class=\"line\">                <span class=\"literal\">null</span>,</span><br><span class=\"line\">                SSLConnectionSocketFactory.getDefaultHostnameVerifier());</span><br><span class=\"line\">        <span class=\"type\">CloseableHttpClient</span> <span class=\"variable\">httpclient</span> <span class=\"operator\">=</span> HttpClients.custom()</span><br><span class=\"line\">                .setSSLSocketFactory(sslsf)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">HttpGet</span> <span class=\"variable\">httpget</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpGet</span>(<span class=\"string\">&quot;https://httpbin.org/&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Executing request &quot;</span> + httpget.getRequestLine());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">CloseableHttpResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> httpclient.execute(httpget);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">HttpEntity</span> <span class=\"variable\">entity</span> <span class=\"operator\">=</span> response.getEntity();</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;----------------------------------------&quot;</span>);</span><br><span class=\"line\">                System.out.println(response.getStatusLine());</span><br><span class=\"line\">                EntityUtils.consume(entity);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                response.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            httpclient.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于考虑到该接口为第三方接口，对方可能进行证书的更换，再加上由于所传输信息是可以公开的、非重要数据的数据，所以并不采用官方给出的导入证书而使用不进行检查直接信任的方式处理。</p>\n<h3 id=\"定义自己的-sslcontext\"><a class=\"markdownIt-Anchor\" href=\"#定义自己的-sslcontext\"></a> 定义自己的 SSLContext</h3>\n<p>所以问题的关键在于自定义 <code>SSLContext</code>，查看其 <code>loadTrustMaterial</code> 方法的源代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> SSLContextBuilder <span class=\"title function_\">loadTrustMaterial</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> KeyStore truststore,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> TrustStrategy trustStrategy)</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException, KeyStoreException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">TrustManagerFactory</span> <span class=\"variable\">tmfactory</span> <span class=\"operator\">=</span> TrustManagerFactory.getInstance(</span><br><span class=\"line\">            TrustManagerFactory.getDefaultAlgorithm());</span><br><span class=\"line\">    tmfactory.init(truststore);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> TrustManager[] tms = tmfactory.getTrustManagers();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tms != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (trustStrategy != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; tms.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"type\">TrustManager</span> <span class=\"variable\">tm</span> <span class=\"operator\">=</span> tms[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tm <span class=\"keyword\">instanceof</span> X509TrustManager) &#123;</span><br><span class=\"line\">                    tms[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">TrustManagerDelegate</span>(</span><br><span class=\"line\">                            (X509TrustManager) tm, trustStrategy);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">final</span> TrustManager tm : tms) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.trustmanagers.add(tm);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可见这边是使用实现了 <code>TrustStrategy</code> 接口的 <code>TrustSelfSignedStrategy</code> 对 X509 证书进行管理，所以我们需要自定义一个 <code>TrustStrategy</code> 的实例。</p>\n<p>先查看 <code>TrustStrategy</code> 接口的源代码，发现除了继承了 <code>org.apache.http.ssl.TrustStrategy</code> 之外没有添加任何内容。由于该类在 http-core 包中，直接反编译查看得：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">TrustStrategy</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isTrusted</span><span class=\"params\">(X509Certificate[] var1, String var2)</span> <span class=\"keyword\">throws</span> CertificateException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以这里需要重写 <code>isTrusted</code> 方法，不进行验证，直接返回 <code>true</code>。由于不需要导入 Keystore，所以直接给空值，代码如下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">SSLContext</span> <span class=\"variable\">sslcontext</span> <span class=\"operator\">=</span> SSLContexts.custom()</span><br><span class=\"line\">\t    .loadTrustMaterial(<span class=\"literal\">null</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">TrustStrategy</span>() &#123;</span><br><span class=\"line\">\t        <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t        <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isTrusted</span><span class=\"params\">(X509Certificate[] x509Certificates, String s)</span> <span class=\"keyword\">throws</span> CertificateException &#123;</span><br><span class=\"line\">\t            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t    &#125;)</span><br><span class=\"line\">\t    .build();</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a class=\"markdownIt-Anchor\" href=\"#测试\"></a> 测试</h3>\n<p>修改后的完整代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.conn.ssl.TrustStrategy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.ssl.SSLContexts;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.util.EntityUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.net.ssl.SSLContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.KeyManagementException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.KeyStoreException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.NoSuchAlgorithmException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.cert.CertificateException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.cert.X509Certificate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by timer on 2017/4/23.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestClientCustomSSL</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 自定义 SSLContext 使信任所有证书。</span></span><br><span class=\"line\">        <span class=\"type\">SSLContext</span> <span class=\"variable\">sslcontext</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            sslcontext = SSLContexts.custom()</span><br><span class=\"line\">\t                .loadTrustMaterial(<span class=\"literal\">null</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">TrustStrategy</span>() &#123;</span><br><span class=\"line\">\t                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t                    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isTrusted</span><span class=\"params\">(X509Certificate[] x509Certificates, String s)</span> <span class=\"keyword\">throws</span> CertificateException &#123;</span><br><span class=\"line\">\t                        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t                    &#125;</span><br><span class=\"line\">\t                &#125;)</span><br><span class=\"line\">\t                .build();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (KeyManagementException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (KeyStoreException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 仅允许 TLSv1 协议</span></span><br><span class=\"line\">        <span class=\"type\">SSLConnectionSocketFactory</span> <span class=\"variable\">sslsf</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SSLConnectionSocketFactory</span>(</span><br><span class=\"line\">                sslcontext,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[] &#123; <span class=\"string\">&quot;TLSv1&quot;</span> &#125;,</span><br><span class=\"line\">                <span class=\"literal\">null</span>,</span><br><span class=\"line\">                SSLConnectionSocketFactory.getDefaultHostnameVerifier());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>(<span class=\"type\">CloseableHttpClient</span> <span class=\"variable\">httpclient</span> <span class=\"operator\">=</span> HttpClients.custom().setSSLSocketFactory(sslsf).build()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">HttpGet</span> <span class=\"variable\">httpget</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpGet</span>(<span class=\"string\">&quot;https://httpbin.org/get&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span>(<span class=\"type\">CloseableHttpResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> httpclient.execute(httpget)) &#123;</span><br><span class=\"line\">                <span class=\"type\">HttpEntity</span> <span class=\"variable\">entity</span> <span class=\"operator\">=</span> response.getEntity();</span><br><span class=\"line\">                System.out.println(EntityUtils.toString(entity));</span><br><span class=\"line\">                EntityUtils.consume(entity);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>成功访问，输出如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;args&quot;: &#123;&#125;, </span><br><span class=\"line\">  &quot;headers&quot;: &#123;</span><br><span class=\"line\">    &quot;Accept-Encoding&quot;: &quot;gzip,deflate&quot;, </span><br><span class=\"line\">    &quot;Connection&quot;: &quot;close&quot;, </span><br><span class=\"line\">    &quot;Host&quot;: &quot;httpbin.org&quot;, </span><br><span class=\"line\">    &quot;User-Agent&quot;: &quot;Apache-HttpClient/4.5.3 (Java/1.8.0_121)&quot;</span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  &quot;origin&quot;: &quot;60.219.211.8&quot;, </span><br><span class=\"line\">  &quot;url&quot;: &quot;https://httpbin.org/get&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注：这里访问的并不是一个不受信任的站点，但是实际测试不受信任的站点也可以正常访问。</strong></p>\n",
            "tags": [
                "Java",
                "HttpClient"
            ]
        }
    ]
}