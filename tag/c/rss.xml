<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>A Blog • Posts by &#34;c&#34; tag</title>
        <link>https://blog.timerever.tk</link>
        <description>Just another blog.</description>
        <language>zh-CN</language>
        <pubDate>Wed, 26 Apr 2017 15:01:27 +0000</pubDate>
        <lastBuildDate>Wed, 26 Apr 2017 15:01:27 +0000</lastBuildDate>
        <category>Java</category>
        <category>HttpClient</category>
        <category>Design Pattern</category>
        <category>Docker</category>
        <category>Dockerfile</category>
        <category>Java Web</category>
        <category>Linux</category>
        <category>C</category>
        <category>Factory Patterns</category>
        <category>Android</category>
        <category>Huawei</category>
        <category>CyanogenMod</category>
        <category>Git</category>
        <category>GitHub</category>
        <category>Hibernate</category>
        <category>VMware</category>
        <category>vmdk</category>
        <category>Keycloak</category>
        <category>OAuth2</category>
        <category>SSO</category>
        <category>wget</category>
        <category>Regular Expression</category>
        <category>Ubuntu</category>
        <category>Ruby</category>
        <category>Jekyll</category>
        <category>Windows</category>
        <category>Regedit</category>
        <category>PowerShell</category>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/04/26/undefined-reference-to-pthread_create/</guid>
            <title>对 “pthread_create” 未定义的引用</title>
            <link>https://blog.timerever.tk/2017/04/26/undefined-reference-to-pthread_create/</link>
            <category>Linux</category>
            <category>C</category>
            <pubDate>Wed, 26 Apr 2017 15:01:27 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;今天在对 Linux 多线程编程进行学习时，在编译代码时出现了问题。&lt;/p&gt;
&lt;p&gt;由于使用了 &lt;code&gt;pthread_create&lt;/code&gt;, &lt;code&gt;pthread_join&lt;/code&gt; 等函数，在使用 &lt;code&gt;gcc&lt;/code&gt; 编译时，出现了 &lt;strong&gt;对 ‘pthread_create’ 未定义的引用&lt;/strong&gt; 的错误，在上网查询后，得知 pthread 库不是 Linux 系统默认的库，所以在编译时需要添加 &lt;code&gt;-lpthread&lt;/code&gt; 参数来使用 libpthread.a 库进行编译。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# gcc -o pthread -lpthread pthread.c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结果还是失败。再次上网查阅，得知 &lt;code&gt;-lpthread&lt;/code&gt; 应该放到最后面，修改后编译通过。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# gcc thread.c -o thread.c -lpthread
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;参考链接：&lt;a href=&#34;http://blog.csdn.net/besfanfei/article/details/7542396&#34;&gt;http://blog.csdn.net/besfanfei/article/details/7542396&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/04/24/fix-sigaction/</guid>
            <title>sigaction 自定义信号处理函数的“修复”</title>
            <link>https://blog.timerever.tk/2017/04/24/fix-sigaction/</link>
            <category>Linux</category>
            <category>C</category>
            <pubDate>Mon, 24 Apr 2017 11:15:05 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;在对嵌入式 Linux 系统程序开发中的进程间通信进行学习时，涉及到了信号集函数组，书中给出的示例如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该实例首先把 SIGQUIT、SIGINT 两个信号加入信号集，然后将该信号集设为阻塞状态，&lt;br&gt;并在该状态下使程序暂停 5 秒。接下来再将信号集设置为非阻塞状态，再对这两个信号分别&lt;br&gt;操作，其中 SIGQUIT 执行默认操作，而 SIGINT 执行用户自定义函数的操作。源代码如下&lt;br&gt;所示：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;my_func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; signum)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;If you want to quit,please try SIGQUIT\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;sigset_t&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;,pendset;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sigaction&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;action1&lt;/span&gt;,&lt;span class=&#34;title&#34;&gt;action2&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(sigemptyset(&amp;amp;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;)&amp;lt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		perror(&lt;span class=&#34;string&#34;&gt;&amp;quot;sigemptyset&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(sigaddset(&amp;amp;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;,SIGQUIT)&amp;lt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		perror(&lt;span class=&#34;string&#34;&gt;&amp;quot;sigaddset&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(sigaddset(&amp;amp;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;,SIGINT)&amp;lt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		perror(&lt;span class=&#34;string&#34;&gt;&amp;quot;sigaddset&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(sigprocmask(SIG_BLOCK,&amp;amp;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;,&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)&amp;lt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		perror(&lt;span class=&#34;string&#34;&gt;&amp;quot;sigprocmask&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;blocked\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		sleep(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(sigprocmask(SIG_UNBLOCK,&amp;amp;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;,&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)&amp;lt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		perror(&lt;span class=&#34;string&#34;&gt;&amp;quot;sigprocmask&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;unblock\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(sigismember(&amp;amp;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;,SIGINT))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			sigemptyset(&amp;amp;action1.sa_mask);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			action1.sa_handler=my_func;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			sigaction(SIGINT,&amp;amp;action1,&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(sigismember(&amp;amp;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;,SIGQUIT))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			sigemptyset(&amp;amp;action2.sa_mask);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			action2.sa_handler = SIG_DFL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			sigaction(SIGTERM,&amp;amp;action2,&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;理论上，按说明所述及代码的编写，使用 &lt;code&gt;Ctrl-C&lt;/code&gt; 传递 &lt;code&gt;SIGINT&lt;/code&gt; 信号后，会转到自定义处理函数 &lt;code&gt;my_func&lt;/code&gt;，但在实际操作中，在进入自定义处理函数后，程序直接退出。&lt;strong&gt;猜测&lt;/strong&gt;是由于在进行自定义处理函数后，系统仍然对信号做了默认的处理。&lt;/p&gt;
&lt;p&gt;在请教老师后，给出了一种解决方案，对 &lt;code&gt;sigaction&lt;/code&gt; 结构体中的 &lt;code&gt;sa_flags&lt;/code&gt; 进行赋值，这里先贴出该结构体。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sigaction&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; (*sa_handler)(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; signo);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;sigset_t&lt;/span&gt; sa_mask;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; sa_flags;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; (*sa_restore)(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;sa_handler&lt;/code&gt; 是一个函数指针，指定信号关联函数，这里除可以是用户自定义的处理函数&lt;br&gt;外，还可以为 &lt;code&gt;SIG_DFL&lt;/code&gt;（采用缺省的处理方式）或 &lt;code&gt;SIG_IGN&lt;/code&gt;（忽略信号）。它的处理函数只&lt;br&gt;有一个参数，即信号值。&lt;br&gt;&lt;code&gt;sa_mask&lt;/code&gt; 是一个信号集，它可以指定在信号处理程序执行过程中哪些信号应当被阻塞，&lt;br&gt;在调用信号捕获函数之前，该信号集要加入到信号的信号屏蔽字中。&lt;br&gt;&lt;code&gt;sa_flags&lt;/code&gt; 中包含了许多标志位，是对信号进行处理的各个选择项。它的常见可选值如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;选项&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;SA_NODEFER&amp;#x2F;SA_NOMASK&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;当捕捉到此信号时，在执行其信号捕捉函数时，系统不会自动阻塞此信号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;SA_NOCLDSTOP&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;进程忽略子进程产生的任何 SIGSTOP、SIGTSTP、SIGTTIN 和 SIGTTOU 信号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;SA_RESTART&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;可让重启的系统调用重新起作用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;SA_ONESHOT&amp;#x2F;SA_RESETHAND&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;自定义信号只执行一次，在执行完毕后恢复信号的系统默认动作&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;将 &lt;code&gt;sigaction&lt;/code&gt; 结构体中的 &lt;code&gt;sa_flags&lt;/code&gt; 成员赋值为 0，修改后的部分代码如下。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(sigismember(&amp;amp;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;,SIGINT))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		sigemptyset(&amp;amp;action1.sa_mask);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		action1.sa_handler=my_func;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		action1.sa_flags=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;//添加此行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		sigaction(SIGINT,&amp;amp;action1,&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(sigismember(&amp;amp;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;,SIGQUIT))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		sigemptyset(&amp;amp;action2.sa_mask);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		action2.sa_handler = SIG_DFL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		sigaction(SIGTERM,&amp;amp;action2,&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这样修改后，程序确实正常运行了。但是根据该书所述和在网上查询，始终未能理解为何这样操作，而且之后尝试赋其他值，依然正常运行。网上国内的氛围就是博客间互相复制互相抄袭，找不到多少主观的分析，所以一直未能解决，仅在此做下记录。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
