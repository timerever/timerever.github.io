<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.timerever.tk</id>
    <title>A Blog • Posts by &#34;translate&#34; tag</title>
    <link href="https://blog.timerever.tk" />
    <updated>2022-01-07T11:34:47.000Z</updated>
    <category term="Java" />
    <category term="HttpClient" />
    <category term="Jackson" />
    <category term="Design Pattern" />
    <category term="Docker" />
    <category term="Dockerfile" />
    <category term="Java Web" />
    <category term="Linux" />
    <category term="C" />
    <category term="Android" />
    <category term="Huawei" />
    <category term="CyanogenMod" />
    <category term="Factory Patterns" />
    <category term="Hibernate" />
    <category term="Git" />
    <category term="GitHub" />
    <category term="Kubernetes" />
    <category term="K8s" />
    <category term="K3s" />
    <category term="Keycloak" />
    <category term="OAuth2" />
    <category term="SSO" />
    <category term="VMware" />
    <category term="vmdk" />
    <category term="MySQL" />
    <category term="Tutorial" />
    <category term="wget" />
    <category term="Regular Expression" />
    <category term="Sharding" />
    <category term="Sharding-JDBC" />
    <category term="Translate" />
    <category term="Algorithm" />
    <category term="Sort" />
    <category term="Ubuntu" />
    <category term="Ruby" />
    <category term="Jekyll" />
    <category term="Windows" />
    <category term="Regedit" />
    <category term="PowerShell" />
    <entry>
        <id>https://blog.timerever.tk/2022/01/07/soft-deletion-in-hibernate-things-you-may-miss/</id>
        <title>【翻译】Hibernate 软删除：你可能忽略掉的一些东西</title>
        <link rel="alternate" href="https://blog.timerever.tk/2022/01/07/soft-deletion-in-hibernate-things-you-may-miss/"/>
        <content type="html">&lt;img src=&#34;/2022/01/07/soft-deletion-in-hibernate-things-you-may-miss/soft-deletion-in-hibernate-things-you-may-miss-1.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;我们在设计生产系统的时候，无论是为了方便恢复、便于查找问题还是审计等，总是绕不开软删除这个话题。国内互联网公司大部分均使用 MyBatis 作为 ORM 框架，所以大部分的资料也都是 MyBatis 的各种软删除实现，用起来也都没什么问题。但是手里项目使用的是 Hibernate，虽然 Hibernate 也可以找到很多软删除的方案，当初最开始参考的也是原文列出的第一个 Baeldung 网站的方案，但是由于 Hibernate 大部分时候都是直接对实体进行操作，所以软删除用起来会遇到很多的问题。比如自己就遇到了软删除 + 二级缓存冲突的问题，先抛开这个不谈，毕竟在权衡之下直接关闭二级缓存就解决了问题，在基本使用时软删除也不可避免地会遇到各种问题。正好偶然看到了 JPA Buddy 上一篇文章在说这个问题，索性简单翻译下，希望大家在设计软删除方案的时候能够进行充分的考虑。&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://www.jpa-buddy.com/blog/soft-deletion-in-hibernate-things-you-may-miss/&#34;&gt;Soft Deletion in Hibernate: Things You May Miss&lt;/a&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;软删除是一种广泛使用的模式，简单来说就是：你仅仅将实体标记为删除状态并通过在 SELECT 查询中过滤他们而不是物理删除这些实体。使用软删除有很多常见的原因：审计、可恢复性、或者可以很方便地在将数据伪造成删除状态的同时保持着对这些“已删除”记录的引用。&lt;/p&gt;
&lt;p&gt;在这篇文章中我们将关注一些大部分讲述软删除方案的文章所未提到的细节。&lt;/p&gt;
&lt;h4 id=&#34;sqldelete-where&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sqldelete-where&#34;&gt;&lt;/a&gt; @SQLDelete + @Where&lt;/h4&gt;
&lt;p&gt;如果你以“soft deletion hibernate”为关键词在谷歌上进行搜索的话，你很可能找到 &lt;a href=&#34;https://www.baeldung.com/spring-jpa-soft-delete&#34;&gt;Eugen Paraschiv&lt;/a&gt;、&lt;a href=&#34;https://vladmihalcea.com/the-best-way-to-soft-delete-with-hibernate/&#34;&gt;Vlad Mihalcea&lt;/a&gt; 或是 &lt;a href=&#34;https://thorben-janssen.com/implement-soft-delete-hibernate/&#34;&gt;Thorben Janssen&lt;/a&gt; 写的教程。他们都建议使用 Hibernate 的 &lt;code&gt;@SQLDelete&lt;/code&gt; 和 &lt;code&gt;@Where&lt;/code&gt; 注解来让程序自动设置删除标识并可以在查询时自动过滤这些数据：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Entity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Table(name = &amp;quot;article&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@SQLDelete(sql = &amp;quot;update article set deleted=true where id=?&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Where(clause = &amp;quot;deleted = false&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Article&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;meta&#34;&gt;@Id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;meta&#34;&gt;@GeneratedValue(strategy = GenerationType.SEQUENCE)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;meta&#34;&gt;@Column(name = &amp;quot;id&amp;quot;, nullable = false)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Long id;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;meta&#34;&gt;@Column(name = &amp;quot;deleted&amp;quot;, nullable = false)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Boolean&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;deleted&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;// other properties, getters and setters omitted&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;@SQLDelete&lt;/code&gt; 注解会在 Hibernate 管理的对象被删除时执行我们设定好的原生 SQL 语句。&lt;code&gt;@Where&lt;/code&gt; 注解通过将自身的查询条件自动追加到 SELECT 查询语句中来帮你自动过滤掉这些被标记为删除的数据。&lt;/p&gt;
&lt;p&gt;这个方法看上去是一剂良药，但是里面有坑。普通查询肯定可以正常工作，但是如果是关联查询呢？&lt;/p&gt;
&lt;h4 id=&#34;关联查询所遇到的问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关联查询所遇到的问题&#34;&gt;&lt;/a&gt; 关联查询所遇到的问题&lt;/h4&gt;
&lt;p&gt;让我们仔细思考一下，假设你拥有一个实体，里面可能关联了另一个实体的集合，或者仅仅是另一个实体对象，但相同的是他们均被软删除。当你获取到这个实体对象时，你期望发生什么？实际上，这里没有几个选项可供选择：被删除的记录呈现或者不呈现在查询结果中，而不同的选择取决于不同的场景用例。比如，我们在商城购物车中有很多的商品，当一件商品被删除时我们期望其从购物车中消失对吧？但是被删除的商品仍应该出现在历史账单中，这难道不矛盾嘛？&lt;/p&gt;
&lt;p&gt;让我们来看一下 &lt;code&gt;@SQLDelete&lt;/code&gt; 和 &lt;code&gt;@Where&lt;/code&gt; 注解在不同类型的关联关系、FetchType 和不同的查询 API 中是怎样工作的。下面是我们将要在后续实验中使用的 ER 图：&lt;/p&gt;
&lt;img src=&#34;/2022/01/07/soft-deletion-in-hibernate-things-you-may-miss/soft-deletion-in-hibernate-things-you-may-miss-2.png&#34; class=&#34;&#34; title=&#34;ER 图&#34;&gt;
&lt;p&gt;Article 和 Author 拥有多对多关系，和 Comment 有着一对多关系，以及和 ArticleDetails 有着一对一的关系。那么问题来了，他们中的某一个在被其他实体引用时被软删除会发生什么？&lt;/p&gt;
&lt;h4 id=&#34;onetomany-manytomany&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#onetomany-manytomany&#34;&gt;&lt;/a&gt; OneToMany &amp;amp; ManyToMany&lt;/h4&gt;
&lt;p&gt;Hibernate 会自动在所有对多关系中过滤掉被删除的实体。如果你在删除一个 Author 之前和之后分别运行下面的代码，打印出的 Author 的名字数量会发生变化：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Optional&amp;lt;Article&amp;gt; articleOptional = articleRepository.findById(&lt;span class=&#34;number&#34;&gt;4L&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;articleOptional.ifPresent(article -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   article.getAuthors()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           .forEach(author -&amp;gt; logger.info(author.getName()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;好消息是，无论 FetchType 的值是什么或者用哪种查询方式（比如 entityManager、Criteria API、Spring Data JPA 等），上述结果都成立。&lt;/p&gt;
&lt;h4 id=&#34;懒加载下的-manytoone-onetoone&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#懒加载下的-manytoone-onetoone&#34;&gt;&lt;/a&gt; 懒加载下的 ManyToOne &amp;amp; OneToOne&lt;/h4&gt;
&lt;p&gt;让我们试着想象一下我们软删除了一篇文章，但我们不希望删除这篇文章下面的评论，因为这样在恢复文章时评论也会自动恢复。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Entity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Table(name = &amp;quot;comment&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Comment&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;meta&#34;&gt;@ManyToOne(fetch = FetchType.LAZY)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;meta&#34;&gt;@JoinColumn(name = &amp;quot;article_id&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Article article;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在，让我们尝试获取一条对应文章被删除的评论：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Optional&amp;lt;Comment&amp;gt; comment = commentRepository.findById(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;comment.ifPresent(com -&amp;gt; logger.info(com.getArticle().getText()));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你在第一行打一个断点，你可以看到 article 属性的值是 Hibernate Proxy 对象。&lt;/p&gt;
&lt;img src=&#34;/2022/01/07/soft-deletion-in-hibernate-things-you-may-miss/soft-deletion-in-hibernate-things-you-may-miss-3.png&#34; class=&#34;&#34; title=&#34;debug&#34;&gt;
&lt;p&gt;这很容易理解，因为 Hibernate 并不能提前知道这个实体是否已经被删除。但是当我们执行 &lt;code&gt;com.getArticle().getText()&lt;/code&gt; 方法时，却抛出了 EntityNotFoundException 异常，这是你所期望的吗？&lt;/p&gt;
&lt;h4 id=&#34;提前加载下的-manytoone-onetoone&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#提前加载下的-manytoone-onetoone&#34;&gt;&lt;/a&gt; 提前加载下的 ManyToOne &amp;amp; OneToOne&lt;/h4&gt;
&lt;p&gt;让我们将 FetchType 的值改为 EAGER 后再次重复相同的实验。现在我们在程序不使用代理的情况下获取到了关联的 article 对象，虽然 Hibernate 知道 article 已经被删除了。让我们进行同样的测试：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Optional&amp;lt;Comment&amp;gt; comment = commentRepository.findById(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;comment.ifPresent(com -&amp;gt; logger.info(com.getArticle().getText()));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;被关联查询且被软删除的 article 对象在没有报任何异常的情况下被加载了，其软删除标志为也依然为 &lt;code&gt;true&lt;/code&gt;：&lt;/p&gt;
&lt;img src=&#34;/2022/01/07/soft-deletion-in-hibernate-things-you-may-miss/soft-deletion-in-hibernate-things-you-may-miss-4.png&#34; class=&#34;&#34; title=&#34;debug&#34;&gt;
&lt;p&gt;这种不一致的行为很容易被解释，提前加载让 Hibernate 查询时 join 了 &lt;code&gt;article&lt;/code&gt; 表。Hibernate 面临着立即抛出 EntityNotFoundException 异常还是正常加载的抉择，但因为 article 已经被加载了，&lt;code&gt;@Where&lt;/code&gt; 注解失去了它的作用，所以 Hibernate 只是简单地为对象赋了值。&lt;/p&gt;
&lt;p&gt;现在让我们批量查询 comments：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Iterable&amp;lt;Comment&amp;gt; comments = commentRepository.findAll();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在我们又遇到了 EntityNotFoundException 异常！出现异常是因为 &lt;code&gt;findAll&lt;/code&gt; 方法分离查询被关联的 Article 对象，详情可以参考 &lt;a href=&#34;https://stackoverflow.com/questions/49192255/spring-data-findall-does-not-fetch-eagerly/49193254&#34;&gt;Spring data findAll() does not fetch eagerly&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;任何时候被软删除的对象在被使用分离查询时都会导致上面的异常，因为 Hibernate 在生成分离查询时应用了 &lt;code&gt;@Where&lt;/code&gt; 所定义的条件，所以很显然 Hibernate 并不能查询到被软删除的实体。所以很显然，这种查询并不能查到 Hibernate 所期望的结果，所以在这种情况下导致了 EntityNotFoundException 异常。&lt;/p&gt;
&lt;p&gt;所以更有趣的是你需要进行很多实验来认识到 Hibernate 在使用不同的 API 时是怎样获取数据的。首先，无论是对多还是对一的实体，在使用 DSL 查询时你均会遇到同样的异常。与此同时，criteria API 会在提前加载的一对一关系下返回被删除的实体，但会在提前加载的多对一关系中抛出 EntityNotFoundException 异常。这难道不令人困惑吗？&lt;/p&gt;
&lt;h4 id=&#34;避免-entitynotfoundexception-异常的解决方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#避免-entitynotfoundexception-异常的解决方式&#34;&gt;&lt;/a&gt; 避免 EntityNotFoundException 异常的解决方式&lt;/h4&gt;
&lt;p&gt;这里有一个可以避免 EntityNotFoundException 异常的解决方法。Hibernate &lt;a href=&#34;https://docs.jboss.org/hibernate/orm/5.2/userguide/html_single/Hibernate_User_Guide.html#associations-not-found&#34;&gt;介绍&lt;/a&gt;了 &lt;code&gt;@NotFound&lt;/code&gt; 注解，它能够让程序不再抛出异常，而是直接将关联对象的值设置为 &lt;code&gt;null&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这个解决办法看起来是一个灵丹妙药，但它同时带来了额外的缺点：无论 FetchType 设置为什么，所有的对一关系均会提前加载。&lt;/p&gt;
&lt;img src=&#34;/2022/01/07/soft-deletion-in-hibernate-things-you-may-miss/soft-deletion-in-hibernate-things-you-may-miss-5.png&#34; class=&#34;&#34; title=&#34;官网介绍&#34;&gt;
&lt;h4 id=&#34;约束和索引带来的问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#约束和索引带来的问题&#34;&gt;&lt;/a&gt; 约束和索引带来的问题&lt;/h4&gt;
&lt;p&gt;我们知道被软删除的实体和正常的实体均会被唯一约束和索引所限制，因此，常规的索引在这种情况下不再适用。假设一个 Author 实体的 login 字段有唯一约束，在软删除表中已有的记录后，记录仍然存在，所以正常状态的 Author 实体的同样的字段也不能再被设置为被软删除的相同的值。&lt;/p&gt;
&lt;p&gt;如果你正在使用 PostgreSQL，那么你很幸运，因为你可以使用部分索引：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;CREATE UNIQUE INDEX author_login_idx ON &lt;span class=&#34;title function_&#34;&gt;author&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(login)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;deleted&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但如果你使用的是 MySQL，那么很不幸，这个问题无解。&lt;/p&gt;
&lt;h4 id=&#34;结论&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#结论&#34;&gt;&lt;/a&gt; 结论&lt;/h4&gt;
&lt;p&gt;所以你可以看到，软删除是一个很容易被理解但不容易去实现的模式。看上去现在还没有一个完美的解决方案，至少 Hibernate 现阶段还没有提供。&lt;/p&gt;
&lt;p&gt;在一些简单的场景，你确实可以直接采用使用 &lt;code&gt;@SQLDelete&lt;/code&gt; + &lt;code&gt;@Where&lt;/code&gt; 注解的方式，但在软删除实体出现在一对一或者多对一关联关系的时候，你并不能期望他们行为一致。只是简单地改变 FetchType 的值，或是使用 &lt;code&gt;@EntityGraph&lt;/code&gt;，或者将你的查询从 Criteria API 迁移到 DSL 查询，或是其他任何改变都很可能影响查询结果：从被意外抛出异常到意外地成功加载了被删除的实体，或是直接获得了意料之外的 &lt;code&gt;null&lt;/code&gt; 值。&lt;/p&gt;
</content>
        <category term="Java" />
        <category term="Hibernate" />
        <category term="Translate" />
        <updated>2022-01-07T11:34:47.000Z</updated>
    </entry>
</feed>
