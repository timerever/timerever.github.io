{
    "version": "https://jsonfeed.org/version/1",
    "title": "A Blog • All posts by \"dockerfile\" tag",
    "description": "Just another blog.",
    "home_page_url": "https://blog.timerever.tk",
    "items": [
        {
            "id": "https://blog.timerever.tk/2017/03/05/docker-learning-trip-2/",
            "url": "https://blog.timerever.tk/2017/03/05/docker-learning-trip-2/",
            "title": "Docker 学习之旅（二）：Dockerfile 命令",
            "date_published": "2017-03-05T12:37:20.000Z",
            "content_html": "<p>本篇是对 <code>Dockerfile</code> 文件的一个介绍，在了解完相关知识后，可以用 <code>Dockerfile</code> 文件创建一个简单的镜像。</p>\n<h3 id=\"参考和推荐\"><a href=\"#参考和推荐\" class=\"headerlink\" title=\"参考和推荐\"></a>参考和推荐</h3><p>文档链接：<a href=\"https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#general-guidelines-and-recommendations\">https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#general-guidelines-and-recommendations</a></p>\n<p>更详细的 <code>Dockerfile</code> 参考链接：<a href=\"https://docs.docker.com/engine/reference/builder/\">https://docs.docker.com/engine/reference/builder/</a>，同样适用于下文。</p>\n<ul>\n<li>容器的生命应该是短暂的</li>\n<li>可以使用 <code>.dockerignore</code> 文件来排除文件</li>\n<li>避免安装不需要的包</li>\n<li>每个容器都应该只有一个关注点</li>\n<li>最小化层的数量</li>\n<li>整理多行参数</li>\n<li>Build 缓存</li>\n</ul>\n<p>都是一些阅读理解的内容，详细见官方文档。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"Dockerfile-指南\"><a href=\"#Dockerfile-指南\" class=\"headerlink\" title=\"Dockerfile 指南\"></a>Dockerfile 指南</h3><p>文档链接：<a href=\"https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#the-dockerfile-instructions\">https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#the-dockerfile-instructions</a></p>\n<p>仅列出各命令简单用法，详细请参照上文列出的官方详细文档。</p>\n<h4 id=\"FROM\"><a href=\"#FROM\" class=\"headerlink\" title=\"FROM\"></a>FROM</h4><p>你可以在现有镜像的基础上构建自己的镜像。</p>\n<pre><code>FROM &lt;image&gt;\n</code></pre>\n<p>Or</p>\n<pre><code>FROM &lt;image&gt;:&lt;tag&gt;\n</code></pre>\n<p>Or</p>\n<pre><code>FROM &lt;image&gt;@&lt;digest&gt;\n</code></pre>\n<h4 id=\"LABEL\"><a href=\"#LABEL\" class=\"headerlink\" title=\"LABEL\"></a>LABEL</h4><p><code>LABEL</code> 命令用来给镜像添加元数据，可以更好地管理镜像等。</p>\n<p>用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span><br></pre></td></tr></table></figure>\n\n<p>可在一个命令中使用多个键值对，也可只使用一个。若镜像是以其他镜像 <code>FROM</code> 为基础的，相同的标签将会覆盖原有标签。</p>\n<h4 id=\"RUN\"><a href=\"#RUN\" class=\"headerlink\" title=\"RUN\"></a>RUN</h4><p>RUN指令将在当前映像之上的新层中执行任何命令，并提交执行结果，这个提交的的执行后的镜像将被 <code>Dockerfile</code> 的其余步骤使用。</p>\n<p><code>RUN</code> 指令有两种形式：</p>\n<ul>\n<li><code>RUN &lt;command&gt;</code>（shell 形式，命令在 shell 中运行，对于 Linux 默认为 &#x2F;bin&#x2F;sh -c，而对于 Windows 默认为 cmd &#x2F;S &#x2F;C）</li>\n<li><code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code>（执行形式）</li>\n</ul>\n<h4 id=\"APT-GET\"><a href=\"#APT-GET\" class=\"headerlink\" title=\"APT-GET\"></a>APT-GET</h4><p>这可能是 <code>RUN</code> 命令的最多使用情况，但是你应该避免使用 <code>RUN apt-get upgrade</code> 或是 <code>dist-upgrade</code>，因为许多“必要”的包将不会在无特权的容器内部被升级。如果一个镜像所包含的基础镜像过期，请联系管理员。</p>\n<p>记得将 <code>RUN apt-get update</code> 命令与 <code>apt-get install</code> 命令放在同一个 <code>RUN</code> 声明中，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y \\</span><br><span class=\"line\">    package-bar \\</span><br><span class=\"line\">    package-baz \\</span><br><span class=\"line\">    package-foo</span><br></pre></td></tr></table></figure>\n\n<p>在一个单独的 <code>RUN</code> 声明中使用 <code>apt-get update</code> 将会导致缓存问题和之后的 <code>apt-get install</code> 命令失败。</p>\n<h4 id=\"使用管道\"><a href=\"#使用管道\" class=\"headerlink\" title=\"使用管道\"></a>使用管道</h4><p>有一些 <code>RUN</code> 命令使用和 Linux 中同样的管道来将一个命令的输入导入到另一个命令当中，符号同样为 <code>|</code>。</p>\n<h4 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h4><p><code>CMD</code> 命令的主要作用是给可执行容器提供默认的参数。</p>\n<p><code>CMD</code> 命令有三种形式：</p>\n<ul>\n<li><code>CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code>（执行形式，最推荐的形式）</li>\n<li><code>CMD [&quot;param1&quot;,&quot;param2&quot;]</code>（入口点的默认参数）</li>\n<li><code>CMD command param1 param2</code>（shell 形式）</li>\n</ul>\n<p>在一个 <code>Dockerfile</code> 文件中，只能有一个 <code>CMD</code> 指令，如果你列出超过一个的 <code>CMD</code> 指令，只有最后一条会起作用。</p>\n<h4 id=\"EXPOSE\"><a href=\"#EXPOSE\" class=\"headerlink\" title=\"EXPOSE\"></a>EXPOSE</h4><p><code>EXPOSE</code> 命令用于开放容器的内部端口，支持环境变量（例如，<code>MYSQL_PORT_3306_TCP</code>）。但是<code>EXPOSE</code> 命令并不能使内部端口对宿主可见，你必须使用 <code>-p</code> 命令来开放特定端口或是使用 <code>-P</code> 命令来开放所有的 <code>EXPOSE</code> 的端口。</p>\n<pre><code>EXPOSE &lt;port&gt; [&lt;port&gt;...]\n</code></pre>\n<h4 id=\"ENV\"><a href=\"#ENV\" class=\"headerlink\" title=\"ENV\"></a>ENV</h4><p><code>ENV</code> 命令用来更新 <code>PATH</code> 环境变量。</p>\n<pre><code>ENV &lt;key&gt; &lt;value&gt;\nENV &lt;key&gt;=&lt;value&gt; ...\n</code></pre>\n<p>这是<code>ENV</code> 命令的两种使用形式，推荐使用第二种形式。</p>\n<h4 id=\"ADD-or-COPY\"><a href=\"#ADD-or-COPY\" class=\"headerlink\" title=\"ADD or COPY\"></a>ADD or COPY</h4><p><code>ADD</code> 和 <code>COPY</code> 命令拥有相似的功能，通常而言，<code>COPY</code> 因其更加透明而被推荐。但是 <code>COPY</code> 只能拷贝本地文件而 <code>ADD</code> 拥有更多的特性（比如本地 tar 提取和远程 URL 支持）。</p>\n<pre><code>ADD/COPY &lt;src&gt;... &lt;dest&gt;\nADD/COPY [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]\n</code></pre>\n<p>省略众多详细介绍，详见文档。</p>\n<h4 id=\"ENTRYPOINT\"><a href=\"#ENTRYPOINT\" class=\"headerlink\" title=\"ENTRYPOINT\"></a>ENTRYPOINT</h4><pre><code>ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]（执行形式，推荐）\nENTRYPOINT command param1 param2（shell 形式）\n</code></pre>\n<p><code>ENTRYPOINT</code> 命令允许你配置容器使其变成可执行容器。</p>\n<h4 id=\"USER\"><a href=\"#USER\" class=\"headerlink\" title=\"USER\"></a>USER</h4><p><code>USER</code> 可以使容器改变运行用户，通过在 <code>Dockerfile</code> 文件中使用类似 <code>RUN groupadd -r postgres &amp;&amp; useradd -r -g postgres postgres</code> 的命令来创建用户和组。</p>\n<h4 id=\"WORKDIR\"><a href=\"#WORKDIR\" class=\"headerlink\" title=\"WORKDIR\"></a>WORKDIR</h4><pre><code>WORKDIR /path/to/workdir\n</code></pre>\n<p><code>WORKDIR</code> 指令可以设置 <code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code>、<code>COPY</code> 和 <code>ADD</code> 指令的工作目录。即使后续并不会使用到 <code>WORKDIR</code> 指令，它仍然会被创建。</p>\n<p><code>WORKDIR</code> 指令可在一个 <code>Dockerfile</code> 文件中使用多次。如果给定一个相对路径，那么它会相对于之前的 <code>WORKDIR</code> 指令。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WORKDIR /a</span><br><span class=\"line\">WORKDIR b</span><br><span class=\"line\">WORKDIR c</span><br><span class=\"line\">RUN pwd</span><br></pre></td></tr></table></figure>\n\n<p><code>pwd</code> 的输出将为 <code>/a/b/c</code>。</p>\n<p><code>WORKDIR</code> 指令也可解析在之前通过 <code>ENV</code> 指令设置的环境变量。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENV DIRPATH /path</span><br><span class=\"line\">WORKDIR $DIRPATH/$DIRNAME</span><br><span class=\"line\">RUN pwd</span><br></pre></td></tr></table></figure>\n\n<p><code>pwd</code> 的输出将为 <code>/path/$DIRNAME</code>。</p>\n<h4 id=\"ONBUILD\"><a href=\"#ONBUILD\" class=\"headerlink\" title=\"ONBUILD\"></a>ONBUILD</h4><pre><code>ONBUILD [INSTRUCTION]\n</code></pre>\n<p><code>ONBUILD</code> 命令在当前 <code>Dockerfile</code> 文件构建完成后执行，也就是该镜像最为其他镜像的父镜像时。它会在子镜像的 <code>Dockerfile</code> 文件中的 <code>FROM</code> 指令后立即被执行。</p>\n",
            "tags": [
                "Docker",
                "Dockerfile"
            ]
        }
    ]
}