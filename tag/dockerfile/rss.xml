<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>A Blog • Posts by &#34;dockerfile&#34; tag</title>
        <link>https://blog.timerever.tk</link>
        <description>Just another blog.</description>
        <language>zh-CN</language>
        <pubDate>Sun, 05 Mar 2017 12:37:20 +0000</pubDate>
        <lastBuildDate>Sun, 05 Mar 2017 12:37:20 +0000</lastBuildDate>
        <category>Java</category>
        <category>HttpClient</category>
        <category>Jackson</category>
        <category>Design Pattern</category>
        <category>Docker</category>
        <category>Dockerfile</category>
        <category>Java Web</category>
        <category>Factory Patterns</category>
        <category>Linux</category>
        <category>C</category>
        <category>Android</category>
        <category>Huawei</category>
        <category>CyanogenMod</category>
        <category>Git</category>
        <category>GitHub</category>
        <category>Hibernate</category>
        <category>Kubernetes</category>
        <category>K8s</category>
        <category>K3s</category>
        <category>Keycloak</category>
        <category>OAuth2</category>
        <category>SSO</category>
        <category>VMware</category>
        <category>vmdk</category>
        <category>MySQL</category>
        <category>wget</category>
        <category>Regular Expression</category>
        <category>Sharding</category>
        <category>Sharding-JDBC</category>
        <category>Translate</category>
        <category>Algorithm</category>
        <category>Sort</category>
        <category>Ubuntu</category>
        <category>Ruby</category>
        <category>Jekyll</category>
        <category>Windows</category>
        <category>Regedit</category>
        <category>PowerShell</category>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/03/05/docker-learning-trip-2/</guid>
            <title>Docker 学习之旅（二）：Dockerfile 命令</title>
            <link>https://blog.timerever.tk/2017/03/05/docker-learning-trip-2/</link>
            <category>Docker</category>
            <category>Dockerfile</category>
            <pubDate>Sun, 05 Mar 2017 12:37:20 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;本篇是对 &lt;code&gt;Dockerfile&lt;/code&gt; 文件的一个介绍，在了解完相关知识后，可以用 &lt;code&gt;Dockerfile&lt;/code&gt; 文件创建一个简单的镜像。&lt;/p&gt;
&lt;h3 id=&#34;参考和推荐&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#参考和推荐&#34;&gt;&lt;/a&gt; 参考和推荐&lt;/h3&gt;
&lt;p&gt;文档链接：&lt;a href=&#34;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#general-guidelines-and-recommendations&#34;&gt;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#general-guidelines-and-recommendations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;更详细的 &lt;code&gt;Dockerfile&lt;/code&gt; 参考链接：&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/&#34;&gt;https://docs.docker.com/engine/reference/builder/&lt;/a&gt;，同样适用于下文。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器的生命应该是短暂的&lt;/li&gt;
&lt;li&gt;可以使用 &lt;code&gt;.dockerignore&lt;/code&gt; 文件来排除文件&lt;/li&gt;
&lt;li&gt;避免安装不需要的包&lt;/li&gt;
&lt;li&gt;每个容器都应该只有一个关注点&lt;/li&gt;
&lt;li&gt;最小化层的数量&lt;/li&gt;
&lt;li&gt;整理多行参数&lt;/li&gt;
&lt;li&gt;Build 缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;都是一些阅读理解的内容，详细见官方文档。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h3 id=&#34;dockerfile-指南&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dockerfile-指南&#34;&gt;&lt;/a&gt; Dockerfile 指南&lt;/h3&gt;
&lt;p&gt;文档链接：&lt;a href=&#34;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#the-dockerfile-instructions&#34;&gt;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#the-dockerfile-instructions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;仅列出各命令简单用法，详细请参照上文列出的官方详细文档。&lt;/p&gt;
&lt;h4 id=&#34;from&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#from&#34;&gt;&lt;/a&gt; FROM&lt;/h4&gt;
&lt;p&gt;你可以在现有镜像的基础上构建自己的镜像。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM &amp;lt;image&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM &amp;lt;image&amp;gt;:&amp;lt;tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM &amp;lt;image&amp;gt;@&amp;lt;digest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;label&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#label&#34;&gt;&lt;/a&gt; LABEL&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;LABEL&lt;/code&gt; 命令用来给镜像添加元数据，可以更好地管理镜像等。&lt;/p&gt;
&lt;p&gt;用法：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;LABEL &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可在一个命令中使用多个键值对，也可只使用一个。若镜像是以其他镜像 &lt;code&gt;FROM&lt;/code&gt; 为基础的，相同的标签将会覆盖原有标签。&lt;/p&gt;
&lt;h4 id=&#34;run&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#run&#34;&gt;&lt;/a&gt; RUN&lt;/h4&gt;
&lt;p&gt;RUN指令将在当前映像之上的新层中执行任何命令，并提交执行结果，这个提交的的执行后的镜像将被 &lt;code&gt;Dockerfile&lt;/code&gt; 的其余步骤使用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RUN&lt;/code&gt; 指令有两种形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RUN &amp;lt;command&amp;gt;&lt;/code&gt;（shell 形式，命令在 shell 中运行，对于 Linux 默认为 /bin/sh -c，而对于 Windows 默认为 cmd /S /C）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RUN [&amp;quot;executable&amp;quot;, &amp;quot;param1&amp;quot;, &amp;quot;param2&amp;quot;]&lt;/code&gt;（执行形式）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;apt-get&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#apt-get&#34;&gt;&lt;/a&gt; APT-GET&lt;/h4&gt;
&lt;p&gt;这可能是 &lt;code&gt;RUN&lt;/code&gt; 命令的最多使用情况，但是你应该避免使用 &lt;code&gt;RUN apt-get upgrade&lt;/code&gt; 或是 &lt;code&gt;dist-upgrade&lt;/code&gt;，因为许多“必要”的包将不会在无特权的容器内部被升级。如果一个镜像所包含的基础镜像过期，请联系管理员。&lt;/p&gt;
&lt;p&gt;记得将 &lt;code&gt;RUN apt-get update&lt;/code&gt; 命令与 &lt;code&gt;apt-get install&lt;/code&gt; 命令放在同一个 &lt;code&gt;RUN&lt;/code&gt; 声明中，例如：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    package-bar \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    package-baz \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    package-foo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在一个单独的 &lt;code&gt;RUN&lt;/code&gt; 声明中使用 &lt;code&gt;apt-get update&lt;/code&gt; 将会导致缓存问题和之后的 &lt;code&gt;apt-get install&lt;/code&gt; 命令失败。&lt;/p&gt;
&lt;h4 id=&#34;使用管道&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用管道&#34;&gt;&lt;/a&gt; 使用管道&lt;/h4&gt;
&lt;p&gt;有一些 &lt;code&gt;RUN&lt;/code&gt; 命令使用和 Linux 中同样的管道来将一个命令的输入导入到另一个命令当中，符号同样为 &lt;code&gt;|&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;cmd&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cmd&#34;&gt;&lt;/a&gt; CMD&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;CMD&lt;/code&gt; 命令的主要作用是给可执行容器提供默认的参数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CMD&lt;/code&gt; 命令有三种形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CMD [&amp;quot;executable&amp;quot;,&amp;quot;param1&amp;quot;,&amp;quot;param2&amp;quot;]&lt;/code&gt;（执行形式，最推荐的形式）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMD [&amp;quot;param1&amp;quot;,&amp;quot;param2&amp;quot;]&lt;/code&gt;（入口点的默认参数）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMD command param1 param2&lt;/code&gt;（shell 形式）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在一个 &lt;code&gt;Dockerfile&lt;/code&gt; 文件中，只能有一个 &lt;code&gt;CMD&lt;/code&gt; 指令，如果你列出超过一个的 &lt;code&gt;CMD&lt;/code&gt; 指令，只有最后一条会起作用。&lt;/p&gt;
&lt;h4 id=&#34;expose&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#expose&#34;&gt;&lt;/a&gt; EXPOSE&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;EXPOSE&lt;/code&gt; 命令用于开放容器的内部端口，支持环境变量（例如，&lt;code&gt;MYSQL_PORT_3306_TCP&lt;/code&gt;）。但是&lt;code&gt;EXPOSE&lt;/code&gt; 命令并不能使内部端口对宿主可见，你必须使用 &lt;code&gt;-p&lt;/code&gt; 命令来开放特定端口或是使用 &lt;code&gt;-P&lt;/code&gt; 命令来开放所有的 &lt;code&gt;EXPOSE&lt;/code&gt; 的端口。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;EXPOSE &amp;lt;port&amp;gt; [&amp;lt;port&amp;gt;...]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;env&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#env&#34;&gt;&lt;/a&gt; ENV&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ENV&lt;/code&gt; 命令用来更新 &lt;code&gt;PATH&lt;/code&gt; 环境变量。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ENV &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;
ENV &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这是&lt;code&gt;ENV&lt;/code&gt; 命令的两种使用形式，推荐使用第二种形式。&lt;/p&gt;
&lt;h4 id=&#34;add-or-copy&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#add-or-copy&#34;&gt;&lt;/a&gt; ADD or COPY&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ADD&lt;/code&gt; 和 &lt;code&gt;COPY&lt;/code&gt; 命令拥有相似的功能，通常而言，&lt;code&gt;COPY&lt;/code&gt; 因其更加透明而被推荐。但是 &lt;code&gt;COPY&lt;/code&gt; 只能拷贝本地文件而 &lt;code&gt;ADD&lt;/code&gt; 拥有更多的特性（比如本地 tar 提取和远程 URL 支持）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ADD/COPY &amp;lt;src&amp;gt;... &amp;lt;dest&amp;gt;
ADD/COPY [&amp;quot;&amp;lt;src&amp;gt;&amp;quot;,... &amp;quot;&amp;lt;dest&amp;gt;&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;省略众多详细介绍，详见文档。&lt;/p&gt;
&lt;h4 id=&#34;entrypoint&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#entrypoint&#34;&gt;&lt;/a&gt; ENTRYPOINT&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;ENTRYPOINT [&amp;quot;executable&amp;quot;, &amp;quot;param1&amp;quot;, &amp;quot;param2&amp;quot;]（执行形式，推荐）
ENTRYPOINT command param1 param2（shell 形式）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ENTRYPOINT&lt;/code&gt; 命令允许你配置容器使其变成可执行容器。&lt;/p&gt;
&lt;h4 id=&#34;user&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#user&#34;&gt;&lt;/a&gt; USER&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;USER&lt;/code&gt; 可以使容器改变运行用户，通过在 &lt;code&gt;Dockerfile&lt;/code&gt; 文件中使用类似 &lt;code&gt;RUN groupadd -r postgres &amp;amp;&amp;amp; useradd -r -g postgres postgres&lt;/code&gt; 的命令来创建用户和组。&lt;/p&gt;
&lt;h4 id=&#34;workdir&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#workdir&#34;&gt;&lt;/a&gt; WORKDIR&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;WORKDIR /path/to/workdir
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;WORKDIR&lt;/code&gt; 指令可以设置 &lt;code&gt;RUN&lt;/code&gt;、&lt;code&gt;CMD&lt;/code&gt;、&lt;code&gt;ENTRYPOINT&lt;/code&gt;、&lt;code&gt;COPY&lt;/code&gt; 和 &lt;code&gt;ADD&lt;/code&gt; 指令的工作目录。即使后续并不会使用到 &lt;code&gt;WORKDIR&lt;/code&gt; 指令，它仍然会被创建。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WORKDIR&lt;/code&gt; 指令可在一个 &lt;code&gt;Dockerfile&lt;/code&gt; 文件中使用多次。如果给定一个相对路径，那么它会相对于之前的 &lt;code&gt;WORKDIR&lt;/code&gt; 指令。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;WORKDIR /a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;WORKDIR b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;WORKDIR c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;RUN pwd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;pwd&lt;/code&gt; 的输出将为 &lt;code&gt;/a/b/c&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WORKDIR&lt;/code&gt; 指令也可解析在之前通过 &lt;code&gt;ENV&lt;/code&gt; 指令设置的环境变量。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ENV DIRPATH /path&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;WORKDIR $DIRPATH/$DIRNAME&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;RUN pwd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;pwd&lt;/code&gt; 的输出将为 &lt;code&gt;/path/$DIRNAME&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;onbuild&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#onbuild&#34;&gt;&lt;/a&gt; ONBUILD&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;ONBUILD [INSTRUCTION]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ONBUILD&lt;/code&gt; 命令在当前 &lt;code&gt;Dockerfile&lt;/code&gt; 文件构建完成后执行，也就是该镜像最为其他镜像的父镜像时。它会在子镜像的 &lt;code&gt;Dockerfile&lt;/code&gt; 文件中的 &lt;code&gt;FROM&lt;/code&gt; 指令后立即被执行。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
