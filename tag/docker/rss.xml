<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>A Blog • Posts by &#34;docker&#34; tag</title>
        <link>https://blog.timerever.tk</link>
        <description>Just another blog.</description>
        <language>zh-CN</language>
        <pubDate>Mon, 13 Mar 2017 01:58:28 +0000</pubDate>
        <lastBuildDate>Mon, 13 Mar 2017 01:58:28 +0000</lastBuildDate>
        <category>Java</category>
        <category>HttpClient</category>
        <category>Jackson</category>
        <category>Docker</category>
        <category>Design Pattern</category>
        <category>Dockerfile</category>
        <category>Java Web</category>
        <category>Linux</category>
        <category>C</category>
        <category>Factory Patterns</category>
        <category>Android</category>
        <category>Huawei</category>
        <category>CyanogenMod</category>
        <category>Git</category>
        <category>GitHub</category>
        <category>Hibernate</category>
        <category>VMware</category>
        <category>vmdk</category>
        <category>Keycloak</category>
        <category>OAuth2</category>
        <category>SSO</category>
        <category>wget</category>
        <category>Regular Expression</category>
        <category>Ubuntu</category>
        <category>Ruby</category>
        <category>Jekyll</category>
        <category>Windows</category>
        <category>Regedit</category>
        <category>PowerShell</category>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/03/13/docker-learning-trip-6/</guid>
            <title>Docker 学习之旅（六）：使用 Docker 搭建 Java Web 运行环境</title>
            <link>https://blog.timerever.tk/2017/03/13/docker-learning-trip-6/</link>
            <category>Docker</category>
            <category>Java Web</category>
            <pubDate>Mon, 13 Mar 2017 01:58:28 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;学习 Docker 在一开始肯定不是去学习它的理论（至少对大部分人而言），而是学习它的使用方法进而去使用。大概搭建好了 Docker 的环境，也尝试了创建自己的 Docker 镜像，现在就可以尝试一些比较实用的东西，比如使用 Docker 来搭建 Java Web 运行环境。&lt;/p&gt;
&lt;h3 id=&#34;寻找镜像&#34;&gt;&lt;a href=&#34;#寻找镜像&#34; class=&#34;headerlink&#34; title=&#34;寻找镜像&#34;&gt;&lt;/a&gt;寻找镜像&lt;/h3&gt;&lt;p&gt;既然官方的镜像那么多，那么我们为什么不先去看一下官方镜像呢？打开 Docker Hub 一搜索 tomcat，排在第一个的就是。&lt;/p&gt;
&lt;p&gt;地址：&lt;a href=&#34;https://hub.docker.com/_/tomcat/&#34;&gt;https://hub.docker.com/_/tomcat/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这边选择 tomcat7 + jre7，但是通过查看构建所使用的 &lt;code&gt;Dockfile&lt;/code&gt; 文件发现，tomcat 的官方源采用的是 jre7 是 openJDK7 的 jre，这里需要注意。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h3 id=&#34;下载运行-tomcat&#34;&gt;&lt;a href=&#34;#下载运行-tomcat&#34; class=&#34;headerlink&#34; title=&#34;下载运行 tomcat&#34;&gt;&lt;/a&gt;下载运行 tomcat&lt;/h3&gt;&lt;p&gt;tomcat 的默认启动参数为 &lt;code&gt;CMD [&amp;quot;catalina.sh&amp;quot;, &amp;quot;run&amp;quot;]&lt;/code&gt;，启动方式为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -it --rm tomcat:7.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用 &lt;code&gt;http://container-ip:8080&lt;/code&gt; 在浏览器访问。&lt;/p&gt;
&lt;p&gt;或者将端口映射到本地，运行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run -it --rm -p 8888:8080 tomcat:7.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后使用 &lt;code&gt;http://localhost:8888&lt;/code&gt; 或是 &lt;code&gt;http://host-ip:8888&lt;/code&gt; 访问。&lt;/p&gt;
&lt;h3 id=&#34;部署-Java-Web-项目&#34;&gt;&lt;a href=&#34;#部署-Java-Web-项目&#34; class=&#34;headerlink&#34; title=&#34;部署 Java Web 项目&#34;&gt;&lt;/a&gt;部署 Java Web 项目&lt;/h3&gt;&lt;p&gt;文档上已经说明，对于 tomcat 7 ，tomcat 所在目录为 &lt;code&gt;/usr/local/tomcat&lt;/code&gt;，所以对其进行修改完成部署。&lt;/p&gt;
&lt;h4 id=&#34;复制文件&#34;&gt;&lt;a href=&#34;#复制文件&#34; class=&#34;headerlink&#34; title=&#34;复制文件&#34;&gt;&lt;/a&gt;复制文件&lt;/h4&gt;&lt;p&gt;先使用如下命令启动容器：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run -it -v /home/ubuntu/tomcat:/mnt/war tomcat:7.0 /bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此处相关参数包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-i&lt;/code&gt;：表示以“交互模式”运行容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-t&lt;/code&gt;：表示容器启动后会进入其命令行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v&lt;/code&gt;：表示需要将本地哪个目录挂载到容器中，格式：-v &amp;lt;宿主机目录&amp;gt;:&amp;lt;容器目录&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即运行后进入容器命令行，并将主机的 &lt;code&gt;/home/ubuntu/tomcat&lt;/code&gt; 挂载到了容器的 &lt;code&gt;/mnt/war&lt;/code&gt; 目录。&lt;/p&gt;
&lt;p&gt;然后将部署文件拷贝到主机的 &lt;code&gt;/home/ubuntu/tomcat&lt;/code&gt; 目录并继续在容器中操作部署程序。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# cd webapps/ROOT/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# rm -rf *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# cp -r /mnt/war/* .&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# exit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;创建镜像&#34;&gt;&lt;a href=&#34;#创建镜像&#34; class=&#34;headerlink&#34; title=&#34;创建镜像&#34;&gt;&lt;/a&gt;创建镜像&lt;/h4&gt;&lt;p&gt;此处需要记住刚才所运行容器的 ID，bash 里面 &lt;code&gt;root@0b2d4744734c&lt;/code&gt; 的 ‘root@’ 后面的便是容器 ID。如果已经找不到，可使用 &lt;code&gt;docker ps -a&lt;/code&gt; 查看之前所运行过的所有容器。&lt;/p&gt;
&lt;p&gt;然后创建镜像。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker commit 0b2d4744734c timerever/javaweb:1.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;运行镜像&#34;&gt;&lt;a href=&#34;#运行镜像&#34; class=&#34;headerlink&#34; title=&#34;运行镜像&#34;&gt;&lt;/a&gt;运行镜像&lt;/h3&gt;&lt;p&gt;使用刚刚自定的名称运行镜像。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -it --rm -p 8888:8080 timerever/javaweb:1.0 catalina.sh run
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/03/11/docker-learning-trip-5/</guid>
            <title>Docker 学习之旅（五）：Docker 下的 srceenfetch</title>
            <link>https://blog.timerever.tk/2017/03/11/docker-learning-trip-5/</link>
            <category>Docker</category>
            <pubDate>Sat, 11 Mar 2017 01:25:43 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;在之前介绍了 &lt;code&gt;Dockerfile&lt;/code&gt; 文件和 Docker Hub 的使用，现在就来完整的应用其创建一个 Docker 下的 srceenfetch。&lt;/p&gt;
&lt;h4 id=&#34;关于-srceenfetch&#34;&gt;&lt;a href=&#34;#关于-srceenfetch&#34; class=&#34;headerlink&#34; title=&#34;关于 srceenfetch&#34;&gt;&lt;/a&gt;关于 srceenfetch&lt;/h4&gt;&lt;p&gt;srceenfetch 基本是我在每一个 Linux 主机都会安装的程序，大概就是用来秀 Linux 和一个简略但直观地展示硬件环境的一个应用程序。&lt;/p&gt;
&lt;p&gt;该项目托管在 GitHub，项目地址为：&lt;a href=&#34;https://github.com/KittyKatt/screenFetch&#34;&gt;https://github.com/KittyKatt/screenFetch&lt;/a&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h3 id=&#34;创建-Docker-Hub-仓库&#34;&gt;&lt;a href=&#34;#创建-Docker-Hub-仓库&#34; class=&#34;headerlink&#34; title=&#34;创建 Docker Hub 仓库&#34;&gt;&lt;/a&gt;创建 Docker Hub 仓库&lt;/h3&gt;&lt;p&gt;在 Docker Hub 网页上创建一个 Docker Hub 仓库，具体操作很简单，不再赘述。&lt;/p&gt;
&lt;p&gt;此处创建的仓库为：&lt;code&gt;timerever/screenfetch&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;构建镜像&#34;&gt;&lt;a href=&#34;#构建镜像&#34; class=&#34;headerlink&#34; title=&#34;构建镜像&#34;&gt;&lt;/a&gt;构建镜像&lt;/h3&gt;&lt;h4 id=&#34;创建-Dockerfile-文件&#34;&gt;&lt;a href=&#34;#创建-Dockerfile-文件&#34; class=&#34;headerlink&#34; title=&#34;创建 Dockerfile 文件&#34;&gt;&lt;/a&gt;创建 Dockerfile 文件&lt;/h4&gt;&lt;p&gt;因为 screenfetch 在 Ubuntu 中可以直接通过 &lt;code&gt;apt-get&lt;/code&gt; 安装，所以直接使用 Ubuntu 源安装。&lt;/p&gt;
&lt;p&gt;创建 &lt;code&gt;Dockerfile&lt;/code&gt; 文件。&lt;/p&gt;
&lt;figure class=&#34;highlight dockerfile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ vi Dockerfile&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; ubuntu&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;RUN&lt;/span&gt;&lt;span class=&#34;bash&#34;&gt; apt-get update &amp;amp;&amp;amp; apt-get install -y screenfetch&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;CMD&lt;/span&gt;&lt;span class=&#34;bash&#34;&gt; screenfetch&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;构建镜像并运行&#34;&gt;&lt;a href=&#34;#构建镜像并运行&#34; class=&#34;headerlink&#34; title=&#34;构建镜像并运行&#34;&gt;&lt;/a&gt;构建镜像并运行&lt;/h4&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ docker build -t &lt;span class=&#34;string&#34;&gt;&amp;quot;timerever/screenfetch&amp;quot;&lt;/span&gt; .&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ docker run timerever/screenfetch&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;上传镜像&#34;&gt;&lt;a href=&#34;#上传镜像&#34; class=&#34;headerlink&#34; title=&#34;上传镜像&#34;&gt;&lt;/a&gt;上传镜像&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;docker push timerever/screenfetch
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果没有登录，先使用 &lt;code&gt;docker login&lt;/code&gt; 登录即可。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/03/09/docker-learning-trip-4/</guid>
            <title>Docker 学习之旅（四）：Docker Hub</title>
            <link>https://blog.timerever.tk/2017/03/09/docker-learning-trip-4/</link>
            <category>Docker</category>
            <pubDate>Thu, 09 Mar 2017 06:42:13 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;Docker Hub 是一个由 Docker 公司负责维护的公共注册中心，它包含了超过 15,000 个可用来下载和构建容器的镜像，并且还提供认证、工作组结构、工作流工具（比如 webhooks）、构建触发器以及私有工具（比如私有仓库可用于存储你并不想公开分享的镜像）。&lt;/p&gt;
&lt;h3 id=&#34;总览&#34;&gt;&lt;a href=&#34;#总览&#34; class=&#34;headerlink&#34; title=&#34;总览&#34;&gt;&lt;/a&gt;总览&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/docker-hub/&#34;&gt;Docker Hub&lt;/a&gt; 负责集中用户账号、镜像和公开的命名空间的信息，分别由不同的部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web UI&lt;/li&gt;
&lt;li&gt;Meta-data store (comments, stars, list public repositories)&lt;/li&gt;
&lt;li&gt;Authentication service&lt;/li&gt;
&lt;li&gt;Tokenization&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这仅仅是 Docker Hub 的一个基本组成，它对大多数的个人和小型企业是十分有帮助的。在改版后，文档将 Docker Hub 部分独立出去，这里遵循以前的顺序，介绍下 Docker Hub 的基础应用。&lt;/p&gt;
&lt;p&gt;有关于 Docker Hub 的文档：&lt;a href=&#34;https://docs.docker.com/docker-hub/&#34;&gt;https://docs.docker.com/docker-hub/&lt;/a&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h3 id=&#34;使用&#34;&gt;&lt;a href=&#34;#使用&#34; class=&#34;headerlink&#34; title=&#34;使用&#34;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;p&gt;没有登录帐号的情况下可以 &lt;code&gt;search&lt;/code&gt; 或者 &lt;code&gt;pull&lt;/code&gt; 镜像，但是不能 &lt;code&gt;push&lt;/code&gt; 镜像。&lt;/p&gt;
&lt;h3 id=&#34;团队和组织&#34;&gt;&lt;a href=&#34;#团队和组织&#34; class=&#34;headerlink&#34; title=&#34;团队和组织&#34;&gt;&lt;/a&gt;团队和组织&lt;/h3&gt;&lt;p&gt;太高大上，个人的我用不上，不太了解。&lt;/p&gt;
&lt;h3 id=&#34;仓库&#34;&gt;&lt;a href=&#34;#仓库&#34; class=&#34;headerlink&#34; title=&#34;仓库&#34;&gt;&lt;/a&gt;仓库&lt;/h3&gt;&lt;h4 id=&#34;搜索镜像&#34;&gt;&lt;a href=&#34;#搜索镜像&#34; class=&#34;headerlink&#34; title=&#34;搜索镜像&#34;&gt;&lt;/a&gt;搜索镜像&lt;/h4&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ docker search centos&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;NAME                                 DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;centos                               The official build of CentOS.                   1034      [OK]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ansible/centos7-ansible              Ansible on Centos7                              43                   [OK]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tutum/centos                         Centos image with SSH access. For the root...   13                   [OK]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;没有 &lt;code&gt;/&lt;/code&gt; 的镜像说明来自顶层的官方镜像。&lt;/p&gt;
&lt;p&gt;可以使用 &lt;code&gt;docker pull &amp;lt;imagename&amp;gt;&lt;/code&gt; 下载所需要的镜像。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ docker pull centos&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;latest: Pulling from centos&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6941bfcbbfca: Pull complete&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41459f052977: Pull complete&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fd44297e2ddb: Already exists&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;centos:latest: The image you are pulling has been verified. Important: image verification is a tech preview feature and should not be relied on to provide security.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Digest: sha256:d601d3b928eb2954653c59e65862aabb31edefa868bd5148a41fa45004c12288&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Status: Downloaded newer image for centos:latest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;查看源标签&#34;&gt;&lt;a href=&#34;#查看源标签&#34; class=&#34;headerlink&#34; title=&#34;查看源标签&#34;&gt;&lt;/a&gt;查看源标签&lt;/h4&gt;&lt;p&gt;Docker Hub 的 “Tags” 显示了可以获取的版本和相关联的镜像大小。镜像大小是镜像和累积的所有父镜像之和，也是当你执行 &lt;code&gt;docker save&lt;/code&gt; 时创建的 Tar 文件的大小。&lt;/p&gt;
&lt;h4 id=&#34;创建新仓库&#34;&gt;&lt;a href=&#34;#创建新仓库&#34; class=&#34;headerlink&#34; title=&#34;创建新仓库&#34;&gt;&lt;/a&gt;创建新仓库&lt;/h4&gt;&lt;p&gt;有 xxxx 的命名规则，文档都有不再赘述，创建完成后就可以使用 &lt;code&gt;docker push&lt;/code&gt; 来上传镜像。&lt;/p&gt;
&lt;h4 id=&#34;上传镜像&#34;&gt;&lt;a href=&#34;#上传镜像&#34; class=&#34;headerlink&#34; title=&#34;上传镜像&#34;&gt;&lt;/a&gt;上传镜像&lt;/h4&gt;&lt;p&gt;在往 Docker Hub 上传镜像之前，你需要使用 Docker Hub 的用户名和仓库名来命名本地镜像。你可以通过使用特殊的 &lt;code&gt;:&amp;lt;tag&amp;gt;&lt;/code&gt; 标签来往一个仓库添加多个镜像。如果不指明，则默认为 &lt;code&gt;latest&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;可以使用 &lt;code&gt;docker build -t &amp;lt;hub-user&amp;gt;/&amp;lt;repo-name&amp;gt;[:&amp;lt;tag&amp;gt;]&lt;/code&gt; 在构建镜像时命名，使用 &lt;code&gt;docker tag &amp;lt;existing-image&amp;gt; &amp;lt;hub-user&amp;gt;/&amp;lt;repo-name&amp;gt;[:&amp;lt;tag&amp;gt;]&lt;/code&gt; 重命名已经存在的本地镜像，或使用 &lt;code&gt;docker commit &amp;lt;exiting-container&amp;gt; &amp;lt;hub-user&amp;gt;/&amp;lt;repo-name&amp;gt;[:&amp;lt;tag&amp;gt;]&lt;/code&gt; 来提交更改。&lt;/p&gt;
&lt;p&gt;然后就可以上传镜像。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker push &amp;lt;hub-user&amp;gt;/&amp;lt;repo-name&amp;gt;:&amp;lt;tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;省略其余&#34;&gt;&lt;a href=&#34;#省略其余&#34; class=&#34;headerlink&#34; title=&#34;省略其余&#34;&gt;&lt;/a&gt;省略其余&lt;/h4&gt;&lt;p&gt;省略其余还未了解及用到的部分，请自行查阅文档。&lt;/p&gt;
&lt;h3 id=&#34;自动构建&#34;&gt;&lt;a href=&#34;#自动构建&#34; class=&#34;headerlink&#34; title=&#34;自动构建&#34;&gt;&lt;/a&gt;自动构建&lt;/h3&gt;&lt;p&gt;有其优点，当然也有其缺点，大体上就是通过链接到 GitHub 或是 Bitbucket 然后再使用。虽然使用过这两个 git 的管理工具，但是初入 Docker 暂不打算先了解自动构建，后期有精力或有需求再看。&lt;/p&gt;
&lt;h3 id=&#34;继续省略其余&#34;&gt;&lt;a href=&#34;#继续省略其余&#34; class=&#34;headerlink&#34; title=&#34;继续省略其余&#34;&gt;&lt;/a&gt;继续省略其余&lt;/h3&gt;&lt;p&gt;个人认为的入门级应用就这些，其余的不再赘述，有需要的可以自行查看官方文档。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/03/06/docker-learning-trip-3/</guid>
            <title>Docker 学习之旅（三）：创建基础镜像</title>
            <link>https://blog.timerever.tk/2017/03/06/docker-learning-trip-3/</link>
            <category>Docker</category>
            <pubDate>Mon, 06 Mar 2017 02:37:56 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;基础镜像，官方说法是 &lt;strong&gt;base image&lt;/strong&gt;，官方解释为“ &lt;strong&gt;An image that has no parent is a base image.&lt;/strong&gt; ”也就是说，没有父镜像的镜像就是基础镜像，我们要做的就是创建一个基础镜像。&lt;/p&gt;
&lt;p&gt;文档链接：&lt;a href=&#34;https://docs.docker.com/engine/userguide/eng-image/baseimages/&#34;&gt;https://docs.docker.com/engine/userguide/eng-image/baseimages/&lt;/a&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h3 id=&#34;使用-tar-创建一个完整镜像&#34;&gt;&lt;a href=&#34;#使用-tar-创建一个完整镜像&#34; class=&#34;headerlink&#34; title=&#34;使用 tar 创建一个完整镜像&#34;&gt;&lt;/a&gt;使用 &lt;code&gt;tar&lt;/code&gt; 创建一个完整镜像&lt;/h3&gt;&lt;p&gt;执行 &lt;code&gt;$ docker run raring cat /etc/lsb-release&lt;/code&gt; 命令时报错且解决无果，可能 Debian 的发行版和 Ubuntu还是存在些许差异。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ docker run raring cat /etc/lsb-release&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;container_linux.go:247: starting container process caused &amp;quot;exec: \&amp;quot;cat\&amp;quot;: executable file not found in $PATH&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker: Error response from daemon: oci runtime error: container_linux.go:247: starting container process caused &amp;quot;exec: \&amp;quot;cat\&amp;quot;: executable file not found in $PATH&amp;quot;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ERRO[0000] error getting events from daemon: net/http: request canceled&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;使用-scratch-创建一个简单的基础镜像&#34;&gt;&lt;a href=&#34;#使用-scratch-创建一个简单的基础镜像&#34; class=&#34;headerlink&#34; title=&#34;使用 scratch 创建一个简单的基础镜像&#34;&gt;&lt;/a&gt;使用 scratch 创建一个简单的基础镜像&lt;/h3&gt;&lt;p&gt;当 &lt;code&gt;scratch&lt;/code&gt; 在 Docker 的库中出现时，你不能 pull、run 或者在其他镜像标记这个名字，但是你可以在你的 &lt;code&gt;Dockerfile&lt;/code&gt; 文件中引用它。&lt;/p&gt;
&lt;p&gt;例如，使用 &lt;code&gt;scratch&lt;/code&gt; 创建一个最小化的容器：&lt;/p&gt;
&lt;figure class=&#34;highlight dockerfile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; scratch&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;ADD&lt;/span&gt;&lt;span class=&#34;bash&#34;&gt; hello /&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;CMD&lt;/span&gt;&lt;span class=&#34;bash&#34;&gt; [&lt;span class=&#34;string&#34;&gt;&amp;quot;/hello&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后你可以在当前目录使用 &lt;code&gt;docker build --tag hello .&lt;/code&gt; 来构建容器。在这里需要 hello 文件，你可以从 Docker Github 的 &lt;a href=&#34;https://github.com/docker-library/hello-world/blob/master/hello.c&#34;&gt;示例源代码&lt;/a&gt; 中下载并编译，过程如下。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ vi Dockerfile&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ wget https://raw.githubusercontent.com/docker-library/hello-world/master/hello.c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ gcc -o hello -static -nostartfiles hello.c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ docker build --tag hello .&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ docker run hello&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Hello from Docker!&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;This message shows that your installation appears to be working correctly.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;To generate this message, Docker took the following steps:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 1. The Docker client contacted the Docker daemon.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 2. The Docker daemon pulled the &lt;span class=&#34;string&#34;&gt;&amp;quot;hello-world&amp;quot;&lt;/span&gt; image from the Docker Hub.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 3. The Docker daemon created a new container from that image &lt;span class=&#34;built_in&#34;&gt;which&lt;/span&gt; runs the&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    executable that produces the output you are currently reading.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 4. The Docker daemon streamed that output to the Docker client, &lt;span class=&#34;built_in&#34;&gt;which&lt;/span&gt; sent it&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    to your terminal.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;To try something more ambitious, you can run an Ubuntu container with:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; $ docker run -it ubuntu bash&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Share images, automate workflows, and more with a free Docker ID:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; https://cloud.docker.com/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;For more examples and ideas, visit:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; https://docs.docker.com/engine/userguide/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/03/05/docker-learning-trip-2/</guid>
            <title>Docker 学习之旅（二）：Dockerfile 命令</title>
            <link>https://blog.timerever.tk/2017/03/05/docker-learning-trip-2/</link>
            <category>Docker</category>
            <category>Dockerfile</category>
            <pubDate>Sun, 05 Mar 2017 12:37:20 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;本篇是对 &lt;code&gt;Dockerfile&lt;/code&gt; 文件的一个介绍，在了解完相关知识后，可以用 &lt;code&gt;Dockerfile&lt;/code&gt; 文件创建一个简单的镜像。&lt;/p&gt;
&lt;h3 id=&#34;参考和推荐&#34;&gt;&lt;a href=&#34;#参考和推荐&#34; class=&#34;headerlink&#34; title=&#34;参考和推荐&#34;&gt;&lt;/a&gt;参考和推荐&lt;/h3&gt;&lt;p&gt;文档链接：&lt;a href=&#34;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#general-guidelines-and-recommendations&#34;&gt;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#general-guidelines-and-recommendations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;更详细的 &lt;code&gt;Dockerfile&lt;/code&gt; 参考链接：&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/&#34;&gt;https://docs.docker.com/engine/reference/builder/&lt;/a&gt;，同样适用于下文。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器的生命应该是短暂的&lt;/li&gt;
&lt;li&gt;可以使用 &lt;code&gt;.dockerignore&lt;/code&gt; 文件来排除文件&lt;/li&gt;
&lt;li&gt;避免安装不需要的包&lt;/li&gt;
&lt;li&gt;每个容器都应该只有一个关注点&lt;/li&gt;
&lt;li&gt;最小化层的数量&lt;/li&gt;
&lt;li&gt;整理多行参数&lt;/li&gt;
&lt;li&gt;Build 缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;都是一些阅读理解的内容，详细见官方文档。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h3 id=&#34;Dockerfile-指南&#34;&gt;&lt;a href=&#34;#Dockerfile-指南&#34; class=&#34;headerlink&#34; title=&#34;Dockerfile 指南&#34;&gt;&lt;/a&gt;Dockerfile 指南&lt;/h3&gt;&lt;p&gt;文档链接：&lt;a href=&#34;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#the-dockerfile-instructions&#34;&gt;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#the-dockerfile-instructions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;仅列出各命令简单用法，详细请参照上文列出的官方详细文档。&lt;/p&gt;
&lt;h4 id=&#34;FROM&#34;&gt;&lt;a href=&#34;#FROM&#34; class=&#34;headerlink&#34; title=&#34;FROM&#34;&gt;&lt;/a&gt;FROM&lt;/h4&gt;&lt;p&gt;你可以在现有镜像的基础上构建自己的镜像。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM &amp;lt;image&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM &amp;lt;image&amp;gt;:&amp;lt;tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM &amp;lt;image&amp;gt;@&amp;lt;digest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;LABEL&#34;&gt;&lt;a href=&#34;#LABEL&#34; class=&#34;headerlink&#34; title=&#34;LABEL&#34;&gt;&lt;/a&gt;LABEL&lt;/h4&gt;&lt;p&gt;&lt;code&gt;LABEL&lt;/code&gt; 命令用来给镜像添加元数据，可以更好地管理镜像等。&lt;/p&gt;
&lt;p&gt;用法：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;LABEL &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可在一个命令中使用多个键值对，也可只使用一个。若镜像是以其他镜像 &lt;code&gt;FROM&lt;/code&gt; 为基础的，相同的标签将会覆盖原有标签。&lt;/p&gt;
&lt;h4 id=&#34;RUN&#34;&gt;&lt;a href=&#34;#RUN&#34; class=&#34;headerlink&#34; title=&#34;RUN&#34;&gt;&lt;/a&gt;RUN&lt;/h4&gt;&lt;p&gt;RUN指令将在当前映像之上的新层中执行任何命令，并提交执行结果，这个提交的的执行后的镜像将被 &lt;code&gt;Dockerfile&lt;/code&gt; 的其余步骤使用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RUN&lt;/code&gt; 指令有两种形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RUN &amp;lt;command&amp;gt;&lt;/code&gt;（shell 形式，命令在 shell 中运行，对于 Linux 默认为 &amp;#x2F;bin&amp;#x2F;sh -c，而对于 Windows 默认为 cmd &amp;#x2F;S &amp;#x2F;C）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RUN [&amp;quot;executable&amp;quot;, &amp;quot;param1&amp;quot;, &amp;quot;param2&amp;quot;]&lt;/code&gt;（执行形式）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;APT-GET&#34;&gt;&lt;a href=&#34;#APT-GET&#34; class=&#34;headerlink&#34; title=&#34;APT-GET&#34;&gt;&lt;/a&gt;APT-GET&lt;/h4&gt;&lt;p&gt;这可能是 &lt;code&gt;RUN&lt;/code&gt; 命令的最多使用情况，但是你应该避免使用 &lt;code&gt;RUN apt-get upgrade&lt;/code&gt; 或是 &lt;code&gt;dist-upgrade&lt;/code&gt;，因为许多“必要”的包将不会在无特权的容器内部被升级。如果一个镜像所包含的基础镜像过期，请联系管理员。&lt;/p&gt;
&lt;p&gt;记得将 &lt;code&gt;RUN apt-get update&lt;/code&gt; 命令与 &lt;code&gt;apt-get install&lt;/code&gt; 命令放在同一个 &lt;code&gt;RUN&lt;/code&gt; 声明中，例如：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    package-bar \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    package-baz \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    package-foo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在一个单独的 &lt;code&gt;RUN&lt;/code&gt; 声明中使用 &lt;code&gt;apt-get update&lt;/code&gt; 将会导致缓存问题和之后的 &lt;code&gt;apt-get install&lt;/code&gt; 命令失败。&lt;/p&gt;
&lt;h4 id=&#34;使用管道&#34;&gt;&lt;a href=&#34;#使用管道&#34; class=&#34;headerlink&#34; title=&#34;使用管道&#34;&gt;&lt;/a&gt;使用管道&lt;/h4&gt;&lt;p&gt;有一些 &lt;code&gt;RUN&lt;/code&gt; 命令使用和 Linux 中同样的管道来将一个命令的输入导入到另一个命令当中，符号同样为 &lt;code&gt;|&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;CMD&#34;&gt;&lt;a href=&#34;#CMD&#34; class=&#34;headerlink&#34; title=&#34;CMD&#34;&gt;&lt;/a&gt;CMD&lt;/h4&gt;&lt;p&gt;&lt;code&gt;CMD&lt;/code&gt; 命令的主要作用是给可执行容器提供默认的参数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CMD&lt;/code&gt; 命令有三种形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CMD [&amp;quot;executable&amp;quot;,&amp;quot;param1&amp;quot;,&amp;quot;param2&amp;quot;]&lt;/code&gt;（执行形式，最推荐的形式）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMD [&amp;quot;param1&amp;quot;,&amp;quot;param2&amp;quot;]&lt;/code&gt;（入口点的默认参数）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMD command param1 param2&lt;/code&gt;（shell 形式）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在一个 &lt;code&gt;Dockerfile&lt;/code&gt; 文件中，只能有一个 &lt;code&gt;CMD&lt;/code&gt; 指令，如果你列出超过一个的 &lt;code&gt;CMD&lt;/code&gt; 指令，只有最后一条会起作用。&lt;/p&gt;
&lt;h4 id=&#34;EXPOSE&#34;&gt;&lt;a href=&#34;#EXPOSE&#34; class=&#34;headerlink&#34; title=&#34;EXPOSE&#34;&gt;&lt;/a&gt;EXPOSE&lt;/h4&gt;&lt;p&gt;&lt;code&gt;EXPOSE&lt;/code&gt; 命令用于开放容器的内部端口，支持环境变量（例如，&lt;code&gt;MYSQL_PORT_3306_TCP&lt;/code&gt;）。但是&lt;code&gt;EXPOSE&lt;/code&gt; 命令并不能使内部端口对宿主可见，你必须使用 &lt;code&gt;-p&lt;/code&gt; 命令来开放特定端口或是使用 &lt;code&gt;-P&lt;/code&gt; 命令来开放所有的 &lt;code&gt;EXPOSE&lt;/code&gt; 的端口。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;EXPOSE &amp;lt;port&amp;gt; [&amp;lt;port&amp;gt;...]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ENV&#34;&gt;&lt;a href=&#34;#ENV&#34; class=&#34;headerlink&#34; title=&#34;ENV&#34;&gt;&lt;/a&gt;ENV&lt;/h4&gt;&lt;p&gt;&lt;code&gt;ENV&lt;/code&gt; 命令用来更新 &lt;code&gt;PATH&lt;/code&gt; 环境变量。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ENV &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;
ENV &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这是&lt;code&gt;ENV&lt;/code&gt; 命令的两种使用形式，推荐使用第二种形式。&lt;/p&gt;
&lt;h4 id=&#34;ADD-or-COPY&#34;&gt;&lt;a href=&#34;#ADD-or-COPY&#34; class=&#34;headerlink&#34; title=&#34;ADD or COPY&#34;&gt;&lt;/a&gt;ADD or COPY&lt;/h4&gt;&lt;p&gt;&lt;code&gt;ADD&lt;/code&gt; 和 &lt;code&gt;COPY&lt;/code&gt; 命令拥有相似的功能，通常而言，&lt;code&gt;COPY&lt;/code&gt; 因其更加透明而被推荐。但是 &lt;code&gt;COPY&lt;/code&gt; 只能拷贝本地文件而 &lt;code&gt;ADD&lt;/code&gt; 拥有更多的特性（比如本地 tar 提取和远程 URL 支持）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ADD/COPY &amp;lt;src&amp;gt;... &amp;lt;dest&amp;gt;
ADD/COPY [&amp;quot;&amp;lt;src&amp;gt;&amp;quot;,... &amp;quot;&amp;lt;dest&amp;gt;&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;省略众多详细介绍，详见文档。&lt;/p&gt;
&lt;h4 id=&#34;ENTRYPOINT&#34;&gt;&lt;a href=&#34;#ENTRYPOINT&#34; class=&#34;headerlink&#34; title=&#34;ENTRYPOINT&#34;&gt;&lt;/a&gt;ENTRYPOINT&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;ENTRYPOINT [&amp;quot;executable&amp;quot;, &amp;quot;param1&amp;quot;, &amp;quot;param2&amp;quot;]（执行形式，推荐）
ENTRYPOINT command param1 param2（shell 形式）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ENTRYPOINT&lt;/code&gt; 命令允许你配置容器使其变成可执行容器。&lt;/p&gt;
&lt;h4 id=&#34;USER&#34;&gt;&lt;a href=&#34;#USER&#34; class=&#34;headerlink&#34; title=&#34;USER&#34;&gt;&lt;/a&gt;USER&lt;/h4&gt;&lt;p&gt;&lt;code&gt;USER&lt;/code&gt; 可以使容器改变运行用户，通过在 &lt;code&gt;Dockerfile&lt;/code&gt; 文件中使用类似 &lt;code&gt;RUN groupadd -r postgres &amp;amp;&amp;amp; useradd -r -g postgres postgres&lt;/code&gt; 的命令来创建用户和组。&lt;/p&gt;
&lt;h4 id=&#34;WORKDIR&#34;&gt;&lt;a href=&#34;#WORKDIR&#34; class=&#34;headerlink&#34; title=&#34;WORKDIR&#34;&gt;&lt;/a&gt;WORKDIR&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;WORKDIR /path/to/workdir
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;WORKDIR&lt;/code&gt; 指令可以设置 &lt;code&gt;RUN&lt;/code&gt;、&lt;code&gt;CMD&lt;/code&gt;、&lt;code&gt;ENTRYPOINT&lt;/code&gt;、&lt;code&gt;COPY&lt;/code&gt; 和 &lt;code&gt;ADD&lt;/code&gt; 指令的工作目录。即使后续并不会使用到 &lt;code&gt;WORKDIR&lt;/code&gt; 指令，它仍然会被创建。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WORKDIR&lt;/code&gt; 指令可在一个 &lt;code&gt;Dockerfile&lt;/code&gt; 文件中使用多次。如果给定一个相对路径，那么它会相对于之前的 &lt;code&gt;WORKDIR&lt;/code&gt; 指令。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;WORKDIR /a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;WORKDIR b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;WORKDIR c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;RUN pwd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;pwd&lt;/code&gt; 的输出将为 &lt;code&gt;/a/b/c&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WORKDIR&lt;/code&gt; 指令也可解析在之前通过 &lt;code&gt;ENV&lt;/code&gt; 指令设置的环境变量。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ENV DIRPATH /path&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;WORKDIR $DIRPATH/$DIRNAME&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;RUN pwd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;pwd&lt;/code&gt; 的输出将为 &lt;code&gt;/path/$DIRNAME&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;ONBUILD&#34;&gt;&lt;a href=&#34;#ONBUILD&#34; class=&#34;headerlink&#34; title=&#34;ONBUILD&#34;&gt;&lt;/a&gt;ONBUILD&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;ONBUILD [INSTRUCTION]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ONBUILD&lt;/code&gt; 命令在当前 &lt;code&gt;Dockerfile&lt;/code&gt; 文件构建完成后执行，也就是该镜像最为其他镜像的父镜像时。它会在子镜像的 &lt;code&gt;Dockerfile&lt;/code&gt; 文件中的 &lt;code&gt;FROM&lt;/code&gt; 指令后立即被执行。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/03/03/docker-learning-trip-1/</guid>
            <title>Docker 学习之旅（一）：Docker 的安装</title>
            <link>https://blog.timerever.tk/2017/03/03/docker-learning-trip-1/</link>
            <category>Docker</category>
            <pubDate>Fri, 03 Mar 2017 02:50:38 +0000</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;所以之前弄得都差不多算是白弄了，一切还需要从头开始。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于使用的环境为 Ubuntu 的 16.10 最新稳定版本，所以打开 Ubuntu 的文档进行安装，以下命令全部来源于官方文档。&lt;/p&gt;
&lt;p&gt;为了防止惨剧的再次发生，记录下此时的版本，页面右上角显示为 Docker 17.03。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h3 id=&#34;卸载旧版本&#34;&gt;&lt;a href=&#34;#卸载旧版本&#34; class=&#34;headerlink&#34; title=&#34;卸载旧版本&#34;&gt;&lt;/a&gt;卸载旧版本&lt;/h3&gt;&lt;p&gt;文档链接：&lt;a href=&#34;https://docs.docker.com/engine/installation/linux/ubuntu/#uninstall-old-versions&#34;&gt;https://docs.docker.com/engine/installation/linux/ubuntu/#uninstall-old-versions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;因为安装了旧版本的 Docker，所以需要先卸载老版本，当然没有安装过就不需要进行这一步了。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ sudo apt-get remove docker docker-engine&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;安装-Docker&#34;&gt;&lt;a href=&#34;#安装-Docker&#34; class=&#34;headerlink&#34; title=&#34;安装 Docker&#34;&gt;&lt;/a&gt;安装 Docker&lt;/h3&gt;&lt;p&gt;文档链接：&lt;a href=&#34;https://docs.docker.com/engine/installation/linux/ubuntu/#install-docker&#34;&gt;https://docs.docker.com/engine/installation/linux/ubuntu/#install-docker&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;因为 Docker 是有 Ubuntu 的源的，所以直接采用 apt 安装，方便快捷。&lt;/p&gt;
&lt;p&gt;之前忘记说了，此次更新 Docker 有了两个版本，分别是 Docker CE 和 Docker EE。从名字其实就可以大概猜出，一个是普通版（其实是社区版）一个是企业版。所以，当然是选择社区版，而且官方提到了社区版和企业版的安装是有所不同的，在此只记录社区版的安装。&lt;/p&gt;
&lt;h4 id=&#34;添加源&#34;&gt;&lt;a href=&#34;#添加源&#34; class=&#34;headerlink&#34; title=&#34;添加源&#34;&gt;&lt;/a&gt;添加源&lt;/h4&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ sudo apt-get install \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    apt-transport-https \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ca-certificates \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    curl \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    software-properties-common&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ sudo apt-key fingerprint 0EBFCD88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ sudo add-apt-repository \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;string&#34;&gt;&amp;quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;   &lt;span class=&#34;subst&#34;&gt;$(lsb_release -cs)&lt;/span&gt; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;   stable&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中 &lt;code&gt;sudo apt-key fingerprint 0EBFCD88&lt;/code&gt; 是用来验证源的 key 信息是否匹配，正确的信息应该为 &lt;code&gt;9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这边使用的是 &lt;code&gt;stable&lt;/code&gt; 版本，若要使用更新更快的 &lt;code&gt;edge&lt;/code&gt; 版本，只需在最后一行的 &lt;code&gt;stable&lt;/code&gt; 后面添加 &lt;code&gt;edge&lt;/code&gt; 即可。对于这两个版本，官方解释如下。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Docker CE gives you the option to run stable or edge builds.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;* Stable builds are released once per quarter.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;* Edge builds are released once per month.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;安装-Docker-1&#34;&gt;&lt;a href=&#34;#安装-Docker-1&#34; class=&#34;headerlink&#34; title=&#34;安装 Docker&#34;&gt;&lt;/a&gt;安装 Docker&lt;/h4&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ sudo apt-get update&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ sudo apt-get install docker-ce&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这样默认安装的总是最新版本的 Docker ，如果你想安装特定版本的 Docker ，可以使用 &lt;code&gt;sudo apt-get install docker-ce=&amp;lt;VERSION&amp;gt;&lt;/code&gt; ，使用 &lt;code&gt;apt-cache madison docker-ce&lt;/code&gt; 来显示可以安装的 Docker 版本。&lt;/p&gt;
&lt;p&gt;可以通过运行 &lt;code&gt;hello-world&lt;/code&gt; 镜像来确认已将 Docker CE 正确安装。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ sudo docker run hello-world&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;更新-Docker&#34;&gt;&lt;a href=&#34;#更新-Docker&#34; class=&#34;headerlink&#34; title=&#34;更新 Docker&#34;&gt;&lt;/a&gt;更新 Docker&lt;/h4&gt;&lt;p&gt;首先运行 &lt;code&gt;sudo apt-get update&lt;/code&gt;，然后根据安装指南选择想要安装的新版本。&lt;/p&gt;
&lt;h3 id=&#34;Linux-下的可选安装步骤&#34;&gt;&lt;a href=&#34;#Linux-下的可选安装步骤&#34; class=&#34;headerlink&#34; title=&#34;Linux 下的可选安装步骤&#34;&gt;&lt;/a&gt;Linux 下的可选安装步骤&lt;/h3&gt;&lt;p&gt;文档链接：&lt;a href=&#34;https://docs.docker.com/engine/installation/linux/linux-postinstall/&#34;&gt;https://docs.docker.com/engine/installation/linux/linux-postinstall/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;此处只列出个人所使用的可选安装。&lt;/p&gt;
&lt;h4 id=&#34;使用非-root-用户管理-Docker&#34;&gt;&lt;a href=&#34;#使用非-root-用户管理-Docker&#34; class=&#34;headerlink&#34; title=&#34;使用非 root 用户管理 Docker&#34;&gt;&lt;/a&gt;使用非 root 用户管理 Docker&lt;/h4&gt;&lt;p&gt;通过文档我们得知 &lt;code&gt;docker&lt;/code&gt; 的守护进程绑定的是 Unix socket，默认情况下该 Unix socket 是属于 root 用户，其他用户只能通过 &lt;code&gt;sudo&lt;/code&gt; 进行访问，而 &lt;code&gt;docker&lt;/code&gt; 的守护进程一直是由 root 用户运行的。所以如果想不使用 &lt;code&gt;sudo&lt;/code&gt; 来使用 Docker，可以把用户添加到 &lt;code&gt;docker&lt;/code&gt; 用户组。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ sudo groupadd docker # 此处已经存在docker组可不执行操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ sudo usermod -aG docker $USER&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;注销重新登入系统来使用户组更新。&lt;/p&gt;
&lt;p&gt;通过不加 &lt;code&gt;sudo&lt;/code&gt; 命令的 &lt;code&gt;docker&lt;/code&gt; 命令来验证。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ docker run hello-world&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;使-Docker-开机自启&#34;&gt;&lt;a href=&#34;#使-Docker-开机自启&#34; class=&#34;headerlink&#34; title=&#34;使 Docker 开机自启&#34;&gt;&lt;/a&gt;使 Docker 开机自启&lt;/h4&gt;&lt;p&gt;对于大多数的发行版本（RHEL, CentOS, Fedora, Ubuntu 16.04 and higher）使用 &lt;code&gt;systemd&lt;/code&gt; 来管理开机自启动的服务，Ubuntu 14.10 及以下版本使用 &lt;code&gt;upstart&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;systemd&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ sudo systemctl enable docker # 开启自启动&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ sudo systemctl disable docker # 关闭自启动&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;upstart&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker 自动使用 &lt;code&gt;upstart&lt;/code&gt; 配置自启动，通过以下命令来禁用。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ echo manual | sudo tee /etc/init/docker.override&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;chkconfig&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ sudo chkconfig docker on&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;设置-HTTP-代理&#34;&gt;&lt;a href=&#34;#设置-HTTP-代理&#34; class=&#34;headerlink&#34; title=&#34;设置 HTTP 代理&#34;&gt;&lt;/a&gt;设置 HTTP 代理&lt;/h4&gt;&lt;p&gt;因为 Docker 的服务器在国外，所以直连的速度很慢，就需要用国内的镜像或者使用 HTTP 代理，这里选择的是使用 HTTP 代理。该文档不在上面的可选安装步骤里，在后面的 Admin Guide 里面，链接：&lt;a href=&#34;https://docs.docker.com/engine/admin/systemd/#http-proxy&#34;&gt;https://docs.docker.com/engine/admin/systemd/#http-proxy&lt;/a&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ mkdir -p /etc/systemd/system/docker.service.d&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ vi /etc/systemd/system/docker.service.d/http-proxy.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;添加下列内容，按实际情况修改。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[Service]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Environment=&amp;quot;HTTP_PROXY=http://proxy.example.com:80/&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;或者使用以下内容设置不通过代理的地址。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Environment=&amp;quot;HTTP_PROXY=http://proxy.example.com:80/&amp;quot; &amp;quot;NO_PROXY=localhost,127.0.0.1,docker-registry.somecorporation.com&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后继续操作完成配置。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ sudo systemctl daemon-reload&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ systemctl show --property=Environment docker # 验证配置是否已经重载，将显示上面配置的信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ sudo systemctl restart docker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.timerever.tk/2017/03/02/docker-learning-trip-0/</guid>
            <title>Docker 学习之旅（零）：出师不利</title>
            <link>https://blog.timerever.tk/2017/03/02/docker-learning-trip-0/</link>
            <category>Docker</category>
            <pubDate>Thu, 02 Mar 2017 13:51:49 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;Docker——这是一个自出现以来就发展迅猛并获得成功的引擎。自从选择这个方向学习以来，一直在各个地方看到这个名词，但也只是大概了解到这是一个一般企业才会采用的东西。&lt;/p&gt;
&lt;p&gt;寒假放假前的课程设计，邀请了企业的人拿来了企业的真实项目来让我们学习，有幸在课余时间与主管技术的老师咨询讨论了一下。其中有一个话题就说到了 Docker，也是符合之前自己所想，老师也是说，像我们平时自己用，拿自己电脑跑或者租个 vps 什么的也就够了，也是用不上这种东西，不过从交谈中也大概了解到了应用 Docker 的优势，比如统一测试环境，比如秒级启动随时恢复等等等等。&lt;/p&gt;
&lt;p&gt;秉承着热爱计算机相关的一切的原则，还是决定先大概看一下这个东西，虽然可能实用性真的接近于零，不过就像自己选择这个专业一样，不是出于为了找工作或者怎样怎样的功利的心态，而是所谓的，真的是“热爱学习”。&lt;/p&gt;
&lt;p&gt;所以作为一只准程序猿，那么要做的第一件事便是打开官网寻找官方文档（所谓程序员必会通用技能），然后就是阅读英文文档（另一项必会技能）。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h3 id=&#34;安装&#34;&gt;&lt;a href=&#34;#安装&#34; class=&#34;headerlink&#34; title=&#34;安装&#34;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;使用的环境是 Ubuntu 的 16.10，默认的源里有 Docker，只需按照官网手册就可轻松安装。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ sudo apt-get install \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    apt-transport-https \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ca-certificates \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    curl \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    software-properties-common&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ sudo apt-key fingerprint 0EBFCD88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ sudo add-apt-repository \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;string&#34;&gt;&amp;quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;   &lt;span class=&#34;subst&#34;&gt;$(lsb_release -cs)&lt;/span&gt; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;   stable&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;等等，怎么有些不对，记得以前看到的源的指纹长度比这还要长……&lt;/p&gt;
&lt;p&gt;还以为是找错了文档，结果打开历史记录一看原来真的是文档改变了，最显而易见的就是网站的 favicon 颜色变深了，也确定了文档就是在今天中午或下午更新了（明明早上起来还看过的，摔！）。&lt;/p&gt;
&lt;p&gt;所以看来是写不成第一篇了，之前被称作 docker 和 docker-engine 的东西已经成为了旧版，现在出现的是 Docker CE 和 Docker EE，文档的开始已经让卸载旧版了。不过可能是因为刚刚更新，Docker CE 和 Docker EE 所指向的链接还不能打开，看来真正的旅程应该是等着文档补全然后再开始了（虽然知道“学习之旅”的翻译是中式英语但是真的找不到合适的翻译了）。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
