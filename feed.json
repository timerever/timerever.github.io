{
    "version": "https://jsonfeed.org/version/1",
    "title": "A Blog",
    "description": "Just another blog.",
    "home_page_url": "https://blog.timerever.tk",
    "items": [
        {
            "id": "https://blog.timerever.tk/2022/03/03/sort-an-array-in-a-waveform/",
            "url": "https://blog.timerever.tk/2022/03/03/sort-an-array-in-a-waveform/",
            "title": "波浪排序",
            "date_published": "2022-03-03T08:55:42.000Z",
            "content_html": "<p>偶然间看到了一道算法题，第一眼看起来还挺简单，但是想了想发现不止这么简单，应该会有更优解。拿“波浪排序”作为关键字在百度上进行搜索，发现并没有相关题目。又以“sort wave”为关键字在谷歌上进行搜索，终于发现了相关解析，这里用自己的方式记录一下解题思路。</p>\n<p>首先来看题目：</p>\n<blockquote>\n<p>将给定的数组中的元素进行波浪形排序。<br>波浪形排序是指: arr[0] ≥ arr[1] ≤ arr[2] ≥ arr[3] ≤ arr[4] ≥ arr[5]<br>例如:<br>输入: 1, 2, 6, 7, 5, 3, 4<br>输出: 4, 1, 7, 5, 6, 2, 3</p>\n</blockquote>\n<p>解法参考：<a href=\"https://www.enjoyalgorithms.com/blog/sort-an-array-in-a-waveform\">Sort an array in a waveform</a></p>\n<span id=\"more\"></span>\n\n<h3 id=\"一、排序解法\"><a href=\"#一、排序解法\" class=\"headerlink\" title=\"一、排序解法\"></a>一、排序解法</h3><p>排序解法是最简单也是最容易想到的解法。首先对数组进行排序，升序降序不重要，因为解法有很多种。</p>\n<p>排序后我们可以：</p>\n<ul>\n<li>从两端分别拿取最大值和最小值，逐渐完成排序</li>\n<li>算出数组中间元素，则将整个数组划分为了小半区和大半区，然后同样分别往两端拿取各半区元素，完成排序</li>\n<li>升序排序后，偶数位（非数组下标位）的元素一定会大于等于前面的元素，将偶数位元素分别与前面的元素交换</li>\n</ul>\n<h4 id=\"图解\"><a href=\"#图解\" class=\"headerlink\" title=\"图解\"></a>图解</h4><p>第三种解法不需要额外的空间占用，把现成的图拿过来方便理解。</p>\n<p>排序后：</p>\n<img src=\"/2022/03/03/sort-an-array-in-a-waveform/sort-an-array-in-a-waveform-1.png\" class=\"\" title=\"排序后\">\n\n<p>交换元素后：</p>\n<img src=\"/2022/03/03/sort-an-array-in-a-waveform/sort-an-array-in-a-waveform-2.png\" class=\"\" title=\"交换元素后\">\n\n<h4 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h4><p>排序后再遍历处理的时间复杂度为排序的时间复杂度 + 后续遍历处理时间复杂度，最优为：O(n\\log_2 n) + O(n) &#x3D; O(n\\log_2 n)<br>空间复杂度仍然取决于使用的排序算法 + 后续处理是否需要占用空间，最优为堆排 + 交换解法 &#x3D; O(1)</p>\n<h3 id=\"二、一次遍历解决\"><a href=\"#二、一次遍历解决\" class=\"headerlink\" title=\"二、一次遍历解决\"></a>二、一次遍历解决</h3><p>这道题的最优解在于，我们能否不使用排序，仅使用一次遍历完成波浪排序。</p>\n<p>从上面的结果可以看出，符合要求的答案，偶数位的元素，一定小于等于其前面和其后面的元素（对应题目要求的 arr[0] ≥ arr[1] ≤ arr[2]、arr[2] ≥ arr[3] ≤ arr[4]）。所以我们可以认为，对于每个偶数位元素，其一定是与相邻两个的元素比较中的最小值。那么我们就遍历偶数位元素，与其相邻元素为一组，将其交换为组内的最小值。然后我们可以看到，划分并遍历元素组的时候，遍历步长为 2，而元素为 3 个一组，所以奇数位元素会参与两次比较交换。<br>画了个图便于理解，数是随便写的，看上去直观一点：</p>\n<img src=\"/2022/03/03/sort-an-array-in-a-waveform/sort-an-array-in-a-waveform-3.png\" class=\"\" title=\"对元素分组\">\n\n<p>所以我们还需要解决的问题就是，当一次交换后，比如上图中的 30-10-50 排列好后，在以 20 为中心进行分组交换的时候，50 如果再次被交换后，会不会破坏左边已经排列好的结构。这里就需要定义我们的交换策略。</p>\n<p>对于每组 3 个元素，可能会有以下情况并分别进行处理：</p>\n<ul>\n<li>最左端为最小值：那么将最左端与中间进行交换，这样最左端相当于值变大了。而对于前一个元素组，其作为最右端的值，变大并不会影响现有结构</li>\n<li>中间的为最小值：不需要任何操作</li>\n<li>最右端为最小值：将最右端与中间进行交换，最左端未进行变更</li>\n</ul>\n<p>可以看到，基于以上逻辑，重合元素再第二次参与比较时，要么不变，要么变大，均不会影响原有结构。所以基于这种策略，逐渐遍历数组即可。</p>\n<p>最后再来看一下临界情况。</p>\n<ul>\n<li>如果数组长度为奇数，则正好可以完全分组</li>\n<li>如果数组长度为偶数，则最后会有一个元素未参与比较。再看回上面那张图，在已经排列好 30-10-50-20-70-30-80 的情况下<ul>\n<li>假设最后的值为 15（即小于等于倒数第二位的值），则无需处理</li>\n<li>假设最后的值为 90（即大于倒数第二位的值），则直接进行交换。由于倒数第二位的元素为上一分组最右端元素，此种交换情况会将其变大，由于上面的逻辑，所以仍不会破坏原有结构 <img src=\"/2022/03/03/sort-an-array-in-a-waveform/sort-an-array-in-a-waveform-4.png\" class=\"\" title=\"假设最后的值为 90 的情况\"></li>\n</ul>\n</li>\n</ul>\n<p>所以整体基于这种步长为 2 的遍历和上述交换逻辑，一次遍历就可以完成要求的波浪排序。</p>\n<h4 id=\"复杂度分析-1\"><a href=\"#复杂度分析-1\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h4><p>最后再来看一眼复杂度：</p>\n<ul>\n<li>时间复杂度：只需遍历一次数组，O(n)</li>\n<li>空间复杂度：只需临时变量进行元素交换，O(1)</li>\n</ul>\n",
            "tags": [
                "Algorithm",
                "Sort"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2022/02/09/custom-jackson-serializer-for-clob-type/",
            "url": "https://blog.timerever.tk/2022/02/09/custom-jackson-serializer-for-clob-type/",
            "title": "自定义 Jackson Serializer 解决无法序列化 SerialClob 的问题",
            "date_published": "2022-02-09T07:49:35.000Z",
            "content_html": "<p>由于种种原因，项目上在做数据查询时，没有选择任何的 ORM 框架而是使用了 <code>JdbcTemplate</code> 进行数据库查询。查询出来也没做太多事情，只是简单地对数据做了下封装，然后直接返回给了前端。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Map&lt;String, Object&gt;&gt; data = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">JdbcTemplate jdbcTemplate = <span class=\"keyword\">new</span> JdbcTemplate(ds);</span><br><span class=\"line\">SqlRowSet sqlRowSet = jdbcTemplate.queryForRowSet(sql);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> columnSize = sqlRowSet.getMetaData().getColumnNames().length;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (sqlRowSet.next()) &#123;</span><br><span class=\"line\">\tMap&lt;String, Object&gt; tmp = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= columnSize; i++) &#123;</span><br><span class=\"line\">\t\ttmp.put(i + <span class=\"string\">&quot;&quot;</span>, sqlRowSet.getObject(i));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdata.add(tmp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>本来一直岁月静好，知道某一天查了一张新表，然后后台报了异常：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class java.io.ByteArrayInputStream and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.demo.web.rest.util.ResponseEnvelope[&quot;data&quot;]-&gt;com.demo.service.dto.SqlQueryDto[&quot;data&quot;]-&gt;java.util.ArrayList[0]-&gt;java.util.LinkedHashMap[&quot;LOG_MSG&quot;]-&gt;javax.sql.rowset.serial.SerialClob[&quot;asciiStream&quot;])</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1300)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:400)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:46)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:728)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:774)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields(MapSerializer.java:808)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeWithoutTypeInfo(MapSerializer.java:764)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:720)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:35)</span><br><span class=\"line\">\tat com.fasterxml.jackson.datatype.hibernate5.PersistentCollectionSerializer.serialize(PersistentCollectionSerializer.java:244)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:119)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:79)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:18)</span><br><span class=\"line\">\tat com.fasterxml.jackson.datatype.hibernate5.PersistentCollectionSerializer.serialize(PersistentCollectionSerializer.java:244)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:728)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:774)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:728)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:774)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1518)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1007)</span><br><span class=\"line\">\tat org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:454)</span><br><span class=\"line\">\t... 123 common frames omitted</span><br></pre></td></tr></table></figure>\n\n<p>乍一看，可以通过提示所说的设置 <code>SerializationFeature.FAIL_ON_EMPTY_BEANS</code> 为 <code>false</code> 来避免这个问题，但这个问题其实远远没有这么简单。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"尝试按照提示解决\"><a href=\"#尝试按照提示解决\" class=\"headerlink\" title=\"尝试按照提示解决\"></a>尝试按照提示解决</h3><p>既然异常中已经给出了解决方案，所以我们可以先尝试用给出的方案解决。由于我们是 spring 项目，所以我们可以很简单地通过在 yaml 中添加配置而不是采用写大段代码的方式来设置这个序列化属性：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">jackson:</span></span><br><span class=\"line\">    <span class=\"attr\">serialization:</span></span><br><span class=\"line\">      <span class=\"attr\">FAIL_ON_EMPTY_BEANS:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>让我们再调用下接口。好，没问题，不报错了！再看眼返回值，等等，这是个啥？</p>\n<img src=\"/2022/02/09/custom-jackson-serializer-for-clob-type/custom-jackson-serializer-for-clob-type-1.png\" class=\"\" title=\"并不是所期望的结果\">\n\n<p>这个字段明明在数据库中是有值的，而且正常也不会变成这种嵌套结构，所以看来这个解决办法并不可行。</p>\n<h3 id=\"寻找问题根源\"><a href=\"#寻找问题根源\" class=\"headerlink\" title=\"寻找问题根源\"></a>寻找问题根源</h3><p>所以简单的解决方式不行，就只能按部就班先看问题出在哪里了。废话不多说，既然我们知道了问题出在哪个字段，就直接打个断点先看眼程序拿到的返回值是什么样子。</p>\n<p>已知数据库是 H2，对应的字段类型为 <code>CHARACTER LARGE OBJECT</code>，再看眼拿到的值：</p>\n<img src=\"/2022/02/09/custom-jackson-serializer-for-clob-type/custom-jackson-serializer-for-clob-type-2.png\" class=\"\" title=\"实际拿到的返回值\">\n\n<p>可以看到，程序所拿到的返回值是 <code>javax.sql.rowset.serial.SerialClob</code> 的对象，而这个对象里面所包含的 <code>clob</code> 字段就是 H2 的 <code>org.h2.jdbc.JdbcClob</code> 对象。</p>\n<img src=\"/2022/02/09/custom-jackson-serializer-for-clob-type/custom-jackson-serializer-for-clob-type-3.png\" class=\"\" title=\"SerialClob 类\">\n\n<p>也就是说，默认情况下 Jackson 无法序列化 <code>SerialClob</code> 这个类所创建的对象，是不是由于 <code>clob</code> 字段所包含的具体实现类导致的并没有进一步研究，因为数据库的种类很多，我们需要着手做的是解决这个不能序列化的问题。</p>\n<h3 id=\"自定义-Serializer-解决问题\"><a href=\"#自定义-Serializer-解决问题\" class=\"headerlink\" title=\"自定义 Serializer 解决问题\"></a>自定义 Serializer 解决问题</h3><p>我们知道 Jackson 可以通过扩展 <code>Module</code> 来支持更多类型的序列化操作，所以我们也可以采用同样的方式来增加对 <code>SerialClob</code> 的支持。</p>\n<p>不过我们不需要自定义 <code>Module</code>，使用自带的 <code>SimpleModule</code> 即可，要做的只是自定义对应的 Serializer：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SerialClobSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">JsonSerializer</span>&lt;<span class=\"title\">SerialClob</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">serialize</span><span class=\"params\">(SerialClob clob, JsonGenerator gen, SerializerProvider serializers)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tgen.writeString(clob.getCharacterStream(), (<span class=\"keyword\">int</span>) clob.length());</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SerialException e) &#123;</span><br><span class=\"line\">\t\t\tlog.error(<span class=\"string\">&quot;Serialize SerialClob error&quot;</span>, e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后要做的就是将自定义的 <code>SerialClobSerializer</code> 注册到 ObjectMapper 中去，通常网上的方法都是自定义创建全局的 <code>ObjectMapper</code> 供 Spring 使用。这个方法定制化强，完全由自己来创建 <code>ObjectMapper</code>，但个人希望在可以应用 Spring 默认创建的 <code>ObjectMapper</code> 属性的同时，将 <code>SerialClobSerializer</code> 注册进去，所以采用下面的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JacksonConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectMapper objectMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customSerializerSupport</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        objectMapper.registerModule(<span class=\"keyword\">new</span> SimpleModule().addSerializer(SerialClob.class, <span class=\"keyword\">new</span> SerialClobSerializer()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到此，问题就得到了解决，调用接口后不再报错，且可以返回正确的结果。</p>\n",
            "tags": [
                "Java",
                "Jackson"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2022/01/05/keycloak-custom-idp/",
            "url": "https://blog.timerever.tk/2022/01/05/keycloak-custom-idp/",
            "title": "Keycloak 配置自定义社交帐号登录组件",
            "date_published": "2022-01-05T07:00:00.000Z",
            "content_html": "<p>由于 Keycloak 由红帽开发维护，所以其自带的 Social Identity Providers 都是国外的平台。现有需求对接公司 SSO，且由于国内 OAuth2 协议实现均不标准（公司的也是），所以无法使用 Keycloak 的 OpenID Connect 自定义接入，需要自己扩展 Identity Provider 实现。和国内的微信、钉钉、飞书等系统接入代码类似，但发现现有的接入组件没有实现 <code>UserAttributeMapper</code>，且版本变动，代码并不兼容，所以参考 Github 的实现进行开发。</p>\n<blockquote>\n<p>Keycloak 使用当前最新版：16.1.0</p>\n</blockquote>\n<h2 id=\"一、自定义-IdentityProvider\"><a href=\"#一、自定义-IdentityProvider\" class=\"headerlink\" title=\"一、自定义 IdentityProvider\"></a>一、自定义 IdentityProvider</h2><h3 id=\"0-引入依赖\"><a href=\"#0-引入依赖\" class=\"headerlink\" title=\"0. 引入依赖\"></a>0. 引入依赖</h3><p>引入 Keycloak 相关依赖，依赖版本要与使用的 Keycloak 版本保持一致，scope 使用 <code>provided</code> 即可。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.keycloak<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>keycloak-services<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;keycloak.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.keycloak<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>keycloak-server-spi<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;keycloak.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.keycloak<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>keycloak-server-spi-private<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;keycloak.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"0-5-自定义-IdentityProvider\"><a href=\"#0-5-自定义-IdentityProvider\" class=\"headerlink\" title=\"0.5. 自定义 IdentityProvider\"></a>0.5. 自定义 IdentityProvider</h3><p>由于后续需要，我们先新建一个 IdentityProvider 放在这里。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyIdentityProvider</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractOAuth2IdentityProvider</span>&lt;<span class=\"title\">OAuth2IdentityProviderConfig</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">implements</span> <span class=\"title\">SocialIdentityProvider</span>&lt;<span class=\"title\">OAuth2IdentityProviderConfig</span>&gt; </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyIdentityProvider</span><span class=\"params\">(KeycloakSession session, OAuth2IdentityProviderConfig config)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(session, config);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getDefaultScopes</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-自定义-IdentityProviderFactory\"><a href=\"#1-自定义-IdentityProviderFactory\" class=\"headerlink\" title=\"1. 自定义 IdentityProviderFactory\"></a>1. 自定义 IdentityProviderFactory</h3><p>我们先来看一下 GitHub 的 <code>GitHubIdentityProviderFactory</code>，很简单，有一个唯一的 <code>PROVIDER_ID</code>，然后 <code>getName</code> 方法返回了一个名称用于展示。</p>\n<img src=\"/2022/01/05/keycloak-custom-idp/keycloak-custom-idp-1.png\" class=\"\" title=\"Github IdentityProviderFactory\">\n\n<p>我们照着改一下即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyIdentityProviderFactoryFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractIdentityProviderFactory</span>&lt;<span class=\"title\">MyIdentityProvider</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">SocialIdentityProviderFactory</span>&lt;<span class=\"title\">MyIdentityProvider</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PROVIDER_ID = <span class=\"string\">&quot;my-idp&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;My IDP&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> MyIdentityProvider <span class=\"title\">create</span><span class=\"params\">(KeycloakSession session, IdentityProviderModel model)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyIdentityProvider(session, <span class=\"keyword\">new</span> OAuth2IdentityProviderConfig(model));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IdentityProviderModel <span class=\"title\">createConfig</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> OAuth2IdentityProviderConfig();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> PROVIDER_ID;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-自定义-IdentityProvider\"><a href=\"#2-自定义-IdentityProvider\" class=\"headerlink\" title=\"2. 自定义 IdentityProvider\"></a>2. 自定义 IdentityProvider</h3><h4 id=\"先定义并在构造时传入-Authorize、Token-及-Profile-的-Url。\"><a href=\"#先定义并在构造时传入-Authorize、Token-及-Profile-的-Url。\" class=\"headerlink\" title=\"先定义并在构造时传入 Authorize、Token 及 Profile 的 Url。\"></a>先定义并在构造时传入 Authorize、Token 及 Profile 的 Url。</h4><img src=\"/2022/01/05/keycloak-custom-idp/keycloak-custom-idp-2.png\" class=\"\" title=\"AUTH URL\">\n\n<h4 id=\"重写必须要求实现的抽象方法\"><a href=\"#重写必须要求实现的抽象方法\" class=\"headerlink\" title=\"重写必须要求实现的抽象方法\"></a>重写必须要求实现的抽象方法</h4><p>重写 <code>getDefaultScopes</code> 的抽象方法，返回自定义 SCOPE。</p>\n<h4 id=\"按需重写方法\"><a href=\"#按需重写方法\" class=\"headerlink\" title=\"按需重写方法\"></a>按需重写方法</h4><p>首先重写 <code>supportsExternalExchange</code>方法，写死返回 <code>true</code>。这个官方文档也没有找到注释，但是各实现类均这么重写的，所以这里我们也一起重写。</p>\n<p>由于我们继承了 <code>AbstractOAuth2IdentityProvider</code>，剩下的可以直接看抽象类的实现，按需重写非标准定义下无法使用默认实现调用的方法。</p>\n<p>比如我需要对应自己系统返回的 <code>User</code> 和 Keycloak 的 <code>User</code> 对象的字段映射关系，所以重写 <code>extractIdentityFromProfile</code> 方法。这个方法也是默认空实现，一定要重写的。我们可以直接拷贝 GitHub 的实现再进行修改，同时，如果我们需要额外存储用户信息，可以使用 <code>setUserAttribute</code> 方法进行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> BrokeredIdentityContext <span class=\"title\">extractIdentityFromProfile</span><span class=\"params\">(EventBuilder event, JsonNode profile)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    BrokeredIdentityContext user = <span class=\"keyword\">new</span> BrokeredIdentityContext(getJsonProperty(profile, <span class=\"string\">&quot;id&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    String username = getJsonProperty(profile, <span class=\"string\">&quot;login&quot;</span>);</span><br><span class=\"line\">    user.setUsername(username);</span><br><span class=\"line\">    user.setName(getJsonProperty(profile, <span class=\"string\">&quot;name&quot;</span>));</span><br><span class=\"line\">    user.setEmail(getJsonProperty(profile, <span class=\"string\">&quot;email&quot;</span>));</span><br><span class=\"line\">    user.setIdpConfig(getConfig());</span><br><span class=\"line\">    user.setIdp(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    user.setUserAttribute(USER_ATTRIBUTE_EMPLOY_ID, getJsonProperty(profile, USER_ATTRIBUTE_EMPLOY_ID));</span><br><span class=\"line\"></span><br><span class=\"line\">    AbstractJsonUserAttributeMapper.storeUserProfileForMapper(user, profile, getConfig().getAlias());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-重写回调方法\"><a href=\"#3-重写回调方法\" class=\"headerlink\" title=\"3. 重写回调方法\"></a>3. 重写回调方法</h3><p>可以发现，我们之前重写的方法，都是接受到回调之后获取 token、获取用户信息的逻辑，如果我们的回调接口传参也不是标准实现的话，那么我们可以重写回调方法。</p>\n<h4 id=\"自定义-Endpoint\"><a href=\"#自定义-Endpoint\" class=\"headerlink\" title=\"自定义 Endpoint\"></a>自定义 Endpoint</h4><p>编写自定义 Endpoint 类，继承 <code>AbstractOAuth2IdentityProvider</code> 内部 <code>Endpoint</code> 类。然后重写 <code>authResponse</code> 方法，自定义接收参数，然后仿照默认实现，通过 <code>authorizationCode</code> 换取用户信息并通过 <code>callback.authenticated(federatedIdentity)</code> 返回。</p>\n<h4 id=\"注册自定义-Endpoint\"><a href=\"#注册自定义-Endpoint\" class=\"headerlink\" title=\"注册自定义 Endpoint\"></a>注册自定义 Endpoint</h4><p>重写 <code>AbstractOAuth2IdentityProvider</code> 的 <code>callback</code> 方法，返回自定义 Endpoint。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">callback</span><span class=\"params\">(RealmModel realm, AuthenticationCallback callback, EventBuilder event)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyEndpoint(callback, realm, event);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-注册-IdentityProviderFactory\"><a href=\"#4-注册-IdentityProviderFactory\" class=\"headerlink\" title=\"4. 注册 IdentityProviderFactory\"></a>4. 注册 IdentityProviderFactory</h3><p>在 <code>resources</code> 文件夹下，新建 <code>MEAT-INF</code> 文件夹，并在其下面建立 <code>services</code> 文件。新增 <code>org.keycloak.broker.social.SocialIdentityProviderFactory</code> 文件，在里面直接填写 <code>MyIdentityProviderFactory</code> 的全限定类名即可。</p>\n<img src=\"/2022/01/05/keycloak-custom-idp/keycloak-custom-idp-3.png\" class=\"\" title=\"注册 IdentityProviderFactory\">\n\n<hr>\n<p>大体流程就是这样，OAuth2 认证后回调默认的 <code>EndPoint</code> 类的 <code>authResponse</code> 方法。如果大体流程标准，且回调参数标准，可以直接参照默认实现，按需重写所调用的 <code>IdentityProvider</code> 方法；如果回调参数会流程不标准，则需要自定义 EndPoint 并进行注册，再重写 <code>authResponse</code> 方法。</p>\n<h2 id=\"二、自定义-IdentityProvider-配置页\"><a href=\"#二、自定义-IdentityProvider-配置页\" class=\"headerlink\" title=\"二、自定义 IdentityProvider 配置页\"></a>二、自定义 IdentityProvider 配置页</h2><blockquote>\n<p>在新建&#x2F;编辑 IdentityProvider 时，页面元素是可以配置的，我们可以按需增减页面需要填写的字段。</p>\n</blockquote>\n<p>首先打开 Keycloak 路径下的 <code>themes\\base\\admin\\resources\\partials\\</code> 文件夹，我们还是将 <code>realm-identity-provider-github.html</code> 及 <code>realm-identity-provider-github-ext.html</code> 复制并重命名为 <code>realm-identity-provider-my-idp.html</code> 及 <code>realm-identity-provider-my-idp-ext.html</code>。如果不需要自定义，那么保持原样即可。如果需要修改页面字段展示，打开 <code>realm-identity-provider-my-idp.html</code> 文件，将文件内容替换为 <code>realm-identity-provider-social.html</code> 文件的内容，然后再对其进行修改即可。我们可以看到，默认页面就是引用了这个文件的内容。</p>\n<h2 id=\"三、部署-jar-文件\"><a href=\"#三、部署-jar-文件\" class=\"headerlink\" title=\"三、部署 jar 文件\"></a>三、部署 jar 文件</h2><p><strong>以 standalone 模式为例：</strong></p>\n<p>将打包后的 jar 文件复制到 <code>standalone\\deployments\\</code> 文件夹，不需要重启服务，Keycloak 会自动热部署，并在同级目录生成 <code>文件名.deployed</code> 文件。</p>\n<p>如果后续调用时出现 问题，可以参考 <a href=\"https://stackoverflow.com/questions/57778240/noclassdeffounderror-in-a-provider-jar-when-using-a-class-from-org-keycloak-auth\">NoClassDefFoundError in a provider jar</a> 在 <code>maven-jar-plugin</code> 插件配置依赖即可。</p>\n<h2 id=\"四、使用自定义-IDP\"><a href=\"#四、使用自定义-IDP\" class=\"headerlink\" title=\"四、使用自定义 IDP\"></a>四、使用自定义 IDP</h2><p>回到 Keycloak 后台，右上角点击 <code>Server Info</code>，切到 <code>Providers</code> Tab，如果在 <code>social</code> 栏看到了 <code>my-idp</code>（即上面定义的 provider id），说明部署成功，在 Identity Providers 后台正常新增即可。</p>\n<img src=\"/2022/01/05/keycloak-custom-idp/keycloak-custom-idp-4.png\" class=\"\" title=\"展示出了 my-idp\">\n\n<h2 id=\"五、自定义-UserAttributeMapper\"><a href=\"#五、自定义-UserAttributeMapper\" class=\"headerlink\" title=\"五、自定义 UserAttributeMapper\"></a>五、自定义 UserAttributeMapper</h2><p>由于之前我们需要额外储存用户信息，所以在重写 <code>extractIdentityFromProfile</code> 方法时，使用了 <code>setUserAttribute</code> 方法设置自定义属性。但由于 Keycloak 是冗余的用户数据，我们希望用户每次登录后，都可以自动更新用户信息。我们当然可以在 IDP 的配置中设置 <code>Sync Mode</code> 为 <code>force</code> 来每次更新用户信息，但此时只会自动同步更新 User 中 Details Tab 下的基本信息，不会再次同步 Attributes。<br>正常我们就会想到，可以通过设置 IDP 的 Mappers 来进行属性的放置，结果就会发现，<code>Mapper Type</code> 只有三个 Hardcoded 开头的硬编码的 Mapper。所以为了能够重新使用 <code>Attribute Importer</code>，需要我们自定义一个 <code>UserAttributeMapper</code>。</p>\n<h3 id=\"1-自定义-UserAttributeMapper\"><a href=\"#1-自定义-UserAttributeMapper\" class=\"headerlink\" title=\"1. 自定义 UserAttributeMapper\"></a>1. 自定义 UserAttributeMapper</h3><p>仍然参考 GitHub 的 <code>GitHubUserAttributeMapper</code>，直接拷贝过来，将 <code>PROVIDER_ID</code> 改成自己的即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUserAttributeMapper</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractJsonUserAttributeMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PROVIDER_ID = <span class=\"string\">&quot;my-idp-user-attribute-mapper&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String[] cp = <span class=\"keyword\">new</span> String[] &#123; MyIdentityProviderFactory.PROVIDER_ID &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String[] getCompatibleProviders() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> cp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> PROVIDER_ID;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这我们也可以看到，Keycloak 是通过 <code>AbstractJsonUserAttributeMapper</code> 的 <code>getCompatibleProviders</code> 方法来控制 IDP 可选哪些 Mapper 的。</p>\n<h3 id=\"2-注册自定义-UserAttributeMapper\"><a href=\"#2-注册自定义-UserAttributeMapper\" class=\"headerlink\" title=\"2. 注册自定义 UserAttributeMapper\"></a>2. 注册自定义 UserAttributeMapper</h3><p>同之前注册 <code>IdentityProvider</code>，在 <code>META-INF/service/</code> 下新建 <code>org.keycloak.broker.provider.IdentityProviderMapper</code> 文件，并在其中填写我们自定义的 UserAttributeMapper 的全限定类名。<br>最后，别忘了重新打包部署，我们就可以继续在自定义的 IDP 中使用 <code>Attribute Importer</code> 了。</p>\n",
            "tags": [
                "Java",
                "Keycloak",
                "OAuth2",
                "SSO"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2021/12/02/hibernate-incorrect-metamodel-with-no-reationship/",
            "url": "https://blog.timerever.tk/2021/12/02/hibernate-incorrect-metamodel-with-no-reationship/",
            "title": "Hibernate 解决 Metamodel 属性类型错误问题",
            "date_published": "2021-12-02T03:41:48.000Z",
            "content_html": "<p>因为项目上使用了 Hibernate Metamodel，而且自定义映射了数据库的 JSON 字段类型，导致生成的 Metamodel 属性类型有误。虽然并没有用映射的这些属性做 <code>CriteriaQuery</code>，所以其实在项目的使用上没有影响，但是启动时还是会报一个 ERROR 日志，所以寻找一个能够根治的解决办法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR org.hibernate.metamodel.internal.MetadataContext [MetadataContext.java:491] - HHH015007: Illegal argument on static metamodel field injection : Foo_#bars; expected type : org.hibernate.metamodel.model.domain.internal.SingularAttributeImpl; encountered type : javax.persistence.metamodel.MapAttribute</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h3 id=\"一、定位问题\"><a href=\"#一、定位问题\" class=\"headerlink\" title=\"一、定位问题\"></a>一、定位问题</h3><p><strong>首先是背景信息：</strong> 因为前端需要在数据库存储 JSON 字段，而且现在版本的 MySQL 天然支持 JSON ，所以建表时采用了 JSON 作为字段类型。然后在 JPA 实体层面，引入了 <code>hibernate-types</code> 依赖来增加 Hibernate 对 JSON 的支持，字段属性增加了 <code>@Type(type = &quot;json&quot;)</code> 注解，本身定义为了 <code>Map</code> 类型。</p>\n<p>其实在 Hibernate 对 JSON 处理这件事情上，传统方案是通过自定义 <code>Convert</code> 来实现。或者可能不是 JSON Object 而是 JSON Array，但无论是哪种情况，均会遇到同样的问题。</p>\n<p>通过报错信息，对代码进行 DEBUG 后得知，Hibernate 在启动时，会根据实体属性是否存在与其他实体的关系，生成不同的 <code>Attribute</code>。比如 OneToMany 一对多关系就会生成 <code>ListAttribute</code> 或 <code>SetAttribute</code>，没有关系的属性都是 <code>SingularAttribute</code>。而启动时通过反射，会 set Metamodel 的对应属性，我们可以在 target 下面看见，Metamodel 的类型为 <code>MapAttribute</code>，所以我们可以确定，问题就出在了生成 Metamodel 的时候。具体是不是直接拿实体定义的数据类型来生成的我没有去看源码，不过可以肯定的是它在判断类型的时候缺少额外的判断。</p>\n<h3 id=\"二、解决问题\"><a href=\"#二、解决问题\" class=\"headerlink\" title=\"二、解决问题\"></a>二、解决问题</h3><p>同样作为一个共性问题，在 Goolge 进行搜索后，定位到了一条仍然是 Hibernate 官方 Bug 追踪的链接 <a href=\"https://hibernate.atlassian.net/browse/HHH-12338\">Incorrect metamodel for basic collections</a>。简单的来说，就是当前已经在 5.5.0.Alpha1 的版本中得到了解决，不过如果你认真看了下面整个的 Activity 记录，就会发现仍然是存在一个小插曲。</p>\n<h3 id=\"三、插曲\"><a href=\"#三、插曲\" class=\"headerlink\" title=\"三、插曲\"></a>三、插曲</h3><p>这个问题是在 2018 年的 3 月份被提出来的，而 5.5.0.Alpha1 已经是 2021 年 8 月份的事情了，照理说这么一个小问题不会需要三年多的时间来处理，而这个疑问的答案就在下面的讨论之中。</p>\n<p>简单来说，这个问题在当月就被解决掉了，伴随着 5.2.17 的版本发布，这个问题理论上来说就不应该再存在了。然而事与愿违，在 5.2.17 版本发布之后，很快就有人提出了新的问题。在下面的 Comment 中有记录，同时这个人也单独提了一个 issue <a href=\"https://hibernate.atlassian.net/browse/HHH-12581\">NPE for Criteria query containing fetch join as a regression of HHH-12338</a>，即这次的改动造成了 NPE。然后可以看到在另一个维护者与之前 Vlad Mihalcea 的一番讨论之后，他们决定恢复这次的改动。</p>\n<img src=\"/2021/12/02/hibernate-incorrect-metamodel-with-no-reationship/hibernate-incorrect-metamodel-with-no-reationship-1.png\" class=\"\" title=\"revert commit\">\n\n<p>但是回退了就意味着问题又回来了，上面提到的 Vlad Mihalcea 从红帽离职，不再维护 Hibernate 还弄了一个新的项目就是上面提到的 <code>hibernate-types</code>。所以其他人在遇到相同的问题时，有部分和我们一样是采用的 <code>hibernate-types</code> 方案，自然而然有人把问题又丢给了 Vlad Mihalcea，不过是在 <code>hibernate-types</code> 项目。</p>\n<p>于是 Vlad Mihalcea 在 Github 提了新的 PR，见 <a href=\"https://github.com/hibernate/hibernate-orm/pull/3254\">HHH-12338 - Incorrect metamodel for basic collections</a>。不过很不幸的是，并没有后续。</p>\n<p>直到今年的 7 月，又一位开发者忍无可忍决定解决这个问题，提了新的 PR 出来，见 <a href=\"https://github.com/hibernate/hibernate-orm/pull/4096\">HHH-14724 Test-case for metamodel compile error with converters and validation</a>。这次终于引起了重视，并在一番努力之后，终于得到了合并，问题就此解决。</p>\n<p>题外话，这件事情，是不是跟前阵子遇到的 <a href=\"/2021/11/26/hibernate-automatic-2nd-collection-cache-eviction/\">Hibernate 配置自动清除二级缓存之集合缓存</a> 里面的插曲有点像？笑。</p>\n<h3 id=\"四、亲力亲为\"><a href=\"#四、亲力亲为\" class=\"headerlink\" title=\"四、亲力亲为\"></a>四、亲力亲为</h3><p>虽说这件事情现在看来终于告一段落了，不过由于时今年 9 月份才最终解决，虽然代码已经被合并到了各个版本的分支中，但 5.4 已经半年没有发过新的版本了。虽说 5.5 和 5.6 的版本已经没问题了，但由于项目框架的问题，并不能直接升级 Hibernate 的版本，而且本来 5.5 的版本就存在很大改动，现有架构并不能保证完全兼容（比如还是上面提到的 <code>hibernate-types</code> 就需要引入另外一个包），所以最后没有办法，只能决定采用重打包的方式自己对源码进行更新。</p>\n<p>剩下的事情就不再赘述了，大概流程就是下载 Hibernate 源码，找到 5.4.32.Final 的 tag，在此基础上手动把修复代码的变更拷贝过来，然后改个版本号，发布到私仓，再更改当前项目依赖的版本号，最后成功解决。</p>\n",
            "tags": [
                "Java",
                "Hibernate"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2021/11/26/hibernate-automatic-2nd-collection-cache-eviction/",
            "url": "https://blog.timerever.tk/2021/11/26/hibernate-automatic-2nd-collection-cache-eviction/",
            "title": "Hibernate 配置自动清除二级缓存之集合缓存",
            "date_published": "2021-11-26T07:21:10.000Z",
            "content_html": "<p>之前在项目上使用了 Hibernate，并开启了基于 caffeine 的二级缓存。因为 Hibernate 会自动处理缓存，所以一直没怎么关注。直到最近，发现在一种特定的情况下，Hibernate 不会自动清除二级缓存里面的集合缓存。问题最后解决起来其实很简单，增加一个配置项的事。不过问题寻求解决的过程还是蛮繁琐的，并没有人能够直接告诉这个问题的答案，在此记录一下这个问题的排查过程。</p>\n<blockquote>\n<p>太长不看版：Spring Boot 中设置属性 spring.jpa.properties.auto_evict_collection_cache&#x3D;true 即可解决。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h3 id=\"一、问题出现\"><a href=\"#一、问题出现\" class=\"headerlink\" title=\"一、问题出现\"></a>一、问题出现</h3><p>假定我这里有两个实体，分别为 <code>Parent</code> 和 <code>Child</code>。然后 Parent 与 Child 之间存在一对多的对应关系，即在 Parent 的实体中，存在一个属性 <code>private Set&lt;Child&gt; children</code>，然后我们开启二级缓存 <code>@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)</code>。在这种情况下，我们先访问 Parent 实体并获取其中的 <code>children</code> 属性，确保其已被缓存。然后我们再单独操作 Child，我们新建一个 Child 对象 <code>Child child = new Child()</code> 并设置其 Parent 的值 <code>child.setParent(parent)</code> 并保存 Child 实体 <code>ChildRepository.save(child)</code>。然后我们回过来获取 Parent，会发现 Parent 的 <code>children</code> 的值仍为原数组对象， 没有我们新增的 <code>child</code> 对象。</p>\n<p>通过在 Google 上进行搜索，发现 stackoverflow 上存在几个类似的问题，再进一步的搜索后，发现在 Hibernate 官方 Bug 追踪网站上有人归纳并提出了这个问题 <a href=\"https://hibernate.atlassian.net/browse/HHH-4910\">automatic L2 collection cache eviction when an element is added&#x2F;updated&#x2F;removed</a>，可以看到不只是自己遇到的新增，修改&#x2F;删除也会有类似的问题。</p>\n<h3 id=\"二、问题解决\"><a href=\"#二、问题解决\" class=\"headerlink\" title=\"二、问题解决\"></a>二、问题解决</h3><p>在上面链接的内容下方，问题提出者给出了一种 workaround 的方案，提供 <code>@PostPersist</code>、<code>@PostRemove</code> 及 <code>@PreUpdate</code> 的监听，并在监听中自动清理缓存。以及在之前查阅 stackoverflow 时，也有人认为，你需要在操作多方元素的时候，同时操作一方对应的集合，对其进行 add&#x2F;remove 操作。</p>\n<p>但不管怎么说，这些都是一些 workaround 方案，因为 Hibernate 本身是有能力自动处理这些事情的。话又说回来，既然问题很早就被提出了，比如这个链接中使用的版本是 <code>3.3.1</code>，同时官方也已经记录了这个问题已经在 <code>4.3.0.Beta5</code> 中被修复了，可是为什么我们还是会遇到这个问题？这个答案其实在下面的评论中。</p>\n<img src=\"/2021/11/26/hibernate-automatic-2nd-collection-cache-eviction/hibernate-automatic-2nd-collection-cache-eviction-1.png\" class=\"\" title=\"Hibernate atlassian 下面的评论\">\n\n<p>点进链接是 GitHub 的 PR 请求，讨论中详细地记录了从贡献者提出 PR 到最后并合并的整个流程。看下来大概就是，贡献者向负责人解释了为了提出这个改动、有负责人担心是不是会影响性能并期望做成可配置的、贡献者支持了配置项、PR 最终被合并。所以问题已经很明了了，功能上是已经被修复了，但是因为做成了配置项，所以默认没有启用，我们需要手动启用这个特性。</p>\n<img src=\"/2021/11/26/hibernate-automatic-2nd-collection-cache-eviction/hibernate-automatic-2nd-collection-cache-eviction-2.png\" class=\"\" title=\"变成配置项的 commit\">\n\n<p>所以我们从这里点进去，去看一下我们怎么才能打开这个特性。最后我们可以看到是在 <code>hibernate-core/src/main/java/org/hibernate/cfg/AvailableSettings.java</code> 这个文件中定义了配置的名字。</p>\n<img src=\"/2021/11/26/hibernate-automatic-2nd-collection-cache-eviction/hibernate-automatic-2nd-collection-cache-eviction-3.png\" class=\"\" title=\"配置项的名字\">\n\n<p>所以到这里，这个问题就算是最终解决了。</p>\n<h3 id=\"三、插曲\"><a href=\"#三、插曲\" class=\"headerlink\" title=\"三、插曲\"></a>三、插曲</h3><p>由于项目使用了 <code>spring-boot-starter-data-jpa</code> 依赖，所以这个配置项的设置并不是上面 Hibernate 的改动所提及的，于是继续在 Google 用 <code>auto_evict_collection_cache</code> 作为关键字进行搜索，寻找在 Spring Boot 中的配置方式。最终是得到了答案，Spring Boot 中的配置项为 <code>spring.jpa.properties.auto_evict_collection_cache</code>，不过在此之外还发现了一个小插曲。</p>\n<p><a href=\"https://hibernate.atlassian.net/browse/HHH-10614\">Auto evict collection cache throws exception with null values</a> 中描述了一个人开启了这个特性，然后在一个特定的情况下 Hibernate 会抛出异常。虽然这个问题很快就被解决了，不过现在回来想想，维护者在维护这种已经已经很庞大的项目时，对所有的改动都抱有谨慎的态度还是很有必要的。做成了配置项，虽然一方面会让很多不知道的人继续遇到这个问题，但同时也让很多无关的人避免了可能带来的新问题。所以这两种方案孰优孰劣，可能就见仁见智了吧。</p>\n",
            "tags": [
                "Java",
                "Hibernate"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/04/29/factory-patterns-with-java/",
            "url": "https://blog.timerever.tk/2017/04/29/factory-patterns-with-java/",
            "title": "设计模式之工厂模式的 Java 实现",
            "date_published": "2017-04-29T08:14:03.000Z",
            "content_html": "<p><strong>工厂模式</strong> 属于设计模式中创建型数据模式的一种，同时是软件设计模式中最常使用的模式。广义的工厂模式只是一个统称，其还可以继续分为 <strong>简单工厂模式</strong>、<strong>工厂模式</strong> 和 <strong>抽象工厂模式</strong>。这里对这些工厂模式进行说明并使用 Java 代码进行实现。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"通常状态下的对象创建\"><a href=\"#通常状态下的对象创建\" class=\"headerlink\" title=\"通常状态下的对象创建\"></a>通常状态下的对象创建</h2><p>在不使用任何模式的时候，我们通常是需要什么对象，就直接创建什么对象，如下所示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Bicycle.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bicycle</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Bicycle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Motorbike.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Motorbike</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Motorbike</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Main.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Bicycle bicycle = <span class=\"keyword\">new</span> Bicycle();</span><br><span class=\"line\">        Motorbike motorbike = <span class=\"keyword\">new</span> Motorbike();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<pre><code>Bicycle\nMotorbike\n</code></pre>\n<p>这很符合面向对象的思想，通过使用 <code>new</code> 操作符去构造对象实例，但是如果我们需要在实例化时做点初始化的工作呢？我们可以去使用构造方法，但是假如要做的事情很多，代码很长呢？或是我们在创建需要的对象之前必须先生成一些辅助功能的对象，我们就可以使用工厂模式来生成对象，而不用去关心构造对象实例的细节和其复杂的过程。</p>\n<h2 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p><strong>简单工厂模式 (Simple Factory Pattern)</strong> 又称为静态工厂方法 (Static Factory Method) 模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p>\n<h3 id=\"适用环境\"><a href=\"#适用环境\" class=\"headerlink\" title=\"适用环境\"></a>适用环境</h3><p>在以下情况下可以使用简单工厂模式：</p>\n<ul>\n<li>工厂类负责创建的对象比较少；由于创建的对象较少，不会造成工厂方法中的业务逻辑太过复杂。</li>\n<li>客户端只知道传入工厂类的参数，对于如何创建对象不关心；客户端既不需要关心创建细节，甚至连类名都不需要记住，只需要知道类型所对应的参数。</li>\n</ul>\n<h3 id=\"模式结构\"><a href=\"#模式结构\" class=\"headerlink\" title=\"模式结构\"></a>模式结构</h3><img src=\"/2017/04/29/factory-patterns-with-java/factory-patterns-with-java-1.png\" class=\"\" title=\"简单工厂模式模式结构\">\n\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><img src=\"/2017/04/29/factory-patterns-with-java/factory-patterns-with-java-2.png\" class=\"\" title=\"简单工厂模式举例\">\n\n<p>假如这里有一个农场充当工厂类，通过告知农场所需要的水果类型返回所需的水果，即通过传入不同的参数获取不同的对象。</p>\n<p>对象类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Fruit.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Apple.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Apple</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Banana.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Banana</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Banana</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Orange.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Orange</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Orange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>工厂类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* FarmFactory.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FarmFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Fruit <span class=\"title\">get</span><span class=\"params\">(String variety)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (variety) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;apple&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Apple();</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;banana&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Banana();</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;orange&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Orange();</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Main.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        FarmFactory farmFactory = <span class=\"keyword\">new</span> FarmFactory();</span><br><span class=\"line\">        Fruit apple = farmFactory.get(<span class=\"string\">&quot;apple&quot;</span>);</span><br><span class=\"line\">        Fruit banana = farmFactory.get(<span class=\"string\">&quot;banana&quot;</span>);</span><br><span class=\"line\">        Fruit orange = farmFactory.get(<span class=\"string\">&quot;orange&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<pre><code>Apple\nBanana\nOrange\n</code></pre>\n<h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><h3 id=\"模式动机\"><a href=\"#模式动机\" class=\"headerlink\" title=\"模式动机\"></a>模式动机</h3><p>接上面的例子，假如现在农场新种植了一种水果，那么为了完成工厂类的任务，就需要去修改工厂类的代码添加内部逻辑，这显然是违背开闭原则的。</p>\n<p>所谓开闭原则，就是对扩展开放，对修改关闭。“开”是指对于组件功能的扩展是开放的，是允许对其进行功能扩展的，“闭”是对原有代码的修改是封闭的，即修改原有的代码对外部的使用是透明的。即对模块行为进行扩展时，不必改动模块的源代码或者二进制代码，所以就出现了工厂模式。</p>\n<p>参见：<a href=\"http://baike.baidu.com/item/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99\">http://baike.baidu.com/item/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99</a></p>\n<p>现假如有一个生产各种按钮的工厂，通过对该系统进行修改，不再设计一个按钮工厂类来统一负责所有产品的创建，而是将具体按钮的创建过程交给专门的工厂子类去完成，我们先定义一个抽象的按钮工厂类，再定义具体的工厂类来生成圆形按钮、矩形按钮、菱形按钮等，它们实现在在抽象按钮工厂中定义的方法。这种抽象化的结果使这种结构可以在不修改具体工厂类的情况下引进新的产品，如果出现新的按钮类型，只需要为这种新类型的按钮创建一个具体的工厂类就可以获得该新按钮的实例，这一特点无疑使得工厂方法模式具有超越简单工厂模式的优越性，更加符合“开闭原则”。</p>\n<img src=\"/2017/04/29/factory-patterns-with-java/factory-patterns-with-java-3.png\" class=\"\" title=\"简单工厂模式\"> <img src=\"/2017/04/29/factory-patterns-with-java/factory-patterns-with-java-4.png\" class=\"\" title=\"工厂模式\">\n\n<h3 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p><strong>工厂方法模式 (Factory Method Pattern)</strong> 又称为工厂模式，也叫虚拟构造器 (Virtual Constructor) 模式或者多态工厂 (Polymorphic Factory) 模式，它属于类创建型模式。在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪—个具体产品类。</p>\n<h3 id=\"模式结构-1\"><a href=\"#模式结构-1\" class=\"headerlink\" title=\"模式结构\"></a>模式结构</h3><img src=\"/2017/04/29/factory-patterns-with-java/factory-patterns-with-java-5.png\" class=\"\" title=\"工厂模式模式结构\">\n\n<h3 id=\"举例-1\"><a href=\"#举例-1\" class=\"headerlink\" title=\"举例\"></a>举例</h3><p>对上面的按钮工厂的工厂模式实现。</p>\n<p>对象类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Button.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Button</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CircleButton.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">Button</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleButton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* DiamondButton.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DiamondButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">Button</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DiamondButton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* RectangleButton.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RectangleButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">Button</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RectangleButton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>工厂类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* FarmFactory.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ButtonFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Button <span class=\"title\">create</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CircleButtonFactory.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleButtonFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">ButtonFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Button <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CircleButton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* DiamondButtonFactory.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DiamondButtonFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">ButtonFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Button <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DiamondButton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* RectangleButtonFactory.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RectangleButtonFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">ButtonFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Button <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RectangleButton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Main.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ButtonFactory buttonFactory = <span class=\"keyword\">new</span> CircleButtonFactory();</span><br><span class=\"line\">        Button button = buttonFactory.create();</span><br><span class=\"line\">        buttonFactory = <span class=\"keyword\">new</span> DiamondButtonFactory();</span><br><span class=\"line\">        button = buttonFactory.create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<pre><code>CircleButton\nDiamondButton\n</code></pre>\n<h2 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h2><h3 id=\"模式动机-1\"><a href=\"#模式动机-1\" class=\"headerlink\" title=\"模式动机\"></a>模式动机</h3><p>在工厂方法模式中具体工厂负责生产具体的产品，每一个具体工厂对应一种具体产品，工厂方法也具有唯一性，一般情况下，一个具体工厂中只有一个工厂方法或者一组重栽的工厂方法。但是有时候我们需要一个工厂可以提供多个产品对象，而不是单一的产品对象。</p>\n<p>为了更清晰地理解工厂方法糢式，需要先引入两个概念：</p>\n<ul>\n<li>产品等级结构：产品等级结构即产品的继承结构，如一个抽象类是电视机，其子类有海尔电视机、海信电视机、TCL电视机，则抽象电视机与具体品牌的电视机之间构成了—个产品等级结构，抽象电视机是父类，而具体品牌的电视机是其子类。</li>\n<li>产品族：在抽象工厂模式中，产品族是指由同一个工厂生产的，位于不同产品等级结构中的一组产品，如海尔电器工厂生产的海尔电视机、海尔电冰箱，海尔电视机位于电视机产品等级结构中，海尔电冰箱位于电冰箱产品等级结构中。</li>\n</ul>\n<h3 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p><strong>抽象工厂模式 (Abstract Factory Pattern)</strong> 提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为 Kit 模式，属于对象创建型模式。</p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><ul>\n<li>当系统所提供的工厂生产的具体产品并不是一个简单的对象，而是多个位于不同产品等级结构、属于不同类型的具体产品时就可以使用抽象工厂模式。</li>\n<li>抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形式。</li>\n</ul>\n<img src=\"/2017/04/29/factory-patterns-with-java/factory-patterns-with-java-6.png\" class=\"\" title=\"抽象工厂模式应用场景\">\n\n<h3 id=\"模式适用环境\"><a href=\"#模式适用环境\" class=\"headerlink\" title=\"模式适用环境\"></a>模式适用环境</h3><ul>\n<li>一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节。</li>\n<li>系统中有多于一个的产品族，但每次只使用其中某一产品族。</li>\n<li>属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。</li>\n<li>产品等级结构稳定，设计完成之后，不会向系统中增加新的产品等级结构或者删除已有的产品等级结构。</li>\n</ul>\n<h3 id=\"模式结构-2\"><a href=\"#模式结构-2\" class=\"headerlink\" title=\"模式结构\"></a>模式结构</h3><img src=\"/2017/04/29/factory-patterns-with-java/factory-patterns-with-java-7.png\" class=\"\" title=\"抽象工厂模式模式结构\">\n\n<h3 id=\"举例-2\"><a href=\"#举例-2\" class=\"headerlink\" title=\"举例\"></a>举例</h3><p>某软件公司要开发一套界面皮肤库，可以对基于 .NET 平台的桌面软件进行界面美化。用户在使用时可以通过菜单来选择皮肤，不同的皮肤将提供视觉效果不同的按钮、文本框、组合框等界面元素，例如春天 (Spring) 风格的皮肤将提供浅绿色的按钮、绿色边框的文本框和绿色边框的组合框，而夏天 (Summer) 风格的皮肤则提供浅蓝色的按钮、蓝色边框的文本框和蓝色边框的组合框，其结构示意图如下图所示：</p>\n<img src=\"/2017/04/29/factory-patterns-with-java/factory-patterns-with-java-8.png\" class=\"\" title=\"抽象工厂模式举例\">\n\n<p>该皮肤库需要具备良好的灵活性和可扩展性，用户可以自由选择不同的皮肤，开发人员可以在不修改既有代码的基础上增加新的皮肤，现使用抽象工厂模式来设计该界面皮肤库。</p>\n<p>对象类：</p>\n<ul>\n<li>ComboBox</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* ComboBox.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComboBox</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* SummerComboBox.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SummerComboBox</span> <span class=\"keyword\">extends</span> <span class=\"title\">ComboBox</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SummerComboBox</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* SpringComboBox.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringComboBox</span> <span class=\"keyword\">extends</span> <span class=\"title\">ComboBox</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SpringComboBox</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Button</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Button.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Button</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* SummerButton.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SummerButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">Button</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SummerButton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* SpringButton.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">Button</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SpringButton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>TextField</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* TextField.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TextField</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* SummerTextField.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SummerTextField</span> <span class=\"keyword\">extends</span> <span class=\"title\">TextField</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SummerTextField</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* SpringTextField.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringTextField</span> <span class=\"keyword\">extends</span> <span class=\"title\">TextField</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SpringTextField</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>工厂类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* SkinFactory.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SkinFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> ComboBox <span class=\"title\">getComboBox</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Button <span class=\"title\">getButton</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> TextField <span class=\"title\">getTextField</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* SummerSkinFactory.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SummerSkinFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">SkinFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ComboBox <span class=\"title\">getComboBox</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SummerComboBox();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Button <span class=\"title\">getButton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SummerButton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TextField <span class=\"title\">getTextField</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SummerTextField();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* SpringSkinFactory.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringSkinFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">SkinFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ComboBox <span class=\"title\">getComboBox</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SpringComboBox();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Button <span class=\"title\">getButton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SpringButton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TextField <span class=\"title\">getTextField</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SpringTextField();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Main.java */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SkinFactory skinFactory = <span class=\"keyword\">new</span> SummerSkinFactory();</span><br><span class=\"line\">        ComboBox comboBox = skinFactory.getComboBox();</span><br><span class=\"line\">        Button button = skinFactory.getButton();</span><br><span class=\"line\">        TextField textField = skinFactory.getTextField();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<pre><code>SummerComboBox\nSummerButton\nSummerTextField\n</code></pre>\n",
            "tags": [
                "Java",
                "Design Pattern",
                "Factory Patterns"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/04/28/design-patterns/",
            "url": "https://blog.timerever.tk/2017/04/28/design-patterns/",
            "title": "软件设计模式",
            "date_published": "2017-04-28T05:59:36.000Z",
            "content_html": "<h1 id=\"模式和软件模式\"><a href=\"#模式和软件模式\" class=\"headerlink\" title=\"模式和软件模式\"></a>模式和软件模式</h1><blockquote>\n<p>A pattern is a solution to a problem in a context.</p>\n</blockquote>\n<p><strong>模式</strong> 起源于建筑学，每个模式都描述了一个在我们的环境中不断出现的问题，然后描述了该问题的解决方案的核心，通过这种方式我们可以无数次的重用那些已有的解决方案，无需再重复相同的工作。</p>\n<p><strong>软件模式 (Software Patterns)</strong> 是将模式的一般概念应用于软件开发领域，即软件开发的总体指导思路或参照样板。软件模式并非仅限于设计模式，它还包括架构模式、分析模式和过程模式等，实际上，在软件开发生命周期的每一个阶段都存在着一些被认同的模式。</p>\n<p>在这里主要讨论的是软件设计模式。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"软件架构模式与软件设计模式的比较\"><a href=\"#软件架构模式与软件设计模式的比较\" class=\"headerlink\" title=\"软件架构模式与软件设计模式的比较\"></a>软件架构模式与软件设计模式的比较</h2><p>简略的来说，架构模式是整体上的大智慧，而软件模式更侧重于小技巧。</p>\n<p>这里以 MVC 解决方案为例。</p>\n<h2 id=\"软件架构模式\"><a href=\"#软件架构模式\" class=\"headerlink\" title=\"软件架构模式\"></a>软件架构模式</h2><img src=\"/2017/04/28/design-patterns/design-patterns-1.png\" class=\"\" title=\"MVC软件架构模式\">\n\n<h2 id=\"软件设计模式\"><a href=\"#软件设计模式\" class=\"headerlink\" title=\"软件设计模式\"></a>软件设计模式</h2><img src=\"/2017/04/28/design-patterns/design-patterns-2.png\" class=\"\" title=\"MVC软件设计模式\">\n\n<p>所谓软件设计模式：</p>\n<ul>\n<li>在软件模式中，设计模式是研究最为深入的分支。</li>\n<li>设计模式用于在特定的条件下为一些重复出现的软件设计问题提供合理的、有效的解决方案。</li>\n<li>是系统地命名、解释和评价某一个重要的可重现的面向对象的设计方案。</li>\n<li>是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。</li>\n</ul>\n<p>软件设计模式包含几个基本要素：模式名称、问题、解决方案、后果。</p>\n<p>一个好的模式必须做到以下几点：</p>\n<ul>\n<li>解决一个问题：从模式可以得到解，而不仅仅是抽象的原则或策略。</li>\n<li>是一个被证明了的概念：模式通过—个记录得到解．而不是通过理论或推测。</li>\n<li>解并不是显然的：许多解决问题的方法（例如软件设计范例或方法）是从最基本的原理得到解；而最好的方法是以非直接的方式得到解，对大多数比较困难的设计问题来说，这是必要的。</li>\n<li>描述了一种关系：模式并不仅仅描述模块，它给出更深层的系统结构和机理。</li>\n<li>模式有重要的人为因素：所有的软件服务于人类的舒适或生活质量，而最好的模式追求它的实用性和美学。</li>\n</ul>\n<h3 id=\"软件设计模式分类\"><a href=\"#软件设计模式分类\" class=\"headerlink\" title=\"软件设计模式分类\"></a>软件设计模式分类</h3><p><strong>软件设计模式</strong> 按照不同的分类标准可以分为不同的类别，例如按 <strong>目的</strong> 可以分为 <strong>创建型</strong>、<strong>结构型</strong> 和 <strong>行为型</strong>，按 <strong>范围</strong> 可以分为 <strong>类</strong> 和 <strong>对象</strong>。</p>\n<img src=\"/2017/04/28/design-patterns/design-patterns-3.png\" class=\"\" title=\"软件设计模式分类\">\n\n<h4 id=\"创建型设计模式\"><a href=\"#创建型设计模式\" class=\"headerlink\" title=\"创建型设计模式\"></a>创建型设计模式</h4><p><strong>创建型模式 (Creational Pattern)</strong> 对类的实例化过程进行了抽象，能够将软件模块中对象的创建和对象的使用分离。为了使软件的结构更加清晰，外界对于这些对象只需要知道它们共同的接口，而不清楚其具体的实现细节，使整个系统的设计更加符合单一职责原则。</p>\n<p>创建型模式在创建什么 (What)，由谁创建 (Who)，何时创建 (When) 等方面都为软件设计者提供了尽可能大的灵活性。创建型模式隐藏了类的实例的创建细节，通过隐藏对象如何被创建和组合在一起达到使整个系统独立的目的。</p>\n<p>创建型设计模式包含：</p>\n<ul>\n<li>简单工厂模式</li>\n<li>工厂模式</li>\n<li>抽象工厂模式</li>\n<li>建造者模式</li>\n<li>原型模式</li>\n<li>单例模式</li>\n</ul>\n<h4 id=\"结构型设计模式\"><a href=\"#结构型设计模式\" class=\"headerlink\" title=\"结构型设计模式\"></a>结构型设计模式</h4><p><strong>结构型模式(Structural Pattern)</strong> 关注如何将现有类或对象组织在一起形成更加强大的结构，不同的结构型模式从不同的角度组合类或对象，它们在尽可能满足各种面向对象设计原则的同时为类或对象的组合提供一系列巧妙的解决方案。</p>\n<p>其中，类结构型模式关心类的组合，由多个类组合成一个更大的系统，在类结构型模式中一般只存在继承关系和实现关系；对象结构型模式关心类与对象的组合，通过关联关系，在一个类中定义另一个类的实例对象，然后通过该对象调用相应的方法。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">模式名称</th>\n<th align=\"left\">定义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">适配器模式<br>(Adapter Pattern)</td>\n<td align=\"left\">将一个类的接口转换成客户希望的另一个接口。适配器模式让那些接口不兼容的类可以一起工作。</td>\n</tr>\n<tr>\n<td align=\"left\">桥接模式<br>(Bridge Pattern)</td>\n<td align=\"left\">将抽象部分与它的实现部分解耦，使得两者都能够独立变化。</td>\n</tr>\n<tr>\n<td align=\"left\">组合模式<br>(Composite Pattern)</td>\n<td align=\"left\">组合多个对象形成树形结构，以表示具有部分-整体关系的层次结构。组合模式让客户端可以统一对待单个对象和组合对象。</td>\n</tr>\n<tr>\n<td align=\"left\">装饰模式<br>(Decorator Pattern)</td>\n<td align=\"left\">动态地给一个对象增加一些额外的职责。就扩展功能而言，装饰模式提供了一种比使用子类更加灵活的替代方案。</td>\n</tr>\n<tr>\n<td align=\"left\">外观模式<br>(Facade Pattern)</td>\n<td align=\"left\">为子系统中的一组接口提供一个统一的入口。外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</td>\n</tr>\n<tr>\n<td align=\"left\">享元模式<br>(Flyweight Pattern)</td>\n<td align=\"left\">运用共享技术有效地支持大量细粒度对象的复用。</td>\n</tr>\n<tr>\n<td align=\"left\">代理模式<br>(Proxy Pattern)</td>\n<td align=\"left\">给某一个对象提供一个代理或占位符，并由代理对象来控制对原对象的访问。</td>\n</tr>\n</tbody></table>\n<h4 id=\"行为型设计模式\"><a href=\"#行为型设计模式\" class=\"headerlink\" title=\"行为型设计模式\"></a>行为型设计模式</h4><p><strong>行为型模式(Behavioral Pattern)</strong> 描述类或对象如何交互及如何分配职责,它主要涉及通过合理的处理方法,达到使系统升级性和维护性提高的目的。</p>\n<p>分为：</p>\n<ul>\n<li>解释器模式 (Interpreter Pattern)</li>\n<li>模板方法模式 (Template Method Pattern)</li>\n<li>职责链模式 (Chain of Responsibility Pattern)</li>\n<li>命令模式 (Command Pattern)</li>\n<li>迭代器模式 (Iterator Pattern)</li>\n<li>中介者模式 (Mediator Pattern)</li>\n<li>备忘录模式 (Memento Pattern)</li>\n<li>观察者模式 (Observer Pattern)</li>\n<li>状态模式 (State Pattern)</li>\n<li>策略模式 (Strategy Pattern)</li>\n<li>访问者模式 (Visitor Pattern)</li>\n</ul>\n<p>由于各设计模式都可以展开去讨论，而此处列举的设计模式众多，故在此不对每个设计模式进行展开讨论，有时间或有需求再单独对某一设计模式进行讨论。</p>\n<p><strong>参考：我校教参</strong></p>\n",
            "tags": [
                "Design Pattern"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/04/26/undefined-reference-to-pthread_create/",
            "url": "https://blog.timerever.tk/2017/04/26/undefined-reference-to-pthread_create/",
            "title": "对 “pthread_create” 未定义的引用",
            "date_published": "2017-04-26T15:01:27.000Z",
            "content_html": "<p>今天在对 Linux 多线程编程进行学习时，在编译代码时出现了问题。</p>\n<p>由于使用了 <code>pthread_create</code>, <code>pthread_join</code> 等函数，在使用 <code>gcc</code> 编译时，出现了 <strong>对 ‘pthread_create’ 未定义的引用</strong> 的错误，在上网查询后，得知 pthread 库不是 Linux 系统默认的库，所以在编译时需要添加 <code>-lpthread</code> 参数来使用 libpthread.a 库进行编译。</p>\n<pre><code># gcc -o pthread -lpthread pthread.c\n</code></pre>\n<p>结果还是失败。再次上网查阅，得知 <code>-lpthread</code> 应该放到最后面，修改后编译通过。</p>\n<pre><code># gcc thread.c -o thread.c -lpthread\n</code></pre>\n<p><strong>参考链接：<a href=\"http://blog.csdn.net/besfanfei/article/details/7542396\">http://blog.csdn.net/besfanfei/article/details/7542396</a></strong></p>\n",
            "tags": [
                "Linux",
                "C"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/04/24/fix-sigaction/",
            "url": "https://blog.timerever.tk/2017/04/24/fix-sigaction/",
            "title": "sigaction 自定义信号处理函数的“修复”",
            "date_published": "2017-04-24T11:15:05.000Z",
            "content_html": "<p>在对嵌入式 Linux 系统程序开发中的进程间通信进行学习时，涉及到了信号集函数组，书中给出的示例如下：</p>\n<blockquote>\n<p>该实例首先把 SIGQUIT、SIGINT 两个信号加入信号集，然后将该信号集设为阻塞状态，<br>并在该状态下使程序暂停 5 秒。接下来再将信号集设置为非阻塞状态，再对这两个信号分别<br>操作，其中 SIGQUIT 执行默认操作，而 SIGINT 执行用户自定义函数的操作。源代码如下<br>所示：</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">my_func</span><span class=\"params\">(<span class=\"keyword\">int</span> signum)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;If you want to quit,please try SIGQUIT\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">sigset_t</span> <span class=\"built_in\">set</span>,pendset;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sigaction</span> <span class=\"title\">action1</span>,<span class=\"title\">action2</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(sigemptyset(&amp;<span class=\"built_in\">set</span>)&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;sigemptyset&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(sigaddset(&amp;<span class=\"built_in\">set</span>,SIGQUIT)&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;sigaddset&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(sigaddset(&amp;<span class=\"built_in\">set</span>,SIGINT)&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;sigaddset&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(sigprocmask(SIG_BLOCK,&amp;<span class=\"built_in\">set</span>,<span class=\"literal\">NULL</span>)&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;sigprocmask&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;blocked\\n&quot;</span>);</span><br><span class=\"line\">\t\tsleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(sigprocmask(SIG_UNBLOCK,&amp;<span class=\"built_in\">set</span>,<span class=\"literal\">NULL</span>)&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;sigprocmask&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;unblock\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(sigismember(&amp;<span class=\"built_in\">set</span>,SIGINT))&#123;</span><br><span class=\"line\">\t\t\tsigemptyset(&amp;action1.sa_mask);</span><br><span class=\"line\">\t\t\taction1.sa_handler=my_func;</span><br><span class=\"line\">\t\t\tsigaction(SIGINT,&amp;action1,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sigismember(&amp;<span class=\"built_in\">set</span>,SIGQUIT))&#123;</span><br><span class=\"line\">\t\t\tsigemptyset(&amp;action2.sa_mask);</span><br><span class=\"line\">\t\t\taction2.sa_handler = SIG_DFL;</span><br><span class=\"line\">\t\t\tsigaction(SIGTERM,&amp;action2,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>理论上，按说明所述及代码的编写，使用 <code>Ctrl-C</code> 传递 <code>SIGINT</code> 信号后，会转到自定义处理函数 <code>my_func</code>，但在实际操作中，在进入自定义处理函数后，程序直接退出。<strong>猜测</strong>是由于在进行自定义处理函数后，系统仍然对信号做了默认的处理。</p>\n<p>在请教老师后，给出了一种解决方案，对 <code>sigaction</code> 结构体中的 <code>sa_flags</code> 进行赋值，这里先贴出该结构体。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sigaction</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*sa_handler)(<span class=\"keyword\">int</span> signo);</span><br><span class=\"line\">\t<span class=\"keyword\">sigset_t</span> sa_mask;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sa_flags;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*sa_restore)(<span class=\"keyword\">void</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>sa_handler</code> 是一个函数指针，指定信号关联函数，这里除可以是用户自定义的处理函数<br>外，还可以为 <code>SIG_DFL</code>（采用缺省的处理方式）或 <code>SIG_IGN</code>（忽略信号）。它的处理函数只<br>有一个参数，即信号值。<br><code>sa_mask</code> 是一个信号集，它可以指定在信号处理程序执行过程中哪些信号应当被阻塞，<br>在调用信号捕获函数之前，该信号集要加入到信号的信号屏蔽字中。<br><code>sa_flags</code> 中包含了许多标志位，是对信号进行处理的各个选择项。它的常见可选值如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">SA_NODEFER&#x2F;SA_NOMASK</td>\n<td align=\"left\">当捕捉到此信号时，在执行其信号捕捉函数时，系统不会自动阻塞此信号</td>\n</tr>\n<tr>\n<td align=\"left\">SA_NOCLDSTOP</td>\n<td align=\"left\">进程忽略子进程产生的任何 SIGSTOP、SIGTSTP、SIGTTIN 和 SIGTTOU 信号</td>\n</tr>\n<tr>\n<td align=\"left\">SA_RESTART</td>\n<td align=\"left\">可让重启的系统调用重新起作用</td>\n</tr>\n<tr>\n<td align=\"left\">SA_ONESHOT&#x2F;SA_RESETHAND</td>\n<td align=\"left\">自定义信号只执行一次，在执行完毕后恢复信号的系统默认动作</td>\n</tr>\n</tbody></table>\n<p>将 <code>sigaction</code> 结构体中的 <code>sa_flags</code> 成员赋值为 0，修改后的部分代码如下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(sigismember(&amp;<span class=\"built_in\">set</span>,SIGINT))&#123;</span><br><span class=\"line\">\t\tsigemptyset(&amp;action1.sa_mask);</span><br><span class=\"line\">\t\taction1.sa_handler=my_func;</span><br><span class=\"line\">\t\taction1.sa_flags=<span class=\"number\">0</span>; <span class=\"comment\">//添加此行</span></span><br><span class=\"line\">\t\tsigaction(SIGINT,&amp;action1,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sigismember(&amp;<span class=\"built_in\">set</span>,SIGQUIT))&#123;</span><br><span class=\"line\">\t\tsigemptyset(&amp;action2.sa_mask);</span><br><span class=\"line\">\t\taction2.sa_handler = SIG_DFL;</span><br><span class=\"line\">\t\tsigaction(SIGTERM,&amp;action2,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样修改后，程序确实正常运行了。但是根据该书所述和在网上查询，始终未能理解为何这样操作，而且之后尝试赋其他值，依然正常运行。网上国内的氛围就是博客间互相复制互相抄袭，找不到多少主观的分析，所以一直未能解决，仅在此做下记录。</p>\n",
            "tags": [
                "Linux",
                "C"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/04/23/client-custom-ssl/",
            "url": "https://blog.timerever.tk/2017/04/23/client-custom-ssl/",
            "title": "Apache HttpClient 4.5.x 忽略证书验证",
            "date_published": "2017-04-23T02:44:20.000Z",
            "content_html": "<p>在使用 Apache HttpComponents 时，需要访问一个第三方接口进行数据传输，但是由于对方使用的是 Let’s Encrypt 的证书，虽然浏览器是信任的，但是在调试的时候发现程序并不信任,所以采用自定义 SSLContext 的方式解决该问题。</p>\n<h3 id=\"查找官方解决方案\"><a href=\"#查找官方解决方案\" class=\"headerlink\" title=\"查找官方解决方案\"></a>查找官方解决方案</h3><p>作为一只程序猿，翻官方文档肯定是首选方案。官方提供了一种 Custom SSL context 的实现。</p>\n<p><a href=\"http://hc.apache.org/httpcomponents-client-4.5.x/httpclient/examples/org/apache/http/examples/client/ClientCustomSSL.java\">http://hc.apache.org/httpcomponents-client-4.5.x/httpclient/examples/org/apache/http/examples/client/ClientCustomSSL.java</a></p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * ====================================================================</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class=\"line\"><span class=\"comment\"> * or more contributor license agreements.  See the NOTICE file</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed with this work for additional information</span></span><br><span class=\"line\"><span class=\"comment\"> * regarding copyright ownership.  The ASF licenses this file</span></span><br><span class=\"line\"><span class=\"comment\"> * to you under the Apache License, Version 2.0 (the</span></span><br><span class=\"line\"><span class=\"comment\"> * &quot;License&quot;); you may not use this file except in compliance</span></span><br><span class=\"line\"><span class=\"comment\"> * with the License.  You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *   http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing,</span></span><br><span class=\"line\"><span class=\"comment\"> * software distributed under the License is distributed on an</span></span><br><span class=\"line\"><span class=\"comment\"> * &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class=\"line\"><span class=\"comment\"> * KIND, either express or implied.  See the License for the</span></span><br><span class=\"line\"><span class=\"comment\"> * specific language governing permissions and limitations</span></span><br><span class=\"line\"><span class=\"comment\"> * under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> * ====================================================================</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * This software consists of voluntary contributions made by many</span></span><br><span class=\"line\"><span class=\"comment\"> * individuals on behalf of the Apache Software Foundation.  For more</span></span><br><span class=\"line\"><span class=\"comment\"> * information on the Apache Software Foundation, please see</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;http://www.apache.org/&gt;.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> org.apache.http.examples.client;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.net.ssl.SSLContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.conn.ssl.TrustSelfSignedStrategy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.ssl.SSLContexts;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.util.EntityUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * This example demonstrates how to create secure connections with a custom SSL</span></span><br><span class=\"line\"><span class=\"comment\"> * context.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClientCustomSSL</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Trust own CA and all self-signed certs</span></span><br><span class=\"line\">        SSLContext sslcontext = SSLContexts.custom()</span><br><span class=\"line\">                .loadTrustMaterial(<span class=\"keyword\">new</span> File(<span class=\"string\">&quot;my.keystore&quot;</span>), <span class=\"string\">&quot;nopassword&quot;</span>.toCharArray(),</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> TrustSelfSignedStrategy())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"comment\">// Allow TLSv1 protocol only</span></span><br><span class=\"line\">        SSLConnectionSocketFactory sslsf = <span class=\"keyword\">new</span> SSLConnectionSocketFactory(</span><br><span class=\"line\">                sslcontext,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> String[] &#123; <span class=\"string\">&quot;TLSv1&quot;</span> &#125;,</span><br><span class=\"line\">                <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                SSLConnectionSocketFactory.getDefaultHostnameVerifier());</span><br><span class=\"line\">        CloseableHttpClient httpclient = HttpClients.custom()</span><br><span class=\"line\">                .setSSLSocketFactory(sslsf)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            HttpGet httpget = <span class=\"keyword\">new</span> HttpGet(<span class=\"string\">&quot;https://httpbin.org/&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Executing request &quot;</span> + httpget.getRequestLine());</span><br><span class=\"line\"></span><br><span class=\"line\">            CloseableHttpResponse response = httpclient.execute(httpget);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                HttpEntity entity = response.getEntity();</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;----------------------------------------&quot;</span>);</span><br><span class=\"line\">                System.out.println(response.getStatusLine());</span><br><span class=\"line\">                EntityUtils.consume(entity);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                response.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            httpclient.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于考虑到该接口为第三方接口，对方可能进行证书的更换，再加上由于所传输信息是可以公开的、非重要数据的数据，所以并不采用官方给出的导入证书而使用不进行检查直接信任的方式处理。</p>\n<h3 id=\"定义自己的-SSLContext\"><a href=\"#定义自己的-SSLContext\" class=\"headerlink\" title=\"定义自己的 SSLContext\"></a>定义自己的 SSLContext</h3><p>所以问题的关键在于自定义 <code>SSLContext</code>，查看其 <code>loadTrustMaterial</code> 方法的源代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> SSLContextBuilder <span class=\"title\">loadTrustMaterial</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">final</span> KeyStore truststore,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">final</span> TrustStrategy trustStrategy)</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException, KeyStoreException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> TrustManagerFactory tmfactory = TrustManagerFactory.getInstance(</span><br><span class=\"line\">            TrustManagerFactory.getDefaultAlgorithm());</span><br><span class=\"line\">    tmfactory.init(truststore);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> TrustManager[] tms = tmfactory.getTrustManagers();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tms != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (trustStrategy != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tms.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> TrustManager tm = tms[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tm <span class=\"keyword\">instanceof</span> X509TrustManager) &#123;</span><br><span class=\"line\">                    tms[i] = <span class=\"keyword\">new</span> TrustManagerDelegate(</span><br><span class=\"line\">                            (X509TrustManager) tm, trustStrategy);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">final</span> TrustManager tm : tms) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.trustmanagers.add(tm);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可见这边是使用实现了 <code>TrustStrategy</code> 接口的 <code>TrustSelfSignedStrategy</code> 对 X509 证书进行管理，所以我们需要自定义一个 <code>TrustStrategy</code> 的实例。</p>\n<p>先查看 <code>TrustStrategy</code> 接口的源代码，发现除了继承了 <code>org.apache.http.ssl.TrustStrategy</code> 之外没有添加任何内容。由于该类在 http-core 包中，直接反编译查看得：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TrustStrategy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isTrusted</span><span class=\"params\">(X509Certificate[] var1, String var2)</span> <span class=\"keyword\">throws</span> CertificateException</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以这里需要重写 <code>isTrusted</code> 方法，不进行验证，直接返回 <code>true</code>。由于不需要导入 Keystore，所以直接给空值，代码如下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SSLContext sslcontext = SSLContexts.custom()</span><br><span class=\"line\">\t    .loadTrustMaterial(<span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> TrustStrategy() &#123;</span><br><span class=\"line\">\t        <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isTrusted</span><span class=\"params\">(X509Certificate[] x509Certificates, String s)</span> <span class=\"keyword\">throws</span> CertificateException </span>&#123;</span><br><span class=\"line\">\t            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t    &#125;)</span><br><span class=\"line\">\t    .build();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>修改后的完整代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.conn.ssl.TrustStrategy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.ssl.SSLContexts;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.util.EntityUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.net.ssl.SSLContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.KeyManagementException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.KeyStoreException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.NoSuchAlgorithmException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.cert.CertificateException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.cert.X509Certificate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by timer on 2017/4/23.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClientCustomSSL</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 自定义 SSLContext 使信任所有证书。</span></span><br><span class=\"line\">        SSLContext sslcontext = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            sslcontext = SSLContexts.custom()</span><br><span class=\"line\">\t                .loadTrustMaterial(<span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> TrustStrategy() &#123;</span><br><span class=\"line\">\t                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isTrusted</span><span class=\"params\">(X509Certificate[] x509Certificates, String s)</span> <span class=\"keyword\">throws</span> CertificateException </span>&#123;</span><br><span class=\"line\">\t                        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t                    &#125;</span><br><span class=\"line\">\t                &#125;)</span><br><span class=\"line\">\t                .build();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (KeyManagementException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (KeyStoreException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 仅允许 TLSv1 协议</span></span><br><span class=\"line\">        SSLConnectionSocketFactory sslsf = <span class=\"keyword\">new</span> SSLConnectionSocketFactory(</span><br><span class=\"line\">                sslcontext,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> String[] &#123; <span class=\"string\">&quot;TLSv1&quot;</span> &#125;,</span><br><span class=\"line\">                <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                SSLConnectionSocketFactory.getDefaultHostnameVerifier());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>(CloseableHttpClient httpclient = HttpClients.custom().setSSLSocketFactory(sslsf).build()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            HttpGet httpget = <span class=\"keyword\">new</span> HttpGet(<span class=\"string\">&quot;https://httpbin.org/get&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span>(CloseableHttpResponse response = httpclient.execute(httpget)) &#123;</span><br><span class=\"line\">                HttpEntity entity = response.getEntity();</span><br><span class=\"line\">                System.out.println(EntityUtils.toString(entity));</span><br><span class=\"line\">                EntityUtils.consume(entity);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>成功访问，输出如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;args&quot;: &#123;&#125;, </span><br><span class=\"line\">  &quot;headers&quot;: &#123;</span><br><span class=\"line\">    &quot;Accept-Encoding&quot;: &quot;gzip,deflate&quot;, </span><br><span class=\"line\">    &quot;Connection&quot;: &quot;close&quot;, </span><br><span class=\"line\">    &quot;Host&quot;: &quot;httpbin.org&quot;, </span><br><span class=\"line\">    &quot;User-Agent&quot;: &quot;Apache-HttpClient/4.5.3 (Java/1.8.0_121)&quot;</span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  &quot;origin&quot;: &quot;60.219.211.8&quot;, </span><br><span class=\"line\">  &quot;url&quot;: &quot;https://httpbin.org/get&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注：这里访问的并不是一个不受信任的站点，但是实际测试不受信任的站点也可以正常访问。</strong></p>\n",
            "tags": [
                "Java",
                "HttpClient"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/04/09/regular-expression/",
            "url": "https://blog.timerever.tk/2017/04/09/regular-expression/",
            "title": "正则表达式原理探究",
            "date_published": "2017-04-09T08:52:41.000Z",
            "content_html": "<blockquote>\n<p>正则表达式是被广为使用的工具，功能非常强大，但语法很复杂，想要完全记忆非常麻烦。<br>偶然间在《算法：第四版》上看到了有关于正则表达式原理的叙述，受益匪浅，在此做下笔记。</p>\n</blockquote>\n<h1 id=\"正则表达式的定义\"><a href=\"#正则表达式的定义\" class=\"headerlink\" title=\"正则表达式的定义\"></a>正则表达式的定义</h1><p><strong>什么是正则表达式？</strong>一个正则表达式对应着一堆字符串，这些字符串构成一个集合，它们的共同特点就是匹配于这个正则表达式。例如：a(a|b) * b 就对应着第一个字符为a，最后一个字符为b，由a和b构成的字符串。 </p>\n<p>正则表达式有三种核心的基本结构：</p>\n<ol>\n<li><em>连接</em>：如 abc，由 a, b, c连接而成。</li>\n<li><em>或</em>：如 a|b|c，表示是 a 或 b 或 c。<br> ab|bcd表示ab或bcd。</li>\n<li><em>闭包</em>：如a*b，表示0或若干个a和一个b连接而成的字符串。</li>\n</ol>\n<p>以上就是最最最基本的结构，是构成正则表达式的基础。</p>\n<span id=\"more\"></span>\n\n<p>我们可以使用括号改变优先级顺序，如 c(ac|b)d 表示 cacd, cbd。</p>\n<p>至于其它教程里写到的如 +,?, [] 等操作都是基本操作的简略缩写，它们都可以通过基本操作完成。    </p>\n<p>+ 是由那些基本操作完成的？(文章末尾给出答案)</p>\n<p>基本的语法就介绍到这，这篇文章并不是主要讲应用。有兴趣朋友可以在网上搜索完整的语法规则，非常详细。</p>\n<h1 id=\"非确定有限状态自动机\"><a href=\"#非确定有限状态自动机\" class=\"headerlink\" title=\"非确定有限状态自动机\"></a>非确定有限状态自动机</h1><h2 id=\"DFA\"><a href=\"#DFA\" class=\"headerlink\" title=\"DFA\"></a>DFA</h2><p>DFA 又叫确定有限状态自动机，即对于一个输入，它的输出状态是确定的。如图：  </p>\n<img src=\"/2017/04/09/regular-expression/regular-expression-1.png\" class=\"\">\n\n\n<p>对于这个自动机，输出边是 Turn On 和 Turn Off 的动作，Turn On 导致状态变为 On，Turn Off 导致状态变为 Off。<br>这两个动作所导致的结果是可以预料的，确定的。所以说是确定有限状态自动机。</p>\n<h2 id=\"NFA\"><a href=\"#NFA\" class=\"headerlink\" title=\"NFA\"></a>NFA</h2><p>NFA 叫非确定有限状态自动机，和 DFA 的唯一区别是它的输出是非确定的，DFA是NFA的一个子集。如图：</p>\n<img src=\"/2017/04/09/regular-expression/regular-expression-2.png\" class=\"\">\n\n<p>还是那个例子，只不过状态 Off 的 Turn On 操作多了一个新的状态 Down  </p>\n<p>当我们进行 Turn On 操作时无法确定到达的是 On 还是 Down，因此是无法根据当前状态和输出边确定下一状态的，这就叫做非确定性有限状态自动机。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>我们先来看一个示例，它说明了 NFA 的性质和操作。如图：  </p>\n<img src=\"/2017/04/09/regular-expression/regular-expression-3.png\" class=\"\">\n\n<p>（图表示((A*B|AC)D)所对应的 NFA）</p>\n<p>我们定义的NFA有以下特点：     </p>\n<ol>\n<li>正则表达式中每个字符有且只有一个对应的状态。</li>\n<li>字符所对应的状态有一条指向下一个字符对应状态的边（图中黑色的边）</li>\n<li>“(“,  “)”, “|“, 和”*”所对应的状态至少含有一条指出的边，可能指向任意状态（图中红色边）   </li>\n<li>一个状态只能有一条指出的黑色边</li>\n</ol>\n<p>我们用构造的NFA去匹配文本，当从起始状态0能够到达最终状态的话，即匹配成功，这就是正则表达式匹配文本的原理。  </p>\n<p>NFA中状态的转换有以下两种:    </p>\n<ol>\n<li>匹配转换： 当字符匹配时，由黑色的边转换到下一状态。</li>\n<li>ε-转换：不扫描任何字符，通过红色的边转换到另一个状态。</li>\n</ol>\n<h2 id=\"NFA-的运行\"><a href=\"#NFA-的运行\" class=\"headerlink\" title=\"NFA 的运行\"></a>NFA 的运行</h2><p>运行的核心思想就是：遍历所有可能到达的状态序列，只要其中存在最终状态就匹配成功。类似于动态规划。</p>\n<p>首先将NFA中的两个状态转换表示出来。我们用一个char数组re[]保存正则表达式本身 ，如果re[i]存在于字母表中，那么就存在一个从i到i+1的匹配转换。     </p>\n<p>自然地，ε- 转换就用有向图G表示，实例中的 ε-转换可构建为: 0-&gt;1  1-&gt;2   1-&gt;6    2-&gt;3……以此类推。  </p>\n<p>当处于状态 0 时，我们遍历所有从0通过ε-转换(有向图的深度优先搜索)可到达的状态放入一个集合，再从中查找是否存在最终状态的值。<br>当匹配一个字符到达状态1后，再遍历所有从1通过ε-转换可到达的状态……如此反复，当文本结束时从集合中找到是否含有最终状态来说明是否到达接受状态。  </p>\n<p>例如，在实例中初始集合为{1, 2, 3, 4, 6}，如果第一个字符为A，则接下来可能的状态为 {3, 7} ,通过 ε- 转换可到 2，4，因此第二个字符状态集合为 {2, 3, 4, 7}。再不断重复这个过程直到文本结束。    </p>\n<p>输入A A B D会有什么样的轨迹？(文章末尾给出答案)</p>\n<h2 id=\"NFA-的构造\"><a href=\"#NFA-的构造\" class=\"headerlink\" title=\"NFA 的构造\"></a>NFA 的构造</h2><p>长串的正则表达式都是三个基本操作和括号构成的，因此我们的NFA也可以看作成若干基本操作拼接而成，下面就来介绍一下基本操作所对应的 NFA。  </p>\n<ol>\n<li><p>连接操作：字符加状态匹配即可。</p>\n<img src=\"/2017/04/09/regular-expression/regular-expression-4.png\" class=\"\">\n</li>\n<li><p>括号：用栈处理。</p>\n</li>\n<li><p>闭包操作：   </p>\n<ul>\n<li><p>出现在单个字符之后：在该字符和 * 之间添加两条 ε- 转换。  </p>\n<img src=\"/2017/04/09/regular-expression/regular-expression-5.png\" class=\"\">\n</li>\n<li><p>出现在右括号之后：在栈顶的左括号和 * 之间添加两条 ε- 转换。  </p>\n<img src=\"/2017/04/09/regular-expression/regular-expression-6.png\" class=\"\"></li>\n</ul>\n</li>\n<li><p>或：A|B中A和B都是正则表达式。同样也是添加两条ε-转换，一条从左括号指向<br>B中第一个字符，另一条从|字符指向右括号。这使NFA能够进行选择。<img src=\"/2017/04/09/regular-expression/regular-expression-7.png\" class=\"\"></p>\n</li>\n</ol>\n<p>运用以上几个基本的 NFA，我们可以拼接出任意 NFA。  </p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>本篇文章以介绍概念为主，具体的实现可参照<a href=\"http://algs4.cs.princeton.edu/54regexp/NFA.java.html\">NFA.java</a></p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><h2 id=\"感想\"><a href=\"#感想\" class=\"headerlink\" title=\"感想\"></a>感想</h2><blockquote>\n<p>正则表达式是很强大的工具，网上教程一大把，但多数是直接告诉你语法，基本没规律，只能强记，效率略低。<br>明白原理后，不仅记忆深刻，而且还可以编写适合自己的规则。<br>（其实说到底都是《编译原理》课程上的东西，无奈学校不开😤好气哦）</p>\n</blockquote>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li>《算法：第4版》</li>\n</ol>\n<h3 id=\"答案\"><a href=\"#答案\" class=\"headerlink\" title=\"答案\"></a>答案</h3><ol>\n<li>+ : (ab)+ 等价于 (ab)(ab)*</li>\n<li>{0, 1, 2, 3, 4, 6} -&gt; {2, 3, 4, 7} -&gt; {2, 3, 4} -&gt; {5, 8, 9} -&gt; {10}</li>\n</ol>\n",
            "tags": [
                "Regular Expression"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/04/04/windows-init/",
            "url": "https://blog.timerever.tk/2017/04/04/windows-init/",
            "title": "Windows 配置",
            "date_published": "2017-04-04T06:44:47.000Z",
            "content_html": "<blockquote>\n<p>一个存放 Windows 各种配置和各种命令的地方，毕竟 Windows 的功能有的藏的实在是深或者是没有直接的入口。这种东西大多网络收集，且都是网上存在的，找不到具体出处，所以此处不列出出处。</p>\n</blockquote>\n<h3 id=\"注册表相关\"><a href=\"#注册表相关\" class=\"headerlink\" title=\"注册表相关\"></a>注册表相关</h3><p>“regedit.exe” 是 Windows 系统的注册表编辑器，是 Registry Editor 的缩写。其实质上是一个庞大的数据库，它存储这下面这些内容：软、硬件的有关配置和状态信息，应用程序和资源管理器外壳的初始条件、首选项和卸载数据；计算机的整个系统的设置和各种许可，文件扩展名与应用程序的关联，硬件的描述、状态和属性；计算机性能纪录和底层的系统状态信息，以及各类其他数据。（摘自百度百科）</p>\n<p>通常可使用 <code>win + r</code> 运行输入 <code>regedit</code> 打开。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"删除我的电脑中应用添加的图标\"><a href=\"#删除我的电脑中应用添加的图标\" class=\"headerlink\" title=\"删除我的电脑中应用添加的图标\"></a>删除我的电脑中应用添加的图标</h4><p>由于一般使用绿色版，所以接触的不是很多，但印象中百度云管家、360 云盘这种东西都是会增加图标的，而且有的应用添加的图标是不能右键删除的，这里记录下使用注册表的解决方法。</p>\n<p>接触到的图标都是在下列位置新建<strong>注册表项</strong>，发现其余的再补充。</p>\n<pre><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\NameSpace\n</code></pre>\n<p>其中一个项对应一个图标，但没有很好的办法辨别其对应关系，在图标很多时建议先备份再删除。</p>\n<p>日常电脑中没有那种烦人的图标，这次因为有一个出现才去找解决办法删掉了，所以，已经没有图可以截了。</p>\n<h4 id=\"Win10-系统图片打开方式恢复默认照片查看器\"><a href=\"#Win10-系统图片打开方式恢复默认照片查看器\" class=\"headerlink\" title=\"Win10 系统图片打开方式恢复默认照片查看器\"></a>Win10 系统图片打开方式恢复默认照片查看器</h4><pre><code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows Photo Viewer\\Capabilities\\FileAssociations\n</code></pre>\n<p>其中每一个<strong>字符串值</strong>代表一种后缀的关联，数值名称为所想要关联的后缀，例如 <code>.jpg</code>，数值数据统一写 <code>PhotoViewer.FileAssoc.Tiff</code>，想恢复哪种右键关联就新建对应后缀的注册表<strong>字符串值</strong>即可。</p>\n<p><strong>已知此路径非唯一的恢复方式，存在其余注册表路径可以恢复。</strong></p>\n<p>不过，还是推荐使用 <a href=\"http://www.chuyu.me/zh-Hans/index.html\">Dism++</a> 恢复，方便快捷（Dism++ 采用的就是上面所列出的的注册表路径）。</p>\n<h3 id=\"PowerShell\"><a href=\"#PowerShell\" class=\"headerlink\" title=\"PowerShell\"></a>PowerShell</h3><h4 id=\"卸载Modern-应用\"><a href=\"#卸载Modern-应用\" class=\"headerlink\" title=\"卸载Modern 应用\"></a>卸载Modern 应用</h4><p>除了企业的 LTSB 长期支持版本，家庭版和专业版都会附带 Modern 应用，对于很少使用且不能直接卸载的，可以使用 PowerShell 来卸载部分应用。<br>仅列出无法右键卸载的，可用 PowerShell 卸载的部分应用。<br>闹钟：get-appxpackage <em>Microsoft.WindowsAlarms</em> | remove-appxpackage<br>人脉：get-appxpackage <em>Microsoft.People</em> | remove-appxpackage<br>信息：get-appxpackage <em>Microsoft.Messaging</em> | remove-appxpackage<br>StickyNote：get-appxpackage <em>Sticky</em> | remove-appxpackage</p>\n<h3 id=\"杂类\"><a href=\"#杂类\" class=\"headerlink\" title=\"杂类\"></a>杂类</h3><h4 id=\"关闭密码登录\"><a href=\"#关闭密码登录\" class=\"headerlink\" title=\"关闭密码登录\"></a>关闭密码登录</h4><p>由于各种原因，Windows 账户需要设置密码然而很烦每次开机都要输入密码，使用下面设置即可完成不需每次都输入密码即可自动登录系统。</p>\n<p>开始——运行——输入 <code>control userpasswords2</code>，取消 “要使用本计算机，用户必须输入用户名和密码” 勾选，点击确定关闭窗口后输入想自动登录的用户名和密码，确定后即可。</p>\n<h4 id=\"桌面图标设置\"><a href=\"#桌面图标设置\" class=\"headerlink\" title=\"桌面图标设置\"></a>桌面图标设置</h4><p>通常系统自带桌面图标的设置，可以在进入系统桌面后，右键个性化找到桌面图标设置选项（具体因系统而异）进行修改，然而对于服务器系统，右键并没有个性化选项，无法修改桌面图标，可使用下列命令调出设置窗口设置。</p>\n<p>开始——运行</p>\n<pre><code>rundll32.exe shell32.dll,Control_RunDLL desk.cpl,,0\n</code></pre>\n",
            "tags": [
                "Windows",
                "Regedit",
                "PowerShell"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/03/18/git-tutorial/",
            "url": "https://blog.timerever.tk/2017/03/18/git-tutorial/",
            "title": "Git 简易教程",
            "date_published": "2017-03-18T03:07:37.000Z",
            "content_html": "<blockquote>\n<p>一个好早就写了出来的教材，代某位大佬发表</p>\n</blockquote>\n<h1 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h1><p><strong>为什么要进行版本控制？</strong>  最简单的例子，当我们用文字处理软件工作时（如Word）需要进行修改，而有时候又不确定修改的内容是不是需要的，因此会产生许多个文件，如图：  </p>\n<img src=\"/2017/03/18/git-tutorial/git-tutorial-1.png\" class=\"\">\n<p>每一个文件都是在之前的文件基础上进行微小的修改，久而久之，不但文件冗杂，而且还不清楚修改的内容是什么，是一种很杂乱的方式。</p>\n<p>而版本控制就是解决这一问题——通过记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。</p>\n<p>采取版本控制后，你可以将文件还原到之前的状态，比较各状态之间的细节从而查出是修改了哪个地方，找出哪里出了问题。甚至你可以随意删改项目中的文件，照样可以恢复到之前的样子，因而增加了容错率，提供了更多可能性。</p>\n<p>版本控制有三种，第一种是本地式版本控制，也就是在本地的硬盘上用数据库记录历代文件；第二种是集中式版本控制，通过一个服务器，多个用户连接到服务器进行文件的记录。<br>而第三种是我们着重介绍的<em>分布式版本控制</em>，它将前两种结合起来，在本地和服务器都建立数据库，每次工作时从服务器克隆（clone）下来，同时又与服务器交互，从而兼顾协同性和安全性。</p>\n<p><em>我们所说的git就是一个分布式版本控制软件，GitHub就是一个git的托管服务。</em></p>\n<span id=\"more\"></span>\n<h1 id=\"git本地操作\"><a href=\"#git本地操作\" class=\"headerlink\" title=\"git本地操作\"></a>git本地操作</h1><p>git设计简单，是完全分布式，允许成千上万个并行开发的分支(Branch)，有能力管理超大规模的项目，是目前首选的版本控制软件。</p>\n<h2 id=\"一、工作流程\"><a href=\"#一、工作流程\" class=\"headerlink\" title=\"一、工作流程\"></a>一、工作流程</h2><p>git的三个工作区域，对应着三种状态：  </p>\n<img src=\"/2017/03/18/git-tutorial/git-tutorial-2.png\" class=\"\">\n<p>git 工作流程如下：    </p>\n<ol>\n<li><p>在工作目录中修改文件。（modified）  </p>\n</li>\n<li><p>暂存文件，将文件的快照放入暂存区域。（staged）  </p>\n</li>\n<li><p>提交更新，找到暂存区域的文件，将快照永久性存储到 git 仓库目录。（committed）</p>\n</li>\n</ol>\n<p>这是最基本的流程，需要时刻记住。  </p>\n<h2 id=\"二、安装git\"><a href=\"#二、安装git\" class=\"headerlink\" title=\"二、安装git\"></a>二、安装git</h2><p><a href=\"https://git-scm.com/downloads\">Git 官方网站</a>下载对应自己电脑的版本，按照指引进行安装。</p>\n<h2 id=\"三、git使用知识\"><a href=\"#三、git使用知识\" class=\"headerlink\" title=\"三、git使用知识\"></a>三、git使用知识</h2><p>首先我们需要在本地创建一个仓库，用于存放历代版本。</p>\n<p>1.命令行中运用cd指令进入项目的目录，输入 </p>\n<pre><code>    $ git init\n</code></pre>\n<p>这将创建一个名为.git的隐藏子目录。</p>\n<p>2.git status:查看哪些文件处于什么状态</p>\n<pre><code>    $ git status\n    On branch master\n    nothing to commit, working directory clean\n   （创建git仓库后目录下没有文件时的情况）  \n</code></pre>\n<p>   创建一个文件（test）后再使用git status命令，将会看到一个新的提示  </p>\n<pre><code>    $ git status\n    On branch master\n    Your branch is up-to-date with &#39;origin/master&#39;.\n    Untracked files:\n    (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)\n\n        test\n\n    nothing added to commit but untracked files present (use &quot;git add&quot; to track)\n\n    （新建的“test”文件出现在Untracked files下）\n</code></pre>\n<p>3.git add：跟踪文件<br>运行</p>\n<pre><code>    $ git add test\n</code></pre>\n<p>此时再运行git status，会看到test文件已被跟踪，处于暂存状态(staged)，显示Changes to be committed</p>\n<pre><code>    $ git status\n    On branch master\n    Your branch is up-to-date with &#39;origin/master&#39;.\n    Changes to be committed:\n    (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)\n\n        test\n</code></pre>\n<p>4.git commit：提交更新至仓库</p>\n<p>先用git status命令确定暂存区域准备妥当，<br>再运行$git commit -m ”提交信息”（提交信息指本次提交的说明，类似于注释）</p>\n<pre><code>$ git commit -m &quot;first&quot;\n[master 5e43df6] first\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 test \n</code></pre>\n<p>此时会显示提交成功的信息。  </p>\n<p>5.git diff：显示尚未暂存的改动（并不是所有改动）</p>\n<p>6.git rm test：删除暂存区域中的文件test</p>\n<p>7.git log:查看提交历史</p>\n<pre><code>$ git log\ncommit 5e43df6b6d003ea70444ee3125456fd75b066803\nAuthor: *** &lt;****@gmail.com&gt;\nDate:   Thu Mar 16 19:37:52 2017 +0800\n\nfirst\n\ncommit 1c83e2a07f0279ea510e2a323fada53166c3c657\nAuthor: *** &lt;****@gmail.com&gt;\nDate:   Thu Mar 16 19:16:26 2017 +0800\n\ntest  \n</code></pre>\n<p>8.版本回退</p>\n<p>  在git log命令中我们可以看到类似<em>5e43……6803</em>的一大串字符，那就是版本号（commit id）我们可以用 git reset命令回退到之前任何一个版本:</p>\n<pre><code> $ git reset --hard 1c83e2a0\n   HEAD is now at 1c83e2a test\n</code></pre>\n<p>（版本号不必补全，Git会自动去查找）</p>\n<p>以上就是git的本地基本操作，包括创建一个仓库，更改、暂存和提交，查看仓库的提交历史，版本回退。</p>\n<h1 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h1><p>分支是把工作从主线上分离开来，以免影响开发主线。在不同的分支上你可以尝试各种各样的增删改，实现不同的设想。而git的分支模型是它最突出的特点，也是git脱颖而出的原因。</p>\n<h2 id=\"一、分支概念\"><a href=\"#一、分支概念\" class=\"headerlink\" title=\"一、分支概念\"></a>一、分支概念</h2><p>在版本回退里，你可以回溯到之前的任意版本，而这些版本都是处于一条时间线上，这条时间线就是一个分支。<br>默认的分支为master分支，本身可以看做一个指针，HEAD指针则指向master指针，如图：</p>\n<img src=\"/2017/03/18/git-tutorial/git-tutorial-3.png\" class=\"\">\n\n<p>每次提交都会多出一个节点，指针也随之移动。<br>当我们创建新的分支时，也就创建了一个新的指针，我们通过命令将HEAD指针移到新指针上：    </p>\n<img src=\"/2017/03/18/git-tutorial/git-tutorial-4.png\" class=\"\">\n\n<p>新提交一次后，新指针向前移动，master指针不变，这就产生了分支：<br>我们可以将两条分支合并，之后可以删掉新分支。  </p>\n<img src=\"/2017/03/18/git-tutorial/git-tutorial-5.png\" class=\"\">\n\n<img src=\"/2017/03/18/git-tutorial/git-tutorial-6.png\" class=\"\">\n<p>这样就完成了分支的合并。</p>\n<h2 id=\"二、分支使用\"><a href=\"#二、分支使用\" class=\"headerlink\" title=\"二、分支使用\"></a>二、分支使用</h2><p>1.git branch：查看当前所有分支      </p>\n<pre><code>$ git branch\n* master\n</code></pre>\n<p>（*标示当前分支，默认处于master分支）  </p>\n<p>2.git branch testing : 创建testing分支      </p>\n<pre><code>$ git branch testing\n</code></pre>\n<p>此时创建了testing分支，运行git branch命令验证       </p>\n<pre><code>$git branch    \n* master\ntesting\n</code></pre>\n<p>3.git checkout testing： 切换到testing分支      </p>\n<pre><code>$ git checkout testing\nSwitched to branch &#39;testing&#39;\n</code></pre>\n<p>此时主分支位于testing，运行git branch命令验证   </p>\n<pre><code>$ git branch\n  master\n* testing\n</code></pre>\n<p>4.git merge testing：将master分支和testing分支合并<br>（假设处于master分支）  </p>\n<pre><code>$ git merge testing\nAlready up-to-date.\n</code></pre>\n<p>如果在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，则会产生冲突从而无法合并，只能手动解决后再合并。    </p>\n<p>5.git branch -d删除分支  </p>\n<pre><code>$ git branch -d testing\nDeleted branch testing (was 1c83e2a).  \n</code></pre>\n<h1 id=\"使用GitHub\"><a href=\"#使用GitHub\" class=\"headerlink\" title=\"使用GitHub\"></a>使用GitHub</h1><p>GitHub 是最大的 Git 版本库托管商，尽管这不是 Git 开源项目的直接部分，但如果想要专业地使用 Git，你将不可避免地与 GitHub 打交道。  </p>\n<h3 id=\"创建帐户及配置\"><a href=\"#创建帐户及配置\" class=\"headerlink\" title=\"创建帐户及配置\"></a>创建帐户及配置</h3><p>1.访问<a href=\"https://github.com进行注册/\">https://github.com进行注册</a>  </p>\n<p>2.SSH访问：    </p>\n<pre><code>$ cd ~/.ssh\n$ ls\n id_rsa        id_rsa.pub    known_hosts  \n</code></pre>\n<p> 寻找到id_rsa命名的文件，.pub文件是公钥，另一个是私钥。    </p>\n<p> 如果找不到，可以运行如下命令创建它们    </p>\n<pre><code> $ ssh-keygen  \n \n</code></pre>\n<p> 进入github的帐户设置，点击左侧的SSH and GPG keys，将~&#x2F;.ssh&#x2F;id_rsa.pub公钥文件的内容粘贴到文本区，然后点击”Add key”    </p>\n<p> SSH访问配置成功     </p>\n<h3 id=\"创建、维护和管理你自己的项目。\"><a href=\"#创建、维护和管理你自己的项目。\" class=\"headerlink\" title=\"创建、维护和管理你自己的项目。\"></a>创建、维护和管理你自己的项目。</h3><p>1.点击页面右上角的＋号，点击New repository按钮  </p>\n<img src=\"/2017/03/18/git-tutorial/git-tutorial-7.png\" class=\"\">\n<img src=\"/2017/03/18/git-tutorial/git-tutorial-8.png\" class=\"\">\n<p>Respository name是必填项目，而其余都是选填项，可以默认。<br>点击Create respository按钮  ，即创建了一个新的仓库<br>这时候可以将项目分享给其他人，通过HTTP和SSH的形式。   </p>\n<img src=\"/2017/03/18/git-tutorial/git-tutorial-9.png\" class=\"\">\n\n<p> 2.对仓库进行操作，使本地和github同步  </p>\n<pre><code>     $ git remote add origin     **********（仓库地址）   \n    （添加远程仓库至本地）\n   \n     $ git pull --rebase origin master    \n    （更新远程更新到本地）\n\n     $ git push -u origin master  \n    （将本地仓库和远程仓库合并）\n</code></pre>\n<p> 在今后的项目工作中就是用以上命令同步本地和Github，需要记住。  </p>\n<p> 3.克隆仓库<br> 我们可以将远程仓库的内容克隆到本地</p>\n<pre><code> $ git clone git@github.com:Liuwt1997/github-photo.git\nCloning into &#39;github-photo&#39;...\nremote: Counting objects: 3, done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0\nReceiving objects: 100% (3/3), 196.28 KiB | 67.00 KiB/s, done.\nChecking connectivity... done.\n</code></pre>\n<p>   此时远程仓库的文件全部克隆至本地。</p>\n<p> 4.添加合作者<br>点击边栏的 “Settings” 链接，然后从左侧菜单中选择 “Collaborators” 。 然后，在输入框中填写用户名，点击 “Add collaborator.” 此时可以给予他们提交的权限。  </p>\n<img src=\"/2017/03/18/git-tutorial/git-tutorial-10.png\" class=\"\">\n\n<p>5.Fork按钮可以将他人项目派生下来，在你的空间中创建一个完全属于你的项目副本。  </p>\n<img src=\"/2017/03/18/git-tutorial/git-tutorial-11.png\" class=\"\">\n<p>如何对项目做出贡献呢？    </p>\n<ol>\n<li><p>将派生出的副本克隆到本地</p>\n</li>\n<li><p>创建出名称有意义的分支</p>\n</li>\n<li><p>修改代码</p>\n</li>\n<li><p>检查改动</p>\n</li>\n<li><p>将改动提交到分支中</p>\n</li>\n<li><p>将新分支推送到 GitHub 的副本中</p>\n</li>\n</ol>\n<p>现在到 GitHub 上查看之前的项目副本，可以看到 GitHub 提示我们有新的分支，并且显示了一个大大的绿色按钮让我们可以检查我们的改动，并给源项目创建合并请求。    </p>\n<p>如果你点击了那个绿色按钮，就会看到一个新页面，在这里我们可以对改动填写标题和描述，让项目的拥有者考虑一下我们的改动。通常花点时间来编写个清晰有用的描述是个不错的主意，这能让作者明白为什么这个改动可以给他的项目带来好处，并且让他接受合并请求。  </p>\n<p>以上就是简单的Github的使用方法。    </p>\n<p>参考资料：        </p>\n<ol>\n<li><a href=\"https://git-scm.com/book/zh/v2\">https://git-scm.com/book/zh/v2</a></li>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/\">廖雪峰git教程</a></li>\n</ol>\n",
            "tags": [
                "Git",
                "GitHub"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/03/13/docker-learning-trip-6/",
            "url": "https://blog.timerever.tk/2017/03/13/docker-learning-trip-6/",
            "title": "Docker 学习之旅（六）：使用 Docker 搭建 Java Web 运行环境",
            "date_published": "2017-03-13T01:58:28.000Z",
            "content_html": "<p>学习 Docker 在一开始肯定不是去学习它的理论（至少对大部分人而言），而是学习它的使用方法进而去使用。大概搭建好了 Docker 的环境，也尝试了创建自己的 Docker 镜像，现在就可以尝试一些比较实用的东西，比如使用 Docker 来搭建 Java Web 运行环境。</p>\n<h3 id=\"寻找镜像\"><a href=\"#寻找镜像\" class=\"headerlink\" title=\"寻找镜像\"></a>寻找镜像</h3><p>既然官方的镜像那么多，那么我们为什么不先去看一下官方镜像呢？打开 Docker Hub 一搜索 tomcat，排在第一个的就是。</p>\n<p>地址：<a href=\"https://hub.docker.com/_/tomcat/\">https://hub.docker.com/_/tomcat/</a></p>\n<p>这边选择 tomcat7 + jre7，但是通过查看构建所使用的 <code>Dockfile</code> 文件发现，tomcat 的官方源采用的是 jre7 是 openJDK7 的 jre，这里需要注意。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"下载运行-tomcat\"><a href=\"#下载运行-tomcat\" class=\"headerlink\" title=\"下载运行 tomcat\"></a>下载运行 tomcat</h3><p>tomcat 的默认启动参数为 <code>CMD [&quot;catalina.sh&quot;, &quot;run&quot;]</code>，启动方式为：</p>\n<pre><code>docker run -it --rm tomcat:7.0\n</code></pre>\n<p>使用 <code>http://container-ip:8080</code> 在浏览器访问。</p>\n<p>或者将端口映射到本地，运行：</p>\n<pre><code>$ docker run -it --rm -p 8888:8080 tomcat:7.0\n</code></pre>\n<p>然后使用 <code>http://localhost:8888</code> 或是 <code>http://host-ip:8888</code> 访问。</p>\n<h3 id=\"部署-Java-Web-项目\"><a href=\"#部署-Java-Web-项目\" class=\"headerlink\" title=\"部署 Java Web 项目\"></a>部署 Java Web 项目</h3><p>文档上已经说明，对于 tomcat 7 ，tomcat 所在目录为 <code>/usr/local/tomcat</code>，所以对其进行修改完成部署。</p>\n<h4 id=\"复制文件\"><a href=\"#复制文件\" class=\"headerlink\" title=\"复制文件\"></a>复制文件</h4><p>先使用如下命令启动容器：</p>\n<pre><code>$ docker run -it -v /home/ubuntu/tomcat:/mnt/war tomcat:7.0 /bin/bash\n</code></pre>\n<p>此处相关参数包括：</p>\n<ul>\n<li><code>-i</code>：表示以“交互模式”运行容器</li>\n<li><code>-t</code>：表示容器启动后会进入其命令行</li>\n<li><code>-v</code>：表示需要将本地哪个目录挂载到容器中，格式：-v &lt;宿主机目录&gt;:&lt;容器目录&gt;</li>\n</ul>\n<p>即运行后进入容器命令行，并将主机的 <code>/home/ubuntu/tomcat</code> 挂载到了容器的 <code>/mnt/war</code> 目录。</p>\n<p>然后将部署文件拷贝到主机的 <code>/home/ubuntu/tomcat</code> 目录并继续在容器中操作部署程序。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cd webapps/ROOT/</span></span><br><span class=\"line\"><span class=\"comment\"># rm -rf *</span></span><br><span class=\"line\"><span class=\"comment\"># cp -r /mnt/war/* .</span></span><br><span class=\"line\"><span class=\"comment\"># exit</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建镜像\"><a href=\"#创建镜像\" class=\"headerlink\" title=\"创建镜像\"></a>创建镜像</h4><p>此处需要记住刚才所运行容器的 ID，bash 里面 <code>root@0b2d4744734c</code> 的 ‘root@’ 后面的便是容器 ID。如果已经找不到，可使用 <code>docker ps -a</code> 查看之前所运行过的所有容器。</p>\n<p>然后创建镜像。</p>\n<pre><code>$ docker commit 0b2d4744734c timerever/javaweb:1.0\n</code></pre>\n<h3 id=\"运行镜像\"><a href=\"#运行镜像\" class=\"headerlink\" title=\"运行镜像\"></a>运行镜像</h3><p>使用刚刚自定的名称运行镜像。</p>\n<pre><code>docker run -it --rm -p 8888:8080 timerever/javaweb:1.0 catalina.sh run\n</code></pre>\n",
            "tags": [
                "Docker",
                "Java Web"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/03/11/docker-learning-trip-5/",
            "url": "https://blog.timerever.tk/2017/03/11/docker-learning-trip-5/",
            "title": "Docker 学习之旅（五）：Docker 下的 srceenfetch",
            "date_published": "2017-03-11T01:25:43.000Z",
            "content_html": "<p>在之前介绍了 <code>Dockerfile</code> 文件和 Docker Hub 的使用，现在就来完整的应用其创建一个 Docker 下的 srceenfetch。</p>\n<h4 id=\"关于-srceenfetch\"><a href=\"#关于-srceenfetch\" class=\"headerlink\" title=\"关于 srceenfetch\"></a>关于 srceenfetch</h4><p>srceenfetch 基本是我在每一个 Linux 主机都会安装的程序，大概就是用来秀 Linux 和一个简略但直观地展示硬件环境的一个应用程序。</p>\n<p>该项目托管在 GitHub，项目地址为：<a href=\"https://github.com/KittyKatt/screenFetch\">https://github.com/KittyKatt/screenFetch</a>。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"创建-Docker-Hub-仓库\"><a href=\"#创建-Docker-Hub-仓库\" class=\"headerlink\" title=\"创建 Docker Hub 仓库\"></a>创建 Docker Hub 仓库</h3><p>在 Docker Hub 网页上创建一个 Docker Hub 仓库，具体操作很简单，不再赘述。</p>\n<p>此处创建的仓库为：<code>timerever/screenfetch</code></p>\n<h3 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h3><h4 id=\"创建-Dockerfile-文件\"><a href=\"#创建-Dockerfile-文件\" class=\"headerlink\" title=\"创建 Dockerfile 文件\"></a>创建 Dockerfile 文件</h4><p>因为 screenfetch 在 Ubuntu 中可以直接通过 <code>apt-get</code> 安装，所以直接使用 Ubuntu 源安装。</p>\n<p>创建 <code>Dockerfile</code> 文件。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi Dockerfile</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get update &amp;&amp; apt-get install -y screenfetch</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> screenfetch</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"构建镜像并运行\"><a href=\"#构建镜像并运行\" class=\"headerlink\" title=\"构建镜像并运行\"></a>构建镜像并运行</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build -t <span class=\"string\">&quot;timerever/screenfetch&quot;</span> .</span><br><span class=\"line\">$ docker run timerever/screenfetch</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"上传镜像\"><a href=\"#上传镜像\" class=\"headerlink\" title=\"上传镜像\"></a>上传镜像</h3><pre><code>docker push timerever/screenfetch\n</code></pre>\n<p>如果没有登录，先使用 <code>docker login</code> 登录即可。</p>\n",
            "tags": [
                "Docker"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/03/09/docker-learning-trip-4/",
            "url": "https://blog.timerever.tk/2017/03/09/docker-learning-trip-4/",
            "title": "Docker 学习之旅（四）：Docker Hub",
            "date_published": "2017-03-09T06:42:13.000Z",
            "content_html": "<p>Docker Hub 是一个由 Docker 公司负责维护的公共注册中心，它包含了超过 15,000 个可用来下载和构建容器的镜像，并且还提供认证、工作组结构、工作流工具（比如 webhooks）、构建触发器以及私有工具（比如私有仓库可用于存储你并不想公开分享的镜像）。</p>\n<h3 id=\"总览\"><a href=\"#总览\" class=\"headerlink\" title=\"总览\"></a>总览</h3><p><a href=\"https://docs.docker.com/docker-hub/\">Docker Hub</a> 负责集中用户账号、镜像和公开的命名空间的信息，分别由不同的部分组成：</p>\n<ul>\n<li>Web UI</li>\n<li>Meta-data store (comments, stars, list public repositories)</li>\n<li>Authentication service</li>\n<li>Tokenization</li>\n</ul>\n<p>这仅仅是 Docker Hub 的一个基本组成，它对大多数的个人和小型企业是十分有帮助的。在改版后，文档将 Docker Hub 部分独立出去，这里遵循以前的顺序，介绍下 Docker Hub 的基础应用。</p>\n<p>有关于 Docker Hub 的文档：<a href=\"https://docs.docker.com/docker-hub/\">https://docs.docker.com/docker-hub/</a></p>\n<span id=\"more\"></span>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>没有登录帐号的情况下可以 <code>search</code> 或者 <code>pull</code> 镜像，但是不能 <code>push</code> 镜像。</p>\n<h3 id=\"团队和组织\"><a href=\"#团队和组织\" class=\"headerlink\" title=\"团队和组织\"></a>团队和组织</h3><p>太高大上，个人的我用不上，不太了解。</p>\n<h3 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h3><h4 id=\"搜索镜像\"><a href=\"#搜索镜像\" class=\"headerlink\" title=\"搜索镜像\"></a>搜索镜像</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker search centos</span><br><span class=\"line\">NAME                                 DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class=\"line\">centos                               The official build of CentOS.                   1034      [OK]</span><br><span class=\"line\">ansible/centos7-ansible              Ansible on Centos7                              43                   [OK]</span><br><span class=\"line\">tutum/centos                         Centos image with SSH access. For the root...   13                   [OK]</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>没有 <code>/</code> 的镜像说明来自顶层的官方镜像。</p>\n<p>可以使用 <code>docker pull &lt;imagename&gt;</code> 下载所需要的镜像。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull centos</span><br><span class=\"line\">latest: Pulling from centos</span><br><span class=\"line\">6941bfcbbfca: Pull complete</span><br><span class=\"line\">41459f052977: Pull complete</span><br><span class=\"line\">fd44297e2ddb: Already exists</span><br><span class=\"line\">centos:latest: The image you are pulling has been verified. Important: image verification is a tech preview feature and should not be relied on to provide security.</span><br><span class=\"line\">Digest: sha256:d601d3b928eb2954653c59e65862aabb31edefa868bd5148a41fa45004c12288</span><br><span class=\"line\">Status: Downloaded newer image for centos:latest</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看源标签\"><a href=\"#查看源标签\" class=\"headerlink\" title=\"查看源标签\"></a>查看源标签</h4><p>Docker Hub 的 “Tags” 显示了可以获取的版本和相关联的镜像大小。镜像大小是镜像和累积的所有父镜像之和，也是当你执行 <code>docker save</code> 时创建的 Tar 文件的大小。</p>\n<h4 id=\"创建新仓库\"><a href=\"#创建新仓库\" class=\"headerlink\" title=\"创建新仓库\"></a>创建新仓库</h4><p>有 xxxx 的命名规则，文档都有不再赘述，创建完成后就可以使用 <code>docker push</code> 来上传镜像。</p>\n<h4 id=\"上传镜像\"><a href=\"#上传镜像\" class=\"headerlink\" title=\"上传镜像\"></a>上传镜像</h4><p>在往 Docker Hub 上传镜像之前，你需要使用 Docker Hub 的用户名和仓库名来命名本地镜像。你可以通过使用特殊的 <code>:&lt;tag&gt;</code> 标签来往一个仓库添加多个镜像。如果不指明，则默认为 <code>latest</code>。</p>\n<p>可以使用 <code>docker build -t &lt;hub-user&gt;/&lt;repo-name&gt;[:&lt;tag&gt;]</code> 在构建镜像时命名，使用 <code>docker tag &lt;existing-image&gt; &lt;hub-user&gt;/&lt;repo-name&gt;[:&lt;tag&gt;]</code> 重命名已经存在的本地镜像，或使用 <code>docker commit &lt;exiting-container&gt; &lt;hub-user&gt;/&lt;repo-name&gt;[:&lt;tag&gt;]</code> 来提交更改。</p>\n<p>然后就可以上传镜像。</p>\n<pre><code>$ docker push &lt;hub-user&gt;/&lt;repo-name&gt;:&lt;tag&gt;\n</code></pre>\n<h4 id=\"省略其余\"><a href=\"#省略其余\" class=\"headerlink\" title=\"省略其余\"></a>省略其余</h4><p>省略其余还未了解及用到的部分，请自行查阅文档。</p>\n<h3 id=\"自动构建\"><a href=\"#自动构建\" class=\"headerlink\" title=\"自动构建\"></a>自动构建</h3><p>有其优点，当然也有其缺点，大体上就是通过链接到 GitHub 或是 Bitbucket 然后再使用。虽然使用过这两个 git 的管理工具，但是初入 Docker 暂不打算先了解自动构建，后期有精力或有需求再看。</p>\n<h3 id=\"继续省略其余\"><a href=\"#继续省略其余\" class=\"headerlink\" title=\"继续省略其余\"></a>继续省略其余</h3><p>个人认为的入门级应用就这些，其余的不再赘述，有需要的可以自行查看官方文档。</p>\n",
            "tags": [
                "Docker"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/03/06/proxy-with-wget/",
            "url": "https://blog.timerever.tk/2017/03/06/proxy-with-wget/",
            "title": "wget 使用代理",
            "date_published": "2017-03-06T10:47:10.000Z",
            "content_html": "<p><code>wget</code> 是 Linux 下常用的一个命令行下载工具。由于此次需要下载的文件在国外，所以速度缓慢，然后就想到使用代理进行下载。使用 <code>--help</code> 查询了一番，发现并没有可以设置代理的地方，倒是有不走代理的选项，汗。</p>\n<p>因为是在终端使用，所以并不想使用全局代理，上网搜寻了一下关于 <code>wget</code> 使用代理的使用方法。</p>\n<ol>\n<li><p>修改 .wgetrc 文件</p>\n<p> .wgetrc 文件位于 $HOME 目录下，修改添加代理设置。</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi .wgetrc</span><br><span class=\"line\">use_proxy=on</span><br><span class=\"line\">http_proxy=http://ip:port</span><br></pre></td></tr></table></figure></li>\n</ol>\n<span id=\"more\"></span>\n\n<ol start=\"2\">\n<li><p>设置环境变量</p>\n<p> 通过环境变量使终端使用代理。</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ export http_proxy=&quot;ip:port&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>wget</code> 的 <code>-e</code> 选项</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget --help</span><br><span class=\"line\">GNU Wget 1.15, a non-interactive network retriever.</span><br><span class=\"line\">Usage: wget [OPTION]... [URL]...</span><br><span class=\"line\"></span><br><span class=\"line\">Mandatory arguments to long options are mandatory for short options too.</span><br><span class=\"line\"></span><br><span class=\"line\">Startup:</span><br><span class=\"line\">  -V,  --version           display the version of Wget and exit.</span><br><span class=\"line\">  -h,  --help              print this help.</span><br><span class=\"line\">  -b,  --background        go to background after startup.</span><br><span class=\"line\">  -e,  --execute=COMMAND   execute a `.wgetrc&#x27;-style command.</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<p> 由此可见 <code>wget</code> 的 <code>-e</code> 选项同方法二使用了 http_proxy。</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -e &quot;http_proxy=http://ip:port&quot;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>由于想使用非全局代理，所以方法三适用。</p>\n",
            "tags": [
                "Linux",
                "wget"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/03/06/docker-learning-trip-3/",
            "url": "https://blog.timerever.tk/2017/03/06/docker-learning-trip-3/",
            "title": "Docker 学习之旅（三）：创建基础镜像",
            "date_published": "2017-03-06T02:37:56.000Z",
            "content_html": "<p>基础镜像，官方说法是 <strong>base image</strong>，官方解释为“ <strong>An image that has no parent is a base image.</strong> ”也就是说，没有父镜像的镜像就是基础镜像，我们要做的就是创建一个基础镜像。</p>\n<p>文档链接：<a href=\"https://docs.docker.com/engine/userguide/eng-image/baseimages/\">https://docs.docker.com/engine/userguide/eng-image/baseimages/</a></p>\n<span id=\"more\"></span>\n\n<h3 id=\"使用-tar-创建一个完整镜像\"><a href=\"#使用-tar-创建一个完整镜像\" class=\"headerlink\" title=\"使用 tar 创建一个完整镜像\"></a>使用 <code>tar</code> 创建一个完整镜像</h3><p>执行 <code>$ docker run raring cat /etc/lsb-release</code> 命令时报错且解决无果，可能 Debian 的发行版和 Ubuntu还是存在些许差异。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run raring cat /etc/lsb-release</span><br><span class=\"line\">container_linux.go:247: starting container process caused &quot;exec: \\&quot;cat\\&quot;: executable file not found in $PATH&quot;</span><br><span class=\"line\">docker: Error response from daemon: oci runtime error: container_linux.go:247: starting container process caused &quot;exec: \\&quot;cat\\&quot;: executable file not found in $PATH&quot;.</span><br><span class=\"line\">ERRO[0000] error getting events from daemon: net/http: request canceled</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-scratch-创建一个简单的基础镜像\"><a href=\"#使用-scratch-创建一个简单的基础镜像\" class=\"headerlink\" title=\"使用 scratch 创建一个简单的基础镜像\"></a>使用 scratch 创建一个简单的基础镜像</h3><p>当 <code>scratch</code> 在 Docker 的库中出现时，你不能 pull、run 或者在其他镜像标记这个名字，但是你可以在你的 <code>Dockerfile</code> 文件中引用它。</p>\n<p>例如，使用 <code>scratch</code> 创建一个最小化的容器：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> scratch</span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\"> hello /</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">&quot;/hello&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>然后你可以在当前目录使用 <code>docker build --tag hello .</code> 来构建容器。在这里需要 hello 文件，你可以从 Docker Github 的 <a href=\"https://github.com/docker-library/hello-world/blob/master/hello.c\">示例源代码</a> 中下载并编译，过程如下。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi Dockerfile</span><br><span class=\"line\">$ wget https://raw.githubusercontent.com/docker-library/hello-world/master/hello.c</span><br><span class=\"line\">$ gcc -o hello -static -nostartfiles hello.c</span><br><span class=\"line\">$ docker build --tag hello .</span><br><span class=\"line\">$ docker run hello</span><br><span class=\"line\"></span><br><span class=\"line\">Hello from Docker!</span><br><span class=\"line\">This message shows that your installation appears to be working correctly.</span><br><span class=\"line\"></span><br><span class=\"line\">To generate this message, Docker took the following steps:</span><br><span class=\"line\"> 1. The Docker client contacted the Docker daemon.</span><br><span class=\"line\"> 2. The Docker daemon pulled the <span class=\"string\">&quot;hello-world&quot;</span> image from the Docker Hub.</span><br><span class=\"line\"> 3. The Docker daemon created a new container from that image <span class=\"built_in\">which</span> runs the</span><br><span class=\"line\">    executable that produces the output you are currently reading.</span><br><span class=\"line\"> 4. The Docker daemon streamed that output to the Docker client, <span class=\"built_in\">which</span> sent it</span><br><span class=\"line\">    to your terminal.</span><br><span class=\"line\"></span><br><span class=\"line\">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class=\"line\"> $ docker run -it ubuntu bash</span><br><span class=\"line\"></span><br><span class=\"line\">Share images, automate workflows, and more with a free Docker ID:</span><br><span class=\"line\"> https://cloud.docker.com/</span><br><span class=\"line\"></span><br><span class=\"line\">For more examples and ideas, visit:</span><br><span class=\"line\"> https://docs.docker.com/engine/userguide/</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Docker"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/03/05/docker-learning-trip-2/",
            "url": "https://blog.timerever.tk/2017/03/05/docker-learning-trip-2/",
            "title": "Docker 学习之旅（二）：Dockerfile 命令",
            "date_published": "2017-03-05T12:37:20.000Z",
            "content_html": "<p>本篇是对 <code>Dockerfile</code> 文件的一个介绍，在了解完相关知识后，可以用 <code>Dockerfile</code> 文件创建一个简单的镜像。</p>\n<h3 id=\"参考和推荐\"><a href=\"#参考和推荐\" class=\"headerlink\" title=\"参考和推荐\"></a>参考和推荐</h3><p>文档链接：<a href=\"https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#general-guidelines-and-recommendations\">https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#general-guidelines-and-recommendations</a></p>\n<p>更详细的 <code>Dockerfile</code> 参考链接：<a href=\"https://docs.docker.com/engine/reference/builder/\">https://docs.docker.com/engine/reference/builder/</a>，同样适用于下文。</p>\n<ul>\n<li>容器的生命应该是短暂的</li>\n<li>可以使用 <code>.dockerignore</code> 文件来排除文件</li>\n<li>避免安装不需要的包</li>\n<li>每个容器都应该只有一个关注点</li>\n<li>最小化层的数量</li>\n<li>整理多行参数</li>\n<li>Build 缓存</li>\n</ul>\n<p>都是一些阅读理解的内容，详细见官方文档。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"Dockerfile-指南\"><a href=\"#Dockerfile-指南\" class=\"headerlink\" title=\"Dockerfile 指南\"></a>Dockerfile 指南</h3><p>文档链接：<a href=\"https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#the-dockerfile-instructions\">https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#the-dockerfile-instructions</a></p>\n<p>仅列出各命令简单用法，详细请参照上文列出的官方详细文档。</p>\n<h4 id=\"FROM\"><a href=\"#FROM\" class=\"headerlink\" title=\"FROM\"></a>FROM</h4><p>你可以在现有镜像的基础上构建自己的镜像。</p>\n<pre><code>FROM &lt;image&gt;\n</code></pre>\n<p>Or</p>\n<pre><code>FROM &lt;image&gt;:&lt;tag&gt;\n</code></pre>\n<p>Or</p>\n<pre><code>FROM &lt;image&gt;@&lt;digest&gt;\n</code></pre>\n<h4 id=\"LABEL\"><a href=\"#LABEL\" class=\"headerlink\" title=\"LABEL\"></a>LABEL</h4><p><code>LABEL</code> 命令用来给镜像添加元数据，可以更好地管理镜像等。</p>\n<p>用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span><br></pre></td></tr></table></figure>\n\n<p>可在一个命令中使用多个键值对，也可只使用一个。若镜像是以其他镜像 <code>FROM</code> 为基础的，相同的标签将会覆盖原有标签。</p>\n<h4 id=\"RUN\"><a href=\"#RUN\" class=\"headerlink\" title=\"RUN\"></a>RUN</h4><p>RUN指令将在当前映像之上的新层中执行任何命令，并提交执行结果，这个提交的的执行后的镜像将被 <code>Dockerfile</code> 的其余步骤使用。</p>\n<p><code>RUN</code> 指令有两种形式：</p>\n<ul>\n<li><code>RUN &lt;command&gt;</code>（shell 形式，命令在 shell 中运行，对于 Linux 默认为 &#x2F;bin&#x2F;sh -c，而对于 Windows 默认为 cmd &#x2F;S &#x2F;C）</li>\n<li><code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code>（执行形式）</li>\n</ul>\n<h4 id=\"APT-GET\"><a href=\"#APT-GET\" class=\"headerlink\" title=\"APT-GET\"></a>APT-GET</h4><p>这可能是 <code>RUN</code> 命令的最多使用情况，但是你应该避免使用 <code>RUN apt-get upgrade</code> 或是 <code>dist-upgrade</code>，因为许多“必要”的包将不会在无特权的容器内部被升级。如果一个镜像所包含的基础镜像过期，请联系管理员。</p>\n<p>记得将 <code>RUN apt-get update</code> 命令与 <code>apt-get install</code> 命令放在同一个 <code>RUN</code> 声明中，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y \\</span><br><span class=\"line\">    package-bar \\</span><br><span class=\"line\">    package-baz \\</span><br><span class=\"line\">    package-foo</span><br></pre></td></tr></table></figure>\n\n<p>在一个单独的 <code>RUN</code> 声明中使用 <code>apt-get update</code> 将会导致缓存问题和之后的 <code>apt-get install</code> 命令失败。</p>\n<h4 id=\"使用管道\"><a href=\"#使用管道\" class=\"headerlink\" title=\"使用管道\"></a>使用管道</h4><p>有一些 <code>RUN</code> 命令使用和 Linux 中同样的管道来将一个命令的输入导入到另一个命令当中，符号同样为 <code>|</code>。</p>\n<h4 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h4><p><code>CMD</code> 命令的主要作用是给可执行容器提供默认的参数。</p>\n<p><code>CMD</code> 命令有三种形式：</p>\n<ul>\n<li><code>CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code>（执行形式，最推荐的形式）</li>\n<li><code>CMD [&quot;param1&quot;,&quot;param2&quot;]</code>（入口点的默认参数）</li>\n<li><code>CMD command param1 param2</code>（shell 形式）</li>\n</ul>\n<p>在一个 <code>Dockerfile</code> 文件中，只能有一个 <code>CMD</code> 指令，如果你列出超过一个的 <code>CMD</code> 指令，只有最后一条会起作用。</p>\n<h4 id=\"EXPOSE\"><a href=\"#EXPOSE\" class=\"headerlink\" title=\"EXPOSE\"></a>EXPOSE</h4><p><code>EXPOSE</code> 命令用于开放容器的内部端口，支持环境变量（例如，<code>MYSQL_PORT_3306_TCP</code>）。但是<code>EXPOSE</code> 命令并不能使内部端口对宿主可见，你必须使用 <code>-p</code> 命令来开放特定端口或是使用 <code>-P</code> 命令来开放所有的 <code>EXPOSE</code> 的端口。</p>\n<pre><code>EXPOSE &lt;port&gt; [&lt;port&gt;...]\n</code></pre>\n<h4 id=\"ENV\"><a href=\"#ENV\" class=\"headerlink\" title=\"ENV\"></a>ENV</h4><p><code>ENV</code> 命令用来更新 <code>PATH</code> 环境变量。</p>\n<pre><code>ENV &lt;key&gt; &lt;value&gt;\nENV &lt;key&gt;=&lt;value&gt; ...\n</code></pre>\n<p>这是<code>ENV</code> 命令的两种使用形式，推荐使用第二种形式。</p>\n<h4 id=\"ADD-or-COPY\"><a href=\"#ADD-or-COPY\" class=\"headerlink\" title=\"ADD or COPY\"></a>ADD or COPY</h4><p><code>ADD</code> 和 <code>COPY</code> 命令拥有相似的功能，通常而言，<code>COPY</code> 因其更加透明而被推荐。但是 <code>COPY</code> 只能拷贝本地文件而 <code>ADD</code> 拥有更多的特性（比如本地 tar 提取和远程 URL 支持）。</p>\n<pre><code>ADD/COPY &lt;src&gt;... &lt;dest&gt;\nADD/COPY [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]\n</code></pre>\n<p>省略众多详细介绍，详见文档。</p>\n<h4 id=\"ENTRYPOINT\"><a href=\"#ENTRYPOINT\" class=\"headerlink\" title=\"ENTRYPOINT\"></a>ENTRYPOINT</h4><pre><code>ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]（执行形式，推荐）\nENTRYPOINT command param1 param2（shell 形式）\n</code></pre>\n<p><code>ENTRYPOINT</code> 命令允许你配置容器使其变成可执行容器。</p>\n<h4 id=\"USER\"><a href=\"#USER\" class=\"headerlink\" title=\"USER\"></a>USER</h4><p><code>USER</code> 可以使容器改变运行用户，通过在 <code>Dockerfile</code> 文件中使用类似 <code>RUN groupadd -r postgres &amp;&amp; useradd -r -g postgres postgres</code> 的命令来创建用户和组。</p>\n<h4 id=\"WORKDIR\"><a href=\"#WORKDIR\" class=\"headerlink\" title=\"WORKDIR\"></a>WORKDIR</h4><pre><code>WORKDIR /path/to/workdir\n</code></pre>\n<p><code>WORKDIR</code> 指令可以设置 <code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code>、<code>COPY</code> 和 <code>ADD</code> 指令的工作目录。即使后续并不会使用到 <code>WORKDIR</code> 指令，它仍然会被创建。</p>\n<p><code>WORKDIR</code> 指令可在一个 <code>Dockerfile</code> 文件中使用多次。如果给定一个相对路径，那么它会相对于之前的 <code>WORKDIR</code> 指令。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WORKDIR /a</span><br><span class=\"line\">WORKDIR b</span><br><span class=\"line\">WORKDIR c</span><br><span class=\"line\">RUN pwd</span><br></pre></td></tr></table></figure>\n\n<p><code>pwd</code> 的输出将为 <code>/a/b/c</code>。</p>\n<p><code>WORKDIR</code> 指令也可解析在之前通过 <code>ENV</code> 指令设置的环境变量。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENV DIRPATH /path</span><br><span class=\"line\">WORKDIR $DIRPATH/$DIRNAME</span><br><span class=\"line\">RUN pwd</span><br></pre></td></tr></table></figure>\n\n<p><code>pwd</code> 的输出将为 <code>/path/$DIRNAME</code>。</p>\n<h4 id=\"ONBUILD\"><a href=\"#ONBUILD\" class=\"headerlink\" title=\"ONBUILD\"></a>ONBUILD</h4><pre><code>ONBUILD [INSTRUCTION]\n</code></pre>\n<p><code>ONBUILD</code> 命令在当前 <code>Dockerfile</code> 文件构建完成后执行，也就是该镜像最为其他镜像的父镜像时。它会在子镜像的 <code>Dockerfile</code> 文件中的 <code>FROM</code> 指令后立即被执行。</p>\n",
            "tags": [
                "Docker",
                "Dockerfile"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/03/03/docker-learning-trip-1/",
            "url": "https://blog.timerever.tk/2017/03/03/docker-learning-trip-1/",
            "title": "Docker 学习之旅（一）：Docker 的安装",
            "date_published": "2017-03-03T02:50:38.000Z",
            "content_html": "<blockquote>\n<p>所以之前弄得都差不多算是白弄了，一切还需要从头开始。</p>\n</blockquote>\n<p>由于使用的环境为 Ubuntu 的 16.10 最新稳定版本，所以打开 Ubuntu 的文档进行安装，以下命令全部来源于官方文档。</p>\n<p>为了防止惨剧的再次发生，记录下此时的版本，页面右上角显示为 Docker 17.03。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"卸载旧版本\"><a href=\"#卸载旧版本\" class=\"headerlink\" title=\"卸载旧版本\"></a>卸载旧版本</h3><p>文档链接：<a href=\"https://docs.docker.com/engine/installation/linux/ubuntu/#uninstall-old-versions\">https://docs.docker.com/engine/installation/linux/ubuntu/#uninstall-old-versions</a></p>\n<p>因为安装了旧版本的 Docker，所以需要先卸载老版本，当然没有安装过就不需要进行这一步了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get remove docker docker-engine</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-Docker\"><a href=\"#安装-Docker\" class=\"headerlink\" title=\"安装 Docker\"></a>安装 Docker</h3><p>文档链接：<a href=\"https://docs.docker.com/engine/installation/linux/ubuntu/#install-docker\">https://docs.docker.com/engine/installation/linux/ubuntu/#install-docker</a></p>\n<p>因为 Docker 是有 Ubuntu 的源的，所以直接采用 apt 安装，方便快捷。</p>\n<p>之前忘记说了，此次更新 Docker 有了两个版本，分别是 Docker CE 和 Docker EE。从名字其实就可以大概猜出，一个是普通版（其实是社区版）一个是企业版。所以，当然是选择社区版，而且官方提到了社区版和企业版的安装是有所不同的，在此只记录社区版的安装。</p>\n<h4 id=\"添加源\"><a href=\"#添加源\" class=\"headerlink\" title=\"添加源\"></a>添加源</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install \\</span><br><span class=\"line\">    apt-transport-https \\</span><br><span class=\"line\">    ca-certificates \\</span><br><span class=\"line\">    curl \\</span><br><span class=\"line\">    software-properties-common</span><br><span class=\"line\">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class=\"line\">$ sudo apt-key fingerprint 0EBFCD88</span><br><span class=\"line\">$ sudo add-apt-repository \\</span><br><span class=\"line\">   <span class=\"string\">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\</span></span><br><span class=\"line\"><span class=\"string\">   <span class=\"subst\">$(lsb_release -cs)</span> \\</span></span><br><span class=\"line\"><span class=\"string\">   stable&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>sudo apt-key fingerprint 0EBFCD88</code> 是用来验证源的 key 信息是否匹配，正确的信息应该为 <code>9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88</code>。</p>\n<p>这边使用的是 <code>stable</code> 版本，若要使用更新更快的 <code>edge</code> 版本，只需在最后一行的 <code>stable</code> 后面添加 <code>edge</code> 即可。对于这两个版本，官方解释如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Docker CE gives you the option to run stable or edge builds.</span><br><span class=\"line\">* Stable builds are released once per quarter.</span><br><span class=\"line\">* Edge builds are released once per month.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装-Docker-1\"><a href=\"#安装-Docker-1\" class=\"headerlink\" title=\"安装 Docker\"></a>安装 Docker</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure>\n\n<p>这样默认安装的总是最新版本的 Docker ，如果你想安装特定版本的 Docker ，可以使用 <code>sudo apt-get install docker-ce=&lt;VERSION&gt;</code> ，使用 <code>apt-cache madison docker-ce</code> 来显示可以安装的 Docker 版本。</p>\n<p>可以通过运行 <code>hello-world</code> 镜像来确认已将 Docker CE 正确安装。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更新-Docker\"><a href=\"#更新-Docker\" class=\"headerlink\" title=\"更新 Docker\"></a>更新 Docker</h4><p>首先运行 <code>sudo apt-get update</code>，然后根据安装指南选择想要安装的新版本。</p>\n<h3 id=\"Linux-下的可选安装步骤\"><a href=\"#Linux-下的可选安装步骤\" class=\"headerlink\" title=\"Linux 下的可选安装步骤\"></a>Linux 下的可选安装步骤</h3><p>文档链接：<a href=\"https://docs.docker.com/engine/installation/linux/linux-postinstall/\">https://docs.docker.com/engine/installation/linux/linux-postinstall/</a></p>\n<p>此处只列出个人所使用的可选安装。</p>\n<h4 id=\"使用非-root-用户管理-Docker\"><a href=\"#使用非-root-用户管理-Docker\" class=\"headerlink\" title=\"使用非 root 用户管理 Docker\"></a>使用非 root 用户管理 Docker</h4><p>通过文档我们得知 <code>docker</code> 的守护进程绑定的是 Unix socket，默认情况下该 Unix socket 是属于 root 用户，其他用户只能通过 <code>sudo</code> 进行访问，而 <code>docker</code> 的守护进程一直是由 root 用户运行的。所以如果想不使用 <code>sudo</code> 来使用 Docker，可以把用户添加到 <code>docker</code> 用户组。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo groupadd docker # 此处已经存在docker组可不执行操作</span><br><span class=\"line\">$ sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure>\n\n<p>注销重新登入系统来使用户组更新。</p>\n<p>通过不加 <code>sudo</code> 命令的 <code>docker</code> 命令来验证。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使-Docker-开机自启\"><a href=\"#使-Docker-开机自启\" class=\"headerlink\" title=\"使 Docker 开机自启\"></a>使 Docker 开机自启</h4><p>对于大多数的发行版本（RHEL, CentOS, Fedora, Ubuntu 16.04 and higher）使用 <code>systemd</code> 来管理开机自启动的服务，Ubuntu 14.10 及以下版本使用 <code>upstart</code>。</p>\n<ul>\n<li><code>systemd</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl enable docker # 开启自启动</span><br><span class=\"line\">$ sudo systemctl disable docker # 关闭自启动</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>upstart</code></li>\n</ul>\n<p>Docker 自动使用 <code>upstart</code> 配置自启动，通过以下命令来禁用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo manual | sudo tee /etc/init/docker.override</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>chkconfig</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo chkconfig docker on</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置-HTTP-代理\"><a href=\"#设置-HTTP-代理\" class=\"headerlink\" title=\"设置 HTTP 代理\"></a>设置 HTTP 代理</h4><p>因为 Docker 的服务器在国外，所以直连的速度很慢，就需要用国内的镜像或者使用 HTTP 代理，这里选择的是使用 HTTP 代理。该文档不在上面的可选安装步骤里，在后面的 Admin Guide 里面，链接：<a href=\"https://docs.docker.com/engine/admin/systemd/#http-proxy\">https://docs.docker.com/engine/admin/systemd/#http-proxy</a>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p /etc/systemd/system/docker.service.d</span><br><span class=\"line\">$ vi /etc/systemd/system/docker.service.d/http-proxy.conf</span><br></pre></td></tr></table></figure>\n\n<p>添加下列内容，按实际情况修改。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Service]</span><br><span class=\"line\">Environment=&quot;HTTP_PROXY=http://proxy.example.com:80/&quot;</span><br></pre></td></tr></table></figure>\n\n<p>或者使用以下内容设置不通过代理的地址。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Environment=&quot;HTTP_PROXY=http://proxy.example.com:80/&quot; &quot;NO_PROXY=localhost,127.0.0.1,docker-registry.somecorporation.com&quot;</span><br></pre></td></tr></table></figure>\n\n<p>然后继续操作完成配置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl daemon-reload</span><br><span class=\"line\">$ systemctl show --property=Environment docker # 验证配置是否已经重载，将显示上面配置的信息</span><br><span class=\"line\">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Docker"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/03/02/docker-learning-trip-0/",
            "url": "https://blog.timerever.tk/2017/03/02/docker-learning-trip-0/",
            "title": "Docker 学习之旅（零）：出师不利",
            "date_published": "2017-03-02T13:51:49.000Z",
            "content_html": "<p>Docker——这是一个自出现以来就发展迅猛并获得成功的引擎。自从选择这个方向学习以来，一直在各个地方看到这个名词，但也只是大概了解到这是一个一般企业才会采用的东西。</p>\n<p>寒假放假前的课程设计，邀请了企业的人拿来了企业的真实项目来让我们学习，有幸在课余时间与主管技术的老师咨询讨论了一下。其中有一个话题就说到了 Docker，也是符合之前自己所想，老师也是说，像我们平时自己用，拿自己电脑跑或者租个 vps 什么的也就够了，也是用不上这种东西，不过从交谈中也大概了解到了应用 Docker 的优势，比如统一测试环境，比如秒级启动随时恢复等等等等。</p>\n<p>秉承着热爱计算机相关的一切的原则，还是决定先大概看一下这个东西，虽然可能实用性真的接近于零，不过就像自己选择这个专业一样，不是出于为了找工作或者怎样怎样的功利的心态，而是所谓的，真的是“热爱学习”。</p>\n<p>所以作为一只准程序猿，那么要做的第一件事便是打开官网寻找官方文档（所谓程序员必会通用技能），然后就是阅读英文文档（另一项必会技能）。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>使用的环境是 Ubuntu 的 16.10，默认的源里有 Docker，只需按照官网手册就可轻松安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install \\</span><br><span class=\"line\">    apt-transport-https \\</span><br><span class=\"line\">    ca-certificates \\</span><br><span class=\"line\">    curl \\</span><br><span class=\"line\">    software-properties-common</span><br><span class=\"line\">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class=\"line\">$ sudo apt-key fingerprint 0EBFCD88</span><br><span class=\"line\">$ sudo add-apt-repository \\</span><br><span class=\"line\">   <span class=\"string\">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\</span></span><br><span class=\"line\"><span class=\"string\">   <span class=\"subst\">$(lsb_release -cs)</span> \\</span></span><br><span class=\"line\"><span class=\"string\">   stable&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>等等，怎么有些不对，记得以前看到的源的指纹长度比这还要长……</p>\n<p>还以为是找错了文档，结果打开历史记录一看原来真的是文档改变了，最显而易见的就是网站的 favicon 颜色变深了，也确定了文档就是在今天中午或下午更新了（明明早上起来还看过的，摔！）。</p>\n<p>所以看来是写不成第一篇了，之前被称作 docker 和 docker-engine 的东西已经成为了旧版，现在出现的是 Docker CE 和 Docker EE，文档的开始已经让卸载旧版了。不过可能是因为刚刚更新，Docker CE 和 Docker EE 所指向的链接还不能打开，看来真正的旅程应该是等着文档补全然后再开始了（虽然知道“学习之旅”的翻译是中式英语但是真的找不到合适的翻译了）。</p>\n",
            "tags": [
                "Docker"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/03/01/merge-multiple-vmdk's-into-single-vmdk/",
            "url": "https://blog.timerever.tk/2017/03/01/merge-multiple-vmdk's-into-single-vmdk/",
            "title": "合并多个 vmdk 文件",
            "date_published": "2017-03-01T04:07:10.000Z",
            "content_html": "<p>这是一个上古时代的虚拟机，自从换电脑以来就一直跟随我。虽然当初磁盘选择了单文件存储，然而由于众多快照的原因，又是好多 vmdk 的虚拟磁盘文件躺在硬盘中。因为好多快照都是之前已经被删除了，索性整理了一下虚拟机，并且将多个虚拟磁盘文件合并。</p>\n<p>上网寻找了一下解决方案，发现在一个大概是和虚拟化相关的、猜测是 wordpress 官方博客（猜测原因是因为该博客用的是 wordpress.com 的二级域名）的文章中找到了答案。</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p><a href=\"https://vmexpo.wordpress.com/2014/04/15/how-to-merge-multiple-vmdks-into-single-vmdk/comment-page-1/\">https://vmexpo.wordpress.com/2014/04/15/how-to-merge-multiple-vmdks-into-single-vmdk/comment-page-1/</a></p>\n</blockquote>\n<p>使用的是一个名为 vmware-vdiskmanager 的命令行工具，这个工具可以在 VMware Fusion 或是 VMware Workstation 中找到，所以如果使用的是 VMware Player，那么可以到 VMware 的网站（KB Article 1023856）下载然后放到 VMware Player 的安装路径下。</p>\n<p>接下来使用下面命令即可完成操作。</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vmware-vdiskmanager.exe -r &quot;待转换vmdk路径&quot; -t <span class=\"number\">0</span> &quot;新生成的vmdk文件路径&quot;</span><br></pre></td></tr></table></figure>\n\n<p>记得转换完成后，删除或处理掉原来的文件，将新生成的文件名改为原文件名，亦或可以删除虚拟机配置中的原有硬盘并新添转换后的硬盘。</p>\n<p>命令操作截图如下。</p>\n<img src=\"/2017/03/01/merge-multiple-vmdk's-into-single-vmdk/conversion-by-cmd.png\" class=\"\" title=\"操作截图\">\n\n<blockquote>\n<p>Virtual disk conversion successful.</p>\n</blockquote>\n<p>操作成功完成。</p>\n",
            "tags": [
                "VMware",
                "vmdk"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/02/27/frequently-used-commands-while-flashing-android/",
            "url": "https://blog.timerever.tk/2017/02/27/frequently-used-commands-while-flashing-android/",
            "title": "刷 CM 过程中对使用的常用刷机命令的记录",
            "date_published": "2017-02-27T10:01:17.000Z",
            "content_html": "<blockquote>\n<p>终于决定把手里这台荣耀6 刷成 CM，无奈华为只开源 4.4.4 的内核代码，只有 CM 11 的非官方包，哭。</p>\n</blockquote>\n<p>寻着 XDA 上开发者给的步骤给走，给了两个 rec 一个无法挂载内置储存卡然后没外置的选项（不过也是因为这个才有了本文），一个有问题直接手机进了救援模式，也是汗颜，索性自己手里有 rec 成功解决了。</p>\n<p>文中说把刷机包放到外置内存卡目录下，然后进入 rec 傻眼了并没有找到从外置内存卡安装刷机包的选项，于是无奈自己尝试用 adb 传送刷机包。</p>\n<p>至于为什么以前不怎么用 adb，主要是由于华为这机子很难从关机状态进入 fastboot，官方让插着 USB 线关机进入但是成功率不高，所以以前都是用论坛正好给出的脚本从开机状态进入，正好熟悉下 adb 记录于此。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"adb-命令\"><a href=\"#adb-命令\" class=\"headerlink\" title=\"adb 命令\"></a>adb 命令</h3><ul>\n<li><a href=\"https://developer.android.com/studio/command-line/adb.html\">官方文档</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ adb devices <span class=\"comment\"># 查询连接设备</span></span><br><span class=\"line\">$ adb install &lt;apkfile&gt; <span class=\"comment\"># 安装apk文件</span></span><br><span class=\"line\">$ adb uninstall &lt;package&gt; <span class=\"comment\"># 卸载软件</span></span><br><span class=\"line\">$ adb push foo.txt /sdcard/foo.txt <span class=\"comment\">#发送foo.txt文件</span></span><br><span class=\"line\">$ adb pull /sdcard/foo.txt foo.txt <span class=\"comment\">#传送foo.txt文件到本地</span></span><br><span class=\"line\">$ adb reboot <span class=\"comment\"># 重启</span></span><br><span class=\"line\">$ adb reboot recovery <span class=\"comment\"># 重启到recovery</span></span><br><span class=\"line\">$ adb reboot bootloader <span class=\"comment\"># 重启到fastboot</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"fastboot-命令\"><a href=\"#fastboot-命令\" class=\"headerlink\" title=\"fastboot 命令\"></a>fastboot 命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ fastboot flash boot boot.img <span class=\"comment\"># 刷入boot</span></span><br><span class=\"line\">$ fastboot flash recovery recovery.img <span class=\"comment\"># 同上，刷入recovery</span></span><br><span class=\"line\">......</span><br><span class=\"line\">$ fastboot reboot <span class=\"comment\"># 重启</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Android",
                "Huawei",
                "CyanogenMod"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/01/26/unused-jekyll-on-ubuntu/",
            "url": "https://blog.timerever.tk/2017/01/26/unused-jekyll-on-ubuntu/",
            "title": "记录未使用的 Jekyll 环境搭建",
            "date_published": "2017-01-26T03:37:45.000Z",
            "content_html": "<p>自从win10出现了 Bash on Ubuntu，自己便喜欢上了它，<del>甚至抛弃了虚拟机</del>（双系统还是存在的）。正好最近厌烦了 wp，毕竟太臃肿了，对于我这种没事闲的只会随便写写的没太大用处。</p>\n<p>然后就想起了自己沉睡已久的 github，不是因为 github 的免费且无限流量，主要是喜欢 github 上静态页面的简约，百度了下现在的方式，大多是 Jelly 来搭建的，不喜欢在 windows 上装各种软件的我就这么选择了 Bash on Ubuntu，这也是本文的来源。</p>\n<h3 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h3><ul>\n<li><a href=\"http://jekyll.com.cn/\">Jekyll 中文官网</a></li>\n<li><a href=\"http://www.ruby-lang.org/\">Ruby官网</a></li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><p>由于 Ubuntu 的仓库里各软件还是很多的，所以首先选择了 apt 方式安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install ruby</span><br><span class=\"line\">$ gem install jekyll</span><br></pre></td></tr></table></figure>\n\n<p>结果出错，ruby 版本太低，输入 ruby -v 查询后是1.95的版本，需求是2点多版本。</p>\n<h3 id=\"换用源码编译安装\"><a href=\"#换用源码编译安装\" class=\"headerlink\" title=\"换用源码编译安装\"></a>换用源码编译安装</h3><p>Linux 下安装软件，至少是我自己的通常思维是先用自带的包管理器安装，如果没有对应的软件包或者版本太低或有缺陷，通常会到官网选择编译安装。</p>\n<ul>\n<li>首先安装编译环境</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install build-essential cmake</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>然后下载源码编译安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://cache.ruby-lang.org/pub/ruby/2.4/ruby-2.4.0.tar.gz</span><br><span class=\"line\">$ tar -zxvf ruby-2.4.0.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> ruby-2.4.0</span><br><span class=\"line\">$ ./configure</span><br><span class=\"line\">$ make</span><br><span class=\"line\">$ sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>在修改 gem 源时出现错误，使用的是国内的 https 源，提示 openssl 有问题。然而系统是安有 openssl 的，而且编译的时候并没有看到有关 openssl 的配置（也有可能是我没有仔细看）。提示可以使用 http 的方式添加源，不过略微强迫症，于是宣告源码编译安装失败。</p>\n<h3 id=\"rvm-方式安装\"><a href=\"#rvm-方式安装\" class=\"headerlink\" title=\"rvm 方式安装\"></a>rvm 方式安装</h3><p>这也是在网上查到的第三种也是常见的最后一种安装方式，首先安装 rvm 然后用 rvm 安装 ruby。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -L https://get.rvm.io | bash -s stable</span><br><span class=\"line\">$ <span class=\"built_in\">source</span> ~/.rvm/scripts/rvm</span><br><span class=\"line\">$ rvm requirements</span><br><span class=\"line\">$ rvm install ruby</span><br><span class=\"line\">$ gem install jekyll</span><br></pre></td></tr></table></figure>\n\n<p>成功安装，安装的 ruby 版本为2.3.3。</p>\n",
            "tags": [
                "Linux",
                "Ubuntu",
                "Ruby",
                "Jekyll"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/01/25/my-first-article/",
            "url": "https://blog.timerever.tk/2017/01/25/my-first-article/",
            "title": "重新弄好后的第一篇文章",
            "date_published": "2017-01-25T07:30:11.000Z",
            "content_html": "<p>经历了一番挫折，最后算是成功地把 blog 重新（也是从新）部署在了 github，对自己而言还算深夜的时候终于写下了这些东西。</p>\n<p>看来我以后要重视下 github 上的项目了，至少不能这么乱糟糟了。</p>\n<p>还有，要学习下makedown语法了。</p>\n",
            "tags": []
        }
    ]
}