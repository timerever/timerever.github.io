{
    "version": "https://jsonfeed.org/version/1",
    "title": "A Blog • All posts by \"keycloak\" category",
    "description": "Just another blog.",
    "home_page_url": "https://blog.timerever.tk",
    "items": [
        {
            "id": "https://blog.timerever.tk/2022/01/05/keycloak-custom-idp/",
            "url": "https://blog.timerever.tk/2022/01/05/keycloak-custom-idp/",
            "title": "Keycloak 配置自定义社交帐号登录组件",
            "date_published": "2022-01-05T07:00:00.000Z",
            "content_html": "<p>由于 Keycloak 由红帽开发维护，所以其自带的 Social Identity Providers 都是国外的平台。现有需求对接公司 SSO，且由于国内 OAuth2 协议实现均不标准（公司的也是），所以无法使用 Keycloak 的 OpenID Connect 自定义接入，需要自己扩展 Identity Provider 实现。和国内的微信、钉钉、飞书等系统接入代码类似，但发现现有的接入组件没有实现 <code>UserAttributeMapper</code>，且版本变动，代码并不兼容，所以参考 Github 的实现进行开发。</p>\n<blockquote>\n<p>Keycloak 使用当前最新版：16.1.0</p>\n</blockquote>\n<h2 id=\"一、自定义-IdentityProvider\"><a href=\"#一、自定义-IdentityProvider\" class=\"headerlink\" title=\"一、自定义 IdentityProvider\"></a>一、自定义 IdentityProvider</h2><h3 id=\"0-引入依赖\"><a href=\"#0-引入依赖\" class=\"headerlink\" title=\"0. 引入依赖\"></a>0. 引入依赖</h3><p>引入 Keycloak 相关依赖，依赖版本要与使用的 Keycloak 版本保持一致，scope 使用 <code>provided</code> 即可。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.keycloak<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>keycloak-services<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;keycloak.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.keycloak<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>keycloak-server-spi<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;keycloak.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.keycloak<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>keycloak-server-spi-private<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;keycloak.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"0-5-自定义-IdentityProvider\"><a href=\"#0-5-自定义-IdentityProvider\" class=\"headerlink\" title=\"0.5. 自定义 IdentityProvider\"></a>0.5. 自定义 IdentityProvider</h3><p>由于后续需要，我们先新建一个 IdentityProvider 放在这里。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyIdentityProvider</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractOAuth2IdentityProvider</span>&lt;<span class=\"title\">OAuth2IdentityProviderConfig</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">implements</span> <span class=\"title\">SocialIdentityProvider</span>&lt;<span class=\"title\">OAuth2IdentityProviderConfig</span>&gt; </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyIdentityProvider</span><span class=\"params\">(KeycloakSession session, OAuth2IdentityProviderConfig config)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(session, config);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getDefaultScopes</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-自定义-IdentityProviderFactory\"><a href=\"#1-自定义-IdentityProviderFactory\" class=\"headerlink\" title=\"1. 自定义 IdentityProviderFactory\"></a>1. 自定义 IdentityProviderFactory</h3><p>我们先来看一下 GitHub 的 <code>GitHubIdentityProviderFactory</code>，很简单，有一个唯一的 <code>PROVIDER_ID</code>，然后 <code>getName</code> 方法返回了一个名称用于展示。</p>\n<p><img src=\"/keycloak-custom-idp-1.png\" alt=\"Github IdentityProviderFactory\"></p>\n<p>我们照着改一下即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyIdentityProviderFactoryFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractIdentityProviderFactory</span>&lt;<span class=\"title\">MyIdentityProvider</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">SocialIdentityProviderFactory</span>&lt;<span class=\"title\">MyIdentityProvider</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PROVIDER_ID = <span class=\"string\">&quot;my-idp&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;My IDP&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> MyIdentityProvider <span class=\"title\">create</span><span class=\"params\">(KeycloakSession session, IdentityProviderModel model)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyIdentityProvider(session, <span class=\"keyword\">new</span> OAuth2IdentityProviderConfig(model));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IdentityProviderModel <span class=\"title\">createConfig</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> OAuth2IdentityProviderConfig();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> PROVIDER_ID;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-自定义-IdentityProvider\"><a href=\"#2-自定义-IdentityProvider\" class=\"headerlink\" title=\"2. 自定义 IdentityProvider\"></a>2. 自定义 IdentityProvider</h3><h4 id=\"先定义并在构造时传入-Authorize、Token-及-Profile-的-Url。\"><a href=\"#先定义并在构造时传入-Authorize、Token-及-Profile-的-Url。\" class=\"headerlink\" title=\"先定义并在构造时传入 Authorize、Token 及 Profile 的 Url。\"></a>先定义并在构造时传入 Authorize、Token 及 Profile 的 Url。</h4><p><img src=\"/keycloak-custom-idp-2.png\" alt=\"AUTH URL\"></p>\n<h4 id=\"重写必须要求实现的抽象方法\"><a href=\"#重写必须要求实现的抽象方法\" class=\"headerlink\" title=\"重写必须要求实现的抽象方法\"></a>重写必须要求实现的抽象方法</h4><p>重写 <code>getDefaultScopes</code> 的抽象方法，返回自定义 SCOPE。</p>\n<h4 id=\"按需重写方法\"><a href=\"#按需重写方法\" class=\"headerlink\" title=\"按需重写方法\"></a>按需重写方法</h4><p>首先重写 <code>supportsExternalExchange</code>方法，写死返回 <code>true</code>。这个官方文档也没有找到注释，但是各实现类均这么重写的，所以这里我们也一起重写。</p>\n<p>由于我们继承了 <code>AbstractOAuth2IdentityProvider</code>，剩下的可以直接看抽象类的实现，按需重写非标准定义下无法使用默认实现调用的方法。</p>\n<p>比如我需要对应自己系统返回的 <code>User</code> 和 Keycloak 的 <code>User</code> 对象的字段映射关系，所以重写 <code>extractIdentityFromProfile</code> 方法。这个方法也是默认空实现，一定要重写的。我们可以直接拷贝 GitHub 的实现再进行修改，同时，如果我们需要额外存储用户信息，可以使用 <code>setUserAttribute</code> 方法进行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> BrokeredIdentityContext <span class=\"title\">extractIdentityFromProfile</span><span class=\"params\">(EventBuilder event, JsonNode profile)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    BrokeredIdentityContext user = <span class=\"keyword\">new</span> BrokeredIdentityContext(getJsonProperty(profile, <span class=\"string\">&quot;id&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    String username = getJsonProperty(profile, <span class=\"string\">&quot;login&quot;</span>);</span><br><span class=\"line\">    user.setUsername(username);</span><br><span class=\"line\">    user.setName(getJsonProperty(profile, <span class=\"string\">&quot;name&quot;</span>));</span><br><span class=\"line\">    user.setEmail(getJsonProperty(profile, <span class=\"string\">&quot;email&quot;</span>));</span><br><span class=\"line\">    user.setIdpConfig(getConfig());</span><br><span class=\"line\">    user.setIdp(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    user.setUserAttribute(USER_ATTRIBUTE_EMPLOY_ID, getJsonProperty(profile, USER_ATTRIBUTE_EMPLOY_ID));</span><br><span class=\"line\"></span><br><span class=\"line\">    AbstractJsonUserAttributeMapper.storeUserProfileForMapper(user, profile, getConfig().getAlias());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-重写回调方法\"><a href=\"#3-重写回调方法\" class=\"headerlink\" title=\"3. 重写回调方法\"></a>3. 重写回调方法</h3><p>可以发现，我们之前重写的方法，都是接受到回调之后获取 token、获取用户信息的逻辑，如果我们的回调接口传参也不是标准实现的话，那么我们可以重写回调方法。</p>\n<h4 id=\"自定义-Endpoint\"><a href=\"#自定义-Endpoint\" class=\"headerlink\" title=\"自定义 Endpoint\"></a>自定义 Endpoint</h4><p>编写自定义 Endpoint 类，继承 <code>AbstractOAuth2IdentityProvider</code> 内部 <code>Endpoint</code> 类。然后重写 <code>authResponse</code> 方法，自定义接收参数，然后仿照默认实现，通过 <code>authorizationCode</code> 换取用户信息并通过 <code>callback.authenticated(federatedIdentity)</code> 返回。</p>\n<h4 id=\"注册自定义-Endpoint\"><a href=\"#注册自定义-Endpoint\" class=\"headerlink\" title=\"注册自定义 Endpoint\"></a>注册自定义 Endpoint</h4><p>重写 <code>AbstractOAuth2IdentityProvider</code> 的 <code>callback</code> 方法，返回自定义 Endpoint。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">callback</span><span class=\"params\">(RealmModel realm, AuthenticationCallback callback, EventBuilder event)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyEndpoint(callback, realm, event);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-注册-IdentityProviderFactory\"><a href=\"#4-注册-IdentityProviderFactory\" class=\"headerlink\" title=\"4. 注册 IdentityProviderFactory\"></a>4. 注册 IdentityProviderFactory</h3><p>在 <code>resources</code> 文件夹下，新建 <code>MEAT-INF</code> 文件夹，并在其下面建立 <code>services</code> 文件。新增 <code>org.keycloak.broker.social.SocialIdentityProviderFactory</code> 文件，在里面直接填写 <code>MyIdentityProviderFactory</code> 的全限定类名即可。</p>\n<p><img src=\"/keycloak-custom-idp-3.png\" alt=\"注册 IdentityProviderFactory\"></p>\n<hr>\n<p>大体流程就是这样，OAuth2 认证后回调默认的 <code>EndPoint</code> 类的 <code>authResponse</code> 方法。如果大体流程标准，且回调参数标准，可以直接参照默认实现，按需重写所调用的 <code>IdentityProvider</code> 方法；如果回调参数会流程不标准，则需要自定义 EndPoint 并进行注册，再重写 <code>authResponse</code> 方法。</p>\n<h2 id=\"二、自定义-IdentityProvider-配置页\"><a href=\"#二、自定义-IdentityProvider-配置页\" class=\"headerlink\" title=\"二、自定义 IdentityProvider 配置页\"></a>二、自定义 IdentityProvider 配置页</h2><blockquote>\n<p>在新建&#x2F;编辑 IdentityProvider 时，页面元素是可以配置的，我们可以按需增减页面需要填写的字段。</p>\n</blockquote>\n<p>首先打开 Keycloak 路径下的 <code>themes\\base\\admin\\resources\\partials\\</code> 文件夹，我们还是将 <code>realm-identity-provider-github.html</code> 及 <code>realm-identity-provider-github-ext.html</code> 复制并重命名为 <code>realm-identity-provider-my-idp.html</code> 及 <code>realm-identity-provider-my-idp-ext.html</code>。如果不需要自定义，那么保持原样即可。如果需要修改页面字段展示，打开 <code>realm-identity-provider-my-idp.html</code> 文件，将文件内容替换为 <code>realm-identity-provider-social.html</code> 文件的内容，然后再对其进行修改即可。我们可以看到，默认页面就是引用了这个文件的内容。</p>\n<h2 id=\"三、部署-jar-文件\"><a href=\"#三、部署-jar-文件\" class=\"headerlink\" title=\"三、部署 jar 文件\"></a>三、部署 jar 文件</h2><p><strong>以 standalone 模式为例：</strong></p>\n<p>将打包后的 jar 文件复制到 <code>standalone\\deployments\\</code> 文件夹，不需要重启服务，Keycloak 会自动热部署，并在同级目录生成 <code>文件名.deployed</code> 文件。</p>\n<p>如果后续调用时出现 问题，可以参考 <a href=\"https://stackoverflow.com/questions/57778240/noclassdeffounderror-in-a-provider-jar-when-using-a-class-from-org-keycloak-auth\">NoClassDefFoundError in a provider jar</a> 在 <code>maven-jar-plugin</code> 插件配置依赖即可。</p>\n<h2 id=\"四、使用自定义-IDP\"><a href=\"#四、使用自定义-IDP\" class=\"headerlink\" title=\"四、使用自定义 IDP\"></a>四、使用自定义 IDP</h2><p>回到 Keycloak 后台，右上角点击 <code>Server Info</code>，切到 <code>Providers</code> Tab，如果在 <code>social</code> 栏看到了 <code>my-idp</code>（即上面定义的 provider id），说明部署成功，在 Identity Providers 后台正常新增即可。</p>\n<p><img src=\"/keycloak-custom-idp-4.png\" alt=\"展示出了 my-idp\"></p>\n<h2 id=\"五、自定义-UserAttributeMapper\"><a href=\"#五、自定义-UserAttributeMapper\" class=\"headerlink\" title=\"五、自定义 UserAttributeMapper\"></a>五、自定义 UserAttributeMapper</h2><p>由于之前我们需要额外储存用户信息，所以在重写 <code>extractIdentityFromProfile</code> 方法时，使用了 <code>setUserAttribute</code> 方法设置自定义属性。但由于 Keycloak 是冗余的用户数据，我们希望用户每次登录后，都可以自动更新用户信息。我们当然可以在 IDP 的配置中设置 <code>Sync Mode</code> 为 <code>force</code> 来每次更新用户信息，但此时只会自动同步更新 User 中 Details Tab 下的基本信息，不会再次同步 Attributes。<br>正常我们就会想到，可以通过设置 IDP 的 Mappers 来进行属性的放置，结果就会发现，<code>Mapper Type</code> 只有三个 Hardcoded 开头的硬编码的 Mapper。所以为了能够重新使用 <code>Attribute Importer</code>，需要我们自定义一个 <code>UserAttributeMapper</code>。</p>\n<h3 id=\"1-自定义-UserAttributeMapper\"><a href=\"#1-自定义-UserAttributeMapper\" class=\"headerlink\" title=\"1. 自定义 UserAttributeMapper\"></a>1. 自定义 UserAttributeMapper</h3><p>仍然参考 GitHub 的 <code>GitHubUserAttributeMapper</code>，直接拷贝过来，将 <code>PROVIDER_ID</code> 改成自己的即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUserAttributeMapper</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractJsonUserAttributeMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PROVIDER_ID = <span class=\"string\">&quot;my-idp-user-attribute-mapper&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String[] cp = <span class=\"keyword\">new</span> String[] &#123; MyIdentityProviderFactory.PROVIDER_ID &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String[] getCompatibleProviders() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> cp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> PROVIDER_ID;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这我们也可以看到，Keycloak 是通过 <code>AbstractJsonUserAttributeMapper</code> 的 <code>getCompatibleProviders</code> 方法来控制 IDP 可选哪些 Mapper 的。</p>\n<h3 id=\"2-注册自定义-UserAttributeMapper\"><a href=\"#2-注册自定义-UserAttributeMapper\" class=\"headerlink\" title=\"2. 注册自定义 UserAttributeMapper\"></a>2. 注册自定义 UserAttributeMapper</h3><p>同之前注册 <code>IdentityProvider</code>，在 <code>META-INF/service/</code> 下新建 <code>org.keycloak.broker.provider.IdentityProviderMapper</code> 文件，并在其中填写我们自定义的 UserAttributeMapper 的全限定类名。<br>最后，别忘了重新打包部署，我们就可以继续在自定义的 IDP 中使用 <code>Attribute Importer</code> 了。</p>\n",
            "tags": [
                "Java",
                "Keycloak",
                "OAuth2",
                "SSO"
            ]
        }
    ]
}