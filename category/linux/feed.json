{
    "version": "https://jsonfeed.org/version/1",
    "title": "A Blog • All posts by \"linux\" category",
    "description": "Just another blog.",
    "home_page_url": "https://blog.timerever.tk",
    "items": [
        {
            "id": "https://blog.timerever.tk/2017/04/26/undefined-reference-to-pthread_create/",
            "url": "https://blog.timerever.tk/2017/04/26/undefined-reference-to-pthread_create/",
            "title": "对 “pthread_create” 未定义的引用",
            "date_published": "2017-04-26T15:01:27.000Z",
            "content_html": "<p>今天在对 Linux 多线程编程进行学习时，在编译代码时出现了问题。</p>\n<p>由于使用了 <code>pthread_create</code>, <code>pthread_join</code> 等函数，在使用 <code>gcc</code> 编译时，出现了 <strong>对 ‘pthread_create’ 未定义的引用</strong> 的错误，在上网查询后，得知 pthread 库不是 Linux 系统默认的库，所以在编译时需要添加 <code>-lpthread</code> 参数来使用 libpthread.a 库进行编译。</p>\n<pre><code># gcc -o pthread -lpthread pthread.c\n</code></pre>\n<p>结果还是失败。再次上网查阅，得知 <code>-lpthread</code> 应该放到最后面，修改后编译通过。</p>\n<pre><code># gcc thread.c -o thread.c -lpthread\n</code></pre>\n<p><strong>参考链接：<a href=\"http://blog.csdn.net/besfanfei/article/details/7542396\">http://blog.csdn.net/besfanfei/article/details/7542396</a></strong></p>\n",
            "tags": [
                "Linux",
                "C"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/04/24/fix-sigaction/",
            "url": "https://blog.timerever.tk/2017/04/24/fix-sigaction/",
            "title": "sigaction 自定义信号处理函数的“修复”",
            "date_published": "2017-04-24T11:15:05.000Z",
            "content_html": "<p>在对嵌入式 Linux 系统程序开发中的进程间通信进行学习时，涉及到了信号集函数组，书中给出的示例如下：</p>\n<blockquote>\n<p>该实例首先把 SIGQUIT、SIGINT 两个信号加入信号集，然后将该信号集设为阻塞状态，<br>并在该状态下使程序暂停 5 秒。接下来再将信号集设置为非阻塞状态，再对这两个信号分别<br>操作，其中 SIGQUIT 执行默认操作，而 SIGINT 执行用户自定义函数的操作。源代码如下<br>所示：</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">my_func</span><span class=\"params\">(<span class=\"keyword\">int</span> signum)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;If you want to quit,please try SIGQUIT\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">sigset_t</span> <span class=\"built_in\">set</span>,pendset;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sigaction</span> <span class=\"title\">action1</span>,<span class=\"title\">action2</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(sigemptyset(&amp;<span class=\"built_in\">set</span>)&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;sigemptyset&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(sigaddset(&amp;<span class=\"built_in\">set</span>,SIGQUIT)&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;sigaddset&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(sigaddset(&amp;<span class=\"built_in\">set</span>,SIGINT)&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;sigaddset&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(sigprocmask(SIG_BLOCK,&amp;<span class=\"built_in\">set</span>,<span class=\"literal\">NULL</span>)&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;sigprocmask&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;blocked\\n&quot;</span>);</span><br><span class=\"line\">\t\tsleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(sigprocmask(SIG_UNBLOCK,&amp;<span class=\"built_in\">set</span>,<span class=\"literal\">NULL</span>)&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;sigprocmask&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;unblock\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(sigismember(&amp;<span class=\"built_in\">set</span>,SIGINT))&#123;</span><br><span class=\"line\">\t\t\tsigemptyset(&amp;action1.sa_mask);</span><br><span class=\"line\">\t\t\taction1.sa_handler=my_func;</span><br><span class=\"line\">\t\t\tsigaction(SIGINT,&amp;action1,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sigismember(&amp;<span class=\"built_in\">set</span>,SIGQUIT))&#123;</span><br><span class=\"line\">\t\t\tsigemptyset(&amp;action2.sa_mask);</span><br><span class=\"line\">\t\t\taction2.sa_handler = SIG_DFL;</span><br><span class=\"line\">\t\t\tsigaction(SIGTERM,&amp;action2,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>理论上，按说明所述及代码的编写，使用 <code>Ctrl-C</code> 传递 <code>SIGINT</code> 信号后，会转到自定义处理函数 <code>my_func</code>，但在实际操作中，在进入自定义处理函数后，程序直接退出。<strong>猜测</strong>是由于在进行自定义处理函数后，系统仍然对信号做了默认的处理。</p>\n<p>在请教老师后，给出了一种解决方案，对 <code>sigaction</code> 结构体中的 <code>sa_flags</code> 进行赋值，这里先贴出该结构体。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sigaction</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*sa_handler)(<span class=\"keyword\">int</span> signo);</span><br><span class=\"line\">\t<span class=\"keyword\">sigset_t</span> sa_mask;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sa_flags;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*sa_restore)(<span class=\"keyword\">void</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>sa_handler</code> 是一个函数指针，指定信号关联函数，这里除可以是用户自定义的处理函数<br>外，还可以为 <code>SIG_DFL</code>（采用缺省的处理方式）或 <code>SIG_IGN</code>（忽略信号）。它的处理函数只<br>有一个参数，即信号值。<br><code>sa_mask</code> 是一个信号集，它可以指定在信号处理程序执行过程中哪些信号应当被阻塞，<br>在调用信号捕获函数之前，该信号集要加入到信号的信号屏蔽字中。<br><code>sa_flags</code> 中包含了许多标志位，是对信号进行处理的各个选择项。它的常见可选值如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">SA_NODEFER/SA_NOMASK</td>\n<td align=\"left\">当捕捉到此信号时，在执行其信号捕捉函数时，系统不会自动阻塞此信号</td>\n</tr>\n<tr>\n<td align=\"left\">SA_NOCLDSTOP</td>\n<td align=\"left\">进程忽略子进程产生的任何 SIGSTOP、SIGTSTP、SIGTTIN 和 SIGTTOU 信号</td>\n</tr>\n<tr>\n<td align=\"left\">SA_RESTART</td>\n<td align=\"left\">可让重启的系统调用重新起作用</td>\n</tr>\n<tr>\n<td align=\"left\">SA_ONESHOT/SA_RESETHAND</td>\n<td align=\"left\">自定义信号只执行一次，在执行完毕后恢复信号的系统默认动作</td>\n</tr>\n</tbody></table>\n<p>将 <code>sigaction</code> 结构体中的 <code>sa_flags</code> 成员赋值为 0，修改后的部分代码如下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(sigismember(&amp;<span class=\"built_in\">set</span>,SIGINT))&#123;</span><br><span class=\"line\">\t\tsigemptyset(&amp;action1.sa_mask);</span><br><span class=\"line\">\t\taction1.sa_handler=my_func;</span><br><span class=\"line\">\t\taction1.sa_flags=<span class=\"number\">0</span>; <span class=\"comment\">//添加此行</span></span><br><span class=\"line\">\t\tsigaction(SIGINT,&amp;action1,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sigismember(&amp;<span class=\"built_in\">set</span>,SIGQUIT))&#123;</span><br><span class=\"line\">\t\tsigemptyset(&amp;action2.sa_mask);</span><br><span class=\"line\">\t\taction2.sa_handler = SIG_DFL;</span><br><span class=\"line\">\t\tsigaction(SIGTERM,&amp;action2,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样修改后，程序确实正常运行了。但是根据该书所述和在网上查询，始终未能理解为何这样操作，而且之后尝试赋其他值，依然正常运行。网上国内的氛围就是博客间互相复制互相抄袭，找不到多少主观的分析，所以一直未能解决，仅在此做下记录。</p>\n",
            "tags": [
                "Linux",
                "C"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/03/06/proxy-with-wget/",
            "url": "https://blog.timerever.tk/2017/03/06/proxy-with-wget/",
            "title": "wget 使用代理",
            "date_published": "2017-03-06T10:47:10.000Z",
            "content_html": "<p><code>wget</code> 是 Linux 下常用的一个命令行下载工具。由于此次需要下载的文件在国外，所以速度缓慢，然后就想到使用代理进行下载。使用 <code>--help</code> 查询了一番，发现并没有可以设置代理的地方，倒是有不走代理的选项，汗。</p>\n<p>因为是在终端使用，所以并不想使用全局代理，上网搜寻了一下关于 <code>wget</code> 使用代理的使用方法。</p>\n<ol>\n<li>修改 .wgetrc 文件 .wgetrc 文件位于 $HOME 目录下，修改添加代理设置。 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi .wgetrc</span><br><span class=\"line\">use_proxy=on</span><br><span class=\"line\">http_proxy=http://ip:port</span><br></pre></td></tr></table></figure></li>\n</ol>\n<span id=\"more\"></span>\n\n<ol start=\"2\">\n<li><p>设置环境变量</p>\n<p> 通过环境变量使终端使用代理。</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ export http_proxy=&quot;ip:port&quot;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用 <code>wget</code> 的 <code>-e</code> 选项</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget --help</span><br><span class=\"line\">GNU Wget 1.15, a non-interactive network retriever.</span><br><span class=\"line\">Usage: wget [OPTION]... [URL]...</span><br><span class=\"line\"></span><br><span class=\"line\">Mandatory arguments to long options are mandatory for short options too.</span><br><span class=\"line\"></span><br><span class=\"line\">Startup:</span><br><span class=\"line\">  -V,  --version           display the version of Wget and exit.</span><br><span class=\"line\">  -h,  --help              print this help.</span><br><span class=\"line\">  -b,  --background        go to background after startup.</span><br><span class=\"line\">  -e,  --execute=COMMAND   execute a `.wgetrc&#x27;-style command.</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<p> 由此可见 <code>wget</code> 的 <code>-e</code> 选项同方法二使用了 http_proxy。</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -e &quot;http_proxy=http://ip:port&quot;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>由于想使用非全局代理，所以方法三适用。</p>\n",
            "tags": [
                "Linux",
                "wget"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/01/26/unused-jekyll-on-ubuntu/",
            "url": "https://blog.timerever.tk/2017/01/26/unused-jekyll-on-ubuntu/",
            "title": "记录未使用的 Jekyll 环境搭建",
            "date_published": "2017-01-26T03:37:45.000Z",
            "content_html": "<p>自从win10出现了 Bash on Ubuntu，自己便喜欢上了它，<del>甚至抛弃了虚拟机</del>（双系统还是存在的）。正好最近厌烦了 wp，毕竟太臃肿了，对于我这种没事闲的只会随便写写的没太大用处。</p>\n<p>然后就想起了自己沉睡已久的 github，不是因为 github 的免费且无限流量，主要是喜欢 github 上静态页面的简约，百度了下现在的方式，大多是 Jelly 来搭建的，不喜欢在 windows 上装各种软件的我就这么选择了 Bash on Ubuntu，这也是本文的来源。</p>\n<h3 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h3><ul>\n<li><a href=\"http://jekyll.com.cn/\">Jekyll 中文官网</a></li>\n<li><a href=\"http://www.ruby-lang.org/\">Ruby官网</a></li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><p>由于 Ubuntu 的仓库里各软件还是很多的，所以首先选择了 apt 方式安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install ruby</span><br><span class=\"line\">$ gem install jekyll</span><br></pre></td></tr></table></figure>\n\n<p>结果出错，ruby 版本太低，输入 ruby -v 查询后是1.95的版本，需求是2点多版本。</p>\n<h3 id=\"换用源码编译安装\"><a href=\"#换用源码编译安装\" class=\"headerlink\" title=\"换用源码编译安装\"></a>换用源码编译安装</h3><p>Linux 下安装软件，至少是我自己的通常思维是先用自带的包管理器安装，如果没有对应的软件包或者版本太低或有缺陷，通常会到官网选择编译安装。</p>\n<ul>\n<li>首先安装编译环境</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install build-essential cmake</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>然后下载源码编译安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://cache.ruby-lang.org/pub/ruby/2.4/ruby-2.4.0.tar.gz</span><br><span class=\"line\">$ tar -zxvf ruby-2.4.0.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> ruby-2.4.0</span><br><span class=\"line\">$ ./configure</span><br><span class=\"line\">$ make</span><br><span class=\"line\">$ sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>在修改 gem 源时出现错误，使用的是国内的 https 源，提示 openssl 有问题。然而系统是安有 openssl 的，而且编译的时候并没有看到有关 openssl 的配置（也有可能是我没有仔细看）。提示可以使用 http 的方式添加源，不过略微强迫症，于是宣告源码编译安装失败。</p>\n<h3 id=\"rvm-方式安装\"><a href=\"#rvm-方式安装\" class=\"headerlink\" title=\"rvm 方式安装\"></a>rvm 方式安装</h3><p>这也是在网上查到的第三种也是常见的最后一种安装方式，首先安装 rvm 然后用 rvm 安装 ruby。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -L https://get.rvm.io | bash -s stable</span><br><span class=\"line\">$ <span class=\"built_in\">source</span> ~/.rvm/scripts/rvm</span><br><span class=\"line\">$ rvm requirements</span><br><span class=\"line\">$ rvm install ruby</span><br><span class=\"line\">$ gem install jekyll</span><br></pre></td></tr></table></figure>\n\n<p>成功安装，安装的 ruby 版本为2.3.3。</p>\n",
            "tags": [
                "Linux",
                "Ubuntu",
                "Ruby",
                "Jekyll"
            ]
        }
    ]
}