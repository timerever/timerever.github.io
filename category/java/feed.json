{
    "version": "https://jsonfeed.org/version/1",
    "title": "A Blog • All posts by \"java\" category",
    "description": "Just another blog.",
    "home_page_url": "https://blog.timerever.tk",
    "items": [
        {
            "id": "https://blog.timerever.tk/2022/03/01/resolve-class-not-found-in-sharding-jdbc/",
            "url": "https://blog.timerever.tk/2022/03/01/resolve-class-not-found-in-sharding-jdbc/",
            "title": "修复 Sharding-JDBC 使用时的两次 NoClassDefFoundError",
            "date_published": "2022-03-01T06:38:32.000Z",
            "content_html": "<p>由于项目上有着某些需求，所以需要使用 Sharding-JDBC。根据官方文档，引入 <code>shardingsphere-jdbc-core</code> 依赖并使用当前最新版本 5.1.0，结果在测试的过程中出现了两次 NoClassDefFoundError，分别记录一下解决过程。</p>\n<span id=\"more\"></span>\n<h3 id=\"一-classnotfoundexception-orgapachetomcatdbcpdbcp2basicdatasource\"><a class=\"markdownIt-Anchor\" href=\"#一-classnotfoundexception-orgapachetomcatdbcpdbcp2basicdatasource\"></a> 一、ClassNotFoundException: org.apache.tomcat.dbcp.dbcp2.BasicDataSource</h3>\n<p>配置完程序，兴冲冲地打开前端准备测试，可没想到刚打开就报了个错。老规矩，先看最后一个 Caused by，结果是个没头没脑的 ClassNotFoundException。</p>\n<img src=\"/2022/03/01/resolve-class-not-found-in-sharding-jdbc/resolve-class-not-found-in-sharding-jdbc-1.png\" class=\"\" title=\"报错信息\">\n<p>那就继续往上翻，看一下异常栈信息。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: java.lang.NoClassDefFoundError: org/apache/tomcat/dbcp/dbcp2/BasicDataSource</span><br><span class=\"line\">\tat org.apache.shardingsphere.infra.datasource.pool.metadata.type.dbcp.TomcatDBCPDataSourcePoolMetaData.getType(TomcatDBCPDataSourcePoolMetaData.java:67)</span><br><span class=\"line\">\tat org.apache.shardingsphere.spi.typed.TypedSPIRegistry.lambda$findRegisteredService$0(TypedSPIRegistry.java:44)</span><br><span class=\"line\">\tat java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:174)</span><br><span class=\"line\">\tat java.util.ArrayList$ArrayListSpliterator.tryAdvance(ArrayList.java:1361)</span><br><span class=\"line\">\tat java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126)</span><br><span class=\"line\">\tat java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:499)</span><br><span class=\"line\">\tat java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:486)</span><br><span class=\"line\">\tat java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)</span><br><span class=\"line\">\tat java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:152)</span><br><span class=\"line\">\tat java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)</span><br><span class=\"line\">\tat java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:531)</span><br><span class=\"line\">\tat org.apache.shardingsphere.spi.typed.TypedSPIRegistry.findRegisteredService(TypedSPIRegistry.java:44)</span><br><span class=\"line\">\tat org.apache.shardingsphere.infra.datasource.pool.metadata.DataSourcePoolMetaDataFactory.newInstance(DataSourcePoolMetaDataFactory.java:46)</span><br><span class=\"line\">\tat org.apache.shardingsphere.infra.datasource.props.DataSourcePropertiesCreator.createProperties(DataSourcePropertiesCreator.java:81)</span><br><span class=\"line\">\tat org.apache.shardingsphere.infra.datasource.props.DataSourcePropertiesCreator.create(DataSourcePropertiesCreator.java:57)</span><br><span class=\"line\">\tat org.apache.shardingsphere.infra.metadata.resource.DataSourcesMetaData.&lt;init&gt;(DataSourcesMetaData.java:41)</span><br><span class=\"line\">\tat org.apache.shardingsphere.infra.metadata.ShardingSphereMetaData.createResource(ShardingSphereMetaData.java:73)</span><br><span class=\"line\">\tat org.apache.shardingsphere.infra.metadata.ShardingSphereMetaData.create(ShardingSphereMetaData.java:66)</span><br><span class=\"line\">\tat org.apache.shardingsphere.mode.metadata.MetaDataContextsBuilder.getMetaDataMap(MetaDataContextsBuilder.java:105)</span><br><span class=\"line\">\tat org.apache.shardingsphere.mode.metadata.MetaDataContextsBuilder.build(MetaDataContextsBuilder.java:96)</span><br><span class=\"line\">\tat org.apache.shardingsphere.mode.manager.memory.MemoryContextManagerBuilder.build(MemoryContextManagerBuilder.java:49)</span><br><span class=\"line\">\tat org.apache.shardingsphere.driver.jdbc.core.datasource.ShardingSphereDataSource.createContextManager(ShardingSphereDataSource.java:81)</span><br><span class=\"line\">\tat org.apache.shardingsphere.driver.jdbc.core.datasource.ShardingSphereDataSource.&lt;init&gt;(ShardingSphereDataSource.java:64)</span><br><span class=\"line\">\tat org.apache.shardingsphere.driver.api.ShardingSphereDataSourceFactory.createDataSource(ShardingSphereDataSourceFactory.java:77)</span><br></pre></td></tr></table></figure>\n<p>首先点进去看一下第一行的 <code>TomcatDBCPDataSourcePoolMetaData</code> 这个类，IDE 很明显地提示了错误，所以根源在于 Sharding 使用了 <code>BasicDataSource</code> 类却没有引入其依赖。</p>\n<img src=\"/2022/03/01/resolve-class-not-found-in-sharding-jdbc/resolve-class-not-found-in-sharding-jdbc-2.png\" class=\"\" title=\"IDE 报红\">\n<p>既然问题的根源找到了，那么接下来看一眼为什么会触发到这里。</p>\n<p>接着看第二行，<code>TypedSPIRegistry</code> 类的 44 行，并在这里下一个断点：</p>\n<img src=\"/2022/03/01/resolve-class-not-found-in-sharding-jdbc/resolve-class-not-found-in-sharding-jdbc-3.png\" class=\"\" title=\"打下断点\">\n<img src=\"/2022/03/01/resolve-class-not-found-in-sharding-jdbc/resolve-class-not-found-in-sharding-jdbc-4.png\" class=\"\" title=\"断点暂停\">\n<img src=\"/2022/03/01/resolve-class-not-found-in-sharding-jdbc/resolve-class-not-found-in-sharding-jdbc-5.png\" class=\"\" title=\"运行表达式\">\n<p>可以看到，<code>ShardingSphereServiceLoader.newServiceInstances(typedSPIClass)</code> 方法传入了 SPI 类 <code>DataSourcePoolMetaData</code>， 并获取到了其三个实现类，而最后一个 <code>TomcatDBCPDataSourcePoolMetaData</code> 类就是刚才抛出异常的类。</p>\n<img src=\"/2022/03/01/resolve-class-not-found-in-sharding-jdbc/resolve-class-not-found-in-sharding-jdbc-6.png\" class=\"\" title=\"DataSourcePoolMetaData 实现类\">\n<p>然后在后续的 <code>filter</code> 中，会循环每个对象，在调用 <code>getType()</code> 方法时便出现了异常。</p>\n<p>所以看上去并不是自己的问题，在谷歌之后发现，近期已经有人提出了这个问题，具体可以参见：<a href=\"https://github.com/apache/shardingsphere/issues/15507\">Add example that implements the Metadata SPI for third-party JDBC pools</a>。</p>\n<p>通过 issue 中的描述我们可以得知，这个问题是在 5.1.0 中才出现的。看上去已经有人提了 PR 修复了这个问题，但是目前还没有发布新版本。所以我们可以降级到 5.0.0 使用旧版本来规避这个问题，或者直接引入缺失的依赖使代码不再报错。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.tomcat<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tomcat-dbcp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>10.0.16<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"二-noclassdeffounderror-organtlrv4runtimecodepointbuffer\"><a class=\"markdownIt-Anchor\" href=\"#二-noclassdeffounderror-organtlrv4runtimecodepointbuffer\"></a> 二、NoClassDefFoundError: org/antlr/v4/runtime/CodePointBuffer</h3>\n<p>修复好刚才的问题之后，重新运行程序，创建数据源，好，没有报错。再执行一下 SQL 查询，不好，又报错了…</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: java.lang.NoClassDefFoundError: org/antlr/v4/runtime/CodePointBuffer</span><br><span class=\"line\">\tat org.apache.shardingsphere.sql.parser.core.SQLParserFactory.getSQLCharStream(SQLParserFactory.java:82)</span><br><span class=\"line\">\tat org.apache.shardingsphere.sql.parser.core.SQLParserFactory.createTokenStream(SQLParserFactory.java:76)</span><br><span class=\"line\">\tat org.apache.shardingsphere.sql.parser.core.SQLParserFactory.newInstance(SQLParserFactory.java:55)</span><br><span class=\"line\">\tat org.apache.shardingsphere.sql.parser.core.database.parser.SQLParserExecutor.twoPhaseParse(SQLParserExecutor.java:58)</span><br><span class=\"line\">\tat org.apache.shardingsphere.sql.parser.core.database.parser.SQLParserExecutor.parse(SQLParserExecutor.java:49)</span><br><span class=\"line\">\tat org.apache.shardingsphere.sql.parser.api.SQLParserEngine.parse(SQLParserEngine.java:47)</span><br><span class=\"line\">\tat org.apache.shardingsphere.infra.parser.sql.SQLStatementParserExecutor.parse(SQLStatementParserExecutor.java:48)</span><br><span class=\"line\">\tat org.apache.shardingsphere.infra.parser.sql.SQLStatementParserEngine.parse(SQLStatementParserEngine.java:47)</span><br><span class=\"line\">\tat org.apache.shardingsphere.infra.parser.ShardingSphereSQLParserEngine.parse0(ShardingSphereSQLParserEngine.java:70)</span><br><span class=\"line\">\tat org.apache.shardingsphere.infra.parser.ShardingSphereSQLParserEngine.parse(ShardingSphereSQLParserEngine.java:59)</span><br><span class=\"line\">\tat org.apache.shardingsphere.driver.jdbc.core.statement.ShardingSphereStatement.createLogicSQL(ShardingSphereStatement.java:414)</span><br><span class=\"line\">\tat org.apache.shardingsphere.driver.jdbc.core.statement.ShardingSphereStatement.executeQuery(ShardingSphereStatement.java:144)</span><br><span class=\"line\">\tat org.springframework.jdbc.core.JdbcTemplate$1QueryStatementCallback.doInStatement(JdbcTemplate.java:452)</span><br><span class=\"line\">\tat org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:381)</span><br><span class=\"line\">\tat org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:465)</span><br><span class=\"line\">\tat org.springframework.jdbc.core.JdbcTemplate.queryForRowSet(JdbcTemplate.java:530)</span><br></pre></td></tr></table></figure>\n<p>从第一行点进去先看眼，又是找不到类，不过这次不太一样。看下上面的 import，发现这个包下的大部分的类都可以找到，只有这两个没有找到：</p>\n<img src=\"/2022/03/01/resolve-class-not-found-in-sharding-jdbc/resolve-class-not-found-in-sharding-jdbc-7.png\" class=\"\" title=\"import 信息\">\n<p>只能盲猜是版本问题，打开 Maven Helper 看一下依赖情况，果然是和公司自己的包发生了版本冲突。手动指定版本到 4.9.2，问题解决。</p>\n<img src=\"/2022/03/01/resolve-class-not-found-in-sharding-jdbc/resolve-class-not-found-in-sharding-jdbc-8.png\" class=\"\" title=\"import 信息\">\n",
            "tags": [
                "Java",
                "Sharding",
                "Sharding-JDBC"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2022/02/09/custom-jackson-serializer-for-clob-type/",
            "url": "https://blog.timerever.tk/2022/02/09/custom-jackson-serializer-for-clob-type/",
            "title": "自定义 Jackson Serializer 解决无法序列化 SerialClob 的问题",
            "date_published": "2022-02-09T07:49:35.000Z",
            "content_html": "<p>由于种种原因，项目上在做数据查询时，没有选择任何的 ORM 框架而是使用了 <code>JdbcTemplate</code> 进行数据库查询。查询出来也没做太多事情，只是简单地对数据做了下封装，然后直接返回给了前端。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Map&lt;String, Object&gt;&gt; data = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">JdbcTemplate jdbcTemplate = <span class=\"keyword\">new</span> JdbcTemplate(ds);</span><br><span class=\"line\">SqlRowSet sqlRowSet = jdbcTemplate.queryForRowSet(sql);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> columnSize = sqlRowSet.getMetaData().getColumnNames().length;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (sqlRowSet.next()) &#123;</span><br><span class=\"line\">\tMap&lt;String, Object&gt; tmp = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= columnSize; i++) &#123;</span><br><span class=\"line\">\t\ttmp.put(i + <span class=\"string\">&quot;&quot;</span>, sqlRowSet.getObject(i));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdata.add(tmp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>本来一直岁月静好，知道某一天查了一张新表，然后后台报了异常：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class java.io.ByteArrayInputStream and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.demo.web.rest.util.ResponseEnvelope[&quot;data&quot;]-&gt;com.demo.service.dto.SqlQueryDto[&quot;data&quot;]-&gt;java.util.ArrayList[0]-&gt;java.util.LinkedHashMap[&quot;LOG_MSG&quot;]-&gt;javax.sql.rowset.serial.SerialClob[&quot;asciiStream&quot;])</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1300)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:400)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:46)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:728)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:774)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields(MapSerializer.java:808)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeWithoutTypeInfo(MapSerializer.java:764)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:720)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:35)</span><br><span class=\"line\">\tat com.fasterxml.jackson.datatype.hibernate5.PersistentCollectionSerializer.serialize(PersistentCollectionSerializer.java:244)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:119)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:79)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:18)</span><br><span class=\"line\">\tat com.fasterxml.jackson.datatype.hibernate5.PersistentCollectionSerializer.serialize(PersistentCollectionSerializer.java:244)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:728)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:774)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:728)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:774)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1518)</span><br><span class=\"line\">\tat com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1007)</span><br><span class=\"line\">\tat org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:454)</span><br><span class=\"line\">\t... 123 common frames omitted</span><br></pre></td></tr></table></figure>\n<p>乍一看，可以通过提示所说的设置 <code>SerializationFeature.FAIL_ON_EMPTY_BEANS</code> 为 <code>false</code> 来避免这个问题，但这个问题其实远远没有这么简单。</p>\n<span id=\"more\"></span>\n<h3 id=\"尝试按照提示解决\"><a class=\"markdownIt-Anchor\" href=\"#尝试按照提示解决\"></a> 尝试按照提示解决</h3>\n<p>既然异常中已经给出了解决方案，所以我们可以先尝试用给出的方案解决。由于我们是 spring 项目，所以我们可以很简单地通过在 yaml 中添加配置而不是采用写大段代码的方式来设置这个序列化属性：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">jackson:</span></span><br><span class=\"line\">    <span class=\"attr\">serialization:</span></span><br><span class=\"line\">      <span class=\"attr\">FAIL_ON_EMPTY_BEANS:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>让我们再调用下接口。好，没问题，不报错了！再看眼返回值，等等，这是个啥？</p>\n<img src=\"/2022/02/09/custom-jackson-serializer-for-clob-type/custom-jackson-serializer-for-clob-type-1.png\" class=\"\" title=\"并不是所期望的结果\">\n<p>这个字段明明在数据库中是有值的，而且正常也不会变成这种嵌套结构，所以看来这个解决办法并不可行。</p>\n<h3 id=\"寻找问题根源\"><a class=\"markdownIt-Anchor\" href=\"#寻找问题根源\"></a> 寻找问题根源</h3>\n<p>所以简单的解决方式不行，就只能按部就班先看问题出在哪里了。废话不多说，既然我们知道了问题出在哪个字段，就直接打个断点先看眼程序拿到的返回值是什么样子。</p>\n<p>已知数据库是 H2，对应的字段类型为 <code>CHARACTER LARGE OBJECT</code>，再看眼拿到的值：</p>\n<img src=\"/2022/02/09/custom-jackson-serializer-for-clob-type/custom-jackson-serializer-for-clob-type-2.png\" class=\"\" title=\"实际拿到的返回值\">\n<p>可以看到，程序所拿到的返回值是 <code>javax.sql.rowset.serial.SerialClob</code> 的对象，而这个对象里面所包含的 <code>clob</code> 字段就是 H2 的 <code>org.h2.jdbc.JdbcClob</code> 对象。</p>\n<img src=\"/2022/02/09/custom-jackson-serializer-for-clob-type/custom-jackson-serializer-for-clob-type-3.png\" class=\"\" title=\"SerialClob 类\">\n<p>也就是说，默认情况下 Jackson 无法序列化 <code>SerialClob</code> 这个类所创建的对象，是不是由于 <code>clob</code> 字段所包含的具体实现类导致的并没有进一步研究，因为数据库的种类很多，我们需要着手做的是解决这个不能序列化的问题。</p>\n<h3 id=\"自定义-serializer-解决问题\"><a class=\"markdownIt-Anchor\" href=\"#自定义-serializer-解决问题\"></a> 自定义 Serializer 解决问题</h3>\n<p>我们知道 Jackson 可以通过扩展 <code>Module</code> 来支持更多类型的序列化操作，所以我们也可以采用同样的方式来增加对 <code>SerialClob</code> 的支持。</p>\n<p>不过我们不需要自定义 <code>Module</code>，使用自带的 <code>SimpleModule</code> 即可，要做的只是自定义对应的 Serializer：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SerialClobSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">JsonSerializer</span>&lt;<span class=\"title\">SerialClob</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">serialize</span><span class=\"params\">(SerialClob clob, JsonGenerator gen, SerializerProvider serializers)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tgen.writeString(clob.getCharacterStream(), (<span class=\"keyword\">int</span>) clob.length());</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SerialException e) &#123;</span><br><span class=\"line\">\t\t\tlog.error(<span class=\"string\">&quot;Serialize SerialClob error&quot;</span>, e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后要做的就是将自定义的 <code>SerialClobSerializer</code> 注册到 ObjectMapper 中去，通常网上的方法都是自定义创建全局的 <code>ObjectMapper</code> 供 Spring 使用。这个方法定制化强，完全由自己来创建 <code>ObjectMapper</code>，但个人希望在可以应用 Spring 默认创建的 <code>ObjectMapper</code> 属性的同时，将 <code>SerialClobSerializer</code> 注册进去，所以采用下面的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JacksonConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectMapper objectMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customSerializerSupport</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        objectMapper.registerModule(<span class=\"keyword\">new</span> SimpleModule().addSerializer(SerialClob.class, <span class=\"keyword\">new</span> SerialClobSerializer()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到此，问题就得到了解决，调用接口后不再报错，且可以返回正确的结果。</p>\n",
            "tags": [
                "Java",
                "Jackson"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2021/12/02/hibernate-incorrect-metamodel-with-no-reationship/",
            "url": "https://blog.timerever.tk/2021/12/02/hibernate-incorrect-metamodel-with-no-reationship/",
            "title": "Hibernate 解决 Metamodel 属性类型错误问题",
            "date_published": "2021-12-02T03:41:48.000Z",
            "content_html": "<p>因为项目上使用了 Hibernate Metamodel，而且自定义映射了数据库的 JSON 字段类型，导致生成的 Metamodel 属性类型有误。虽然并没有用映射的这些属性做 <code>CriteriaQuery</code>，所以其实在项目的使用上没有影响，但是启动时还是会报一个 ERROR 日志，所以寻找一个能够根治的解决办法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR org.hibernate.metamodel.internal.MetadataContext [MetadataContext.java:491] - HHH015007: Illegal argument on static metamodel field injection : Foo_#bars; expected type : org.hibernate.metamodel.model.domain.internal.SingularAttributeImpl; encountered type : javax.persistence.metamodel.MapAttribute</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h3 id=\"一-定位问题\"><a class=\"markdownIt-Anchor\" href=\"#一-定位问题\"></a> 一、定位问题</h3>\n<p><strong>首先是背景信息：</strong> 因为前端需要在数据库存储 JSON 字段，而且现在版本的 MySQL 天然支持 JSON ，所以建表时采用了 JSON 作为字段类型。然后在 JPA 实体层面，引入了 <code>hibernate-types</code> 依赖来增加 Hibernate 对 JSON 的支持，字段属性增加了 <code>@Type(type = &quot;json&quot;)</code> 注解，本身定义为了 <code>Map</code> 类型。</p>\n<p>其实在 Hibernate 对 JSON 处理这件事情上，传统方案是通过自定义 <code>Convert</code> 来实现。或者可能不是 JSON Object 而是 JSON Array，但无论是哪种情况，均会遇到同样的问题。</p>\n<p>通过报错信息，对代码进行 DEBUG 后得知，Hibernate 在启动时，会根据实体属性是否存在与其他实体的关系，生成不同的 <code>Attribute</code>。比如 OneToMany 一对多关系就会生成 <code>ListAttribute</code> 或 <code>SetAttribute</code>，没有关系的属性都是 <code>SingularAttribute</code>。而启动时通过反射，会 set Metamodel 的对应属性，我们可以在 target 下面看见，Metamodel 的类型为 <code>MapAttribute</code>，所以我们可以确定，问题就出在了生成 Metamodel 的时候。具体是不是直接拿实体定义的数据类型来生成的我没有去看源码，不过可以肯定的是它在判断类型的时候缺少额外的判断。</p>\n<h3 id=\"二-解决问题\"><a class=\"markdownIt-Anchor\" href=\"#二-解决问题\"></a> 二、解决问题</h3>\n<p>同样作为一个共性问题，在 Goolge 进行搜索后，定位到了一条仍然是 Hibernate 官方 Bug 追踪的链接 <a href=\"https://hibernate.atlassian.net/browse/HHH-12338\">Incorrect metamodel for basic collections</a>。简单的来说，就是当前已经在 5.5.0.Alpha1 的版本中得到了解决，不过如果你认真看了下面整个的 Activity 记录，就会发现仍然是存在一个小插曲。</p>\n<h3 id=\"三-插曲\"><a class=\"markdownIt-Anchor\" href=\"#三-插曲\"></a> 三、插曲</h3>\n<p>这个问题是在 2018 年的 3 月份被提出来的，而 5.5.0.Alpha1 已经是 2021 年 8 月份的事情了，照理说这么一个小问题不会需要三年多的时间来处理，而这个疑问的答案就在下面的讨论之中。</p>\n<p>简单来说，这个问题在当月就被解决掉了，伴随着 5.2.17 的版本发布，这个问题理论上来说就不应该再存在了。然而事与愿违，在 5.2.17 版本发布之后，很快就有人提出了新的问题。在下面的 Comment 中有记录，同时这个人也单独提了一个 issue <a href=\"https://hibernate.atlassian.net/browse/HHH-12581\">NPE for Criteria query containing fetch join as a regression of HHH-12338</a>，即这次的改动造成了 NPE。然后可以看到在另一个维护者与之前 Vlad Mihalcea 的一番讨论之后，他们决定恢复这次的改动。</p>\n<img src=\"/2021/12/02/hibernate-incorrect-metamodel-with-no-reationship/hibernate-incorrect-metamodel-with-no-reationship-1.png\" class=\"\" title=\"revert commit\">\n<p>但是回退了就意味着问题又回来了，上面提到的 Vlad Mihalcea 从红帽离职，不再维护 Hibernate 还弄了一个新的项目就是上面提到的 <code>hibernate-types</code>。所以其他人在遇到相同的问题时，有部分和我们一样是采用的 <code>hibernate-types</code> 方案，自然而然有人把问题又丢给了 Vlad Mihalcea，不过是在 <code>hibernate-types</code> 项目。</p>\n<p>于是 Vlad Mihalcea 在 Github 提了新的 PR，见 <a href=\"https://github.com/hibernate/hibernate-orm/pull/3254\">HHH-12338 - Incorrect metamodel for basic collections</a>。不过很不幸的是，并没有后续。</p>\n<p>直到今年的 7 月，又一位开发者忍无可忍决定解决这个问题，提了新的 PR 出来，见 <a href=\"https://github.com/hibernate/hibernate-orm/pull/4096\">HHH-14724 Test-case for metamodel compile error with converters and validation</a>。这次终于引起了重视，并在一番努力之后，终于得到了合并，问题就此解决。</p>\n<p>题外话，这件事情，是不是跟前阵子遇到的 <a href=\"/2021/11/26/hibernate-automatic-2nd-collection-cache-eviction/\">Hibernate 配置自动清除二级缓存之集合缓存</a> 里面的插曲有点像？笑。</p>\n<h3 id=\"四-亲力亲为\"><a class=\"markdownIt-Anchor\" href=\"#四-亲力亲为\"></a> 四、亲力亲为</h3>\n<p>虽说这件事情现在看来终于告一段落了，不过由于时今年 9 月份才最终解决，虽然代码已经被合并到了各个版本的分支中，但 5.4 已经半年没有发过新的版本了。虽说 5.5 和 5.6 的版本已经没问题了，但由于项目框架的问题，并不能直接升级 Hibernate 的版本，而且本来 5.5 的版本就存在很大改动，现有架构并不能保证完全兼容（比如还是上面提到的 <code>hibernate-types</code> 就需要引入另外一个包），所以最后没有办法，只能决定采用重打包的方式自己对源码进行更新。</p>\n<p>剩下的事情就不再赘述了，大概流程就是下载 Hibernate 源码，找到 5.4.32.Final 的 tag，在此基础上手动把修复代码的变更拷贝过来，然后改个版本号，发布到私仓，再更改当前项目依赖的版本号，最后成功解决。</p>\n",
            "tags": [
                "Java",
                "Hibernate"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2021/11/26/hibernate-automatic-2nd-collection-cache-eviction/",
            "url": "https://blog.timerever.tk/2021/11/26/hibernate-automatic-2nd-collection-cache-eviction/",
            "title": "Hibernate 配置自动清除二级缓存之集合缓存",
            "date_published": "2021-11-26T07:21:10.000Z",
            "content_html": "<p>之前在项目上使用了 Hibernate，并开启了基于 caffeine 的二级缓存。因为 Hibernate 会自动处理缓存，所以一直没怎么关注。直到最近，发现在一种特定的情况下，Hibernate 不会自动清除二级缓存里面的集合缓存。问题最后解决起来其实很简单，增加一个配置项的事。不过问题寻求解决的过程还是蛮繁琐的，并没有人能够直接告诉这个问题的答案，在此记录一下这个问题的排查过程。</p>\n<blockquote>\n<p>太长不看版：Spring Boot 中设置属性 spring.jpa.properties.auto_evict_collection_cache=true 即可解决。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"一-问题出现\"><a class=\"markdownIt-Anchor\" href=\"#一-问题出现\"></a> 一、问题出现</h3>\n<p>假定我这里有两个实体，分别为 <code>Parent</code> 和 <code>Child</code>。然后 Parent 与 Child 之间存在一对多的对应关系，即在 Parent 的实体中，存在一个属性 <code>private Set&lt;Child&gt; children</code>，然后我们开启二级缓存 <code>@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)</code>。在这种情况下，我们先访问 Parent 实体并获取其中的 <code>children</code> 属性，确保其已被缓存。然后我们再单独操作 Child，我们新建一个 Child 对象 <code>Child child = new Child()</code> 并设置其 Parent 的值 <code>child.setParent(parent)</code> 并保存 Child 实体 <code>ChildRepository.save(child)</code>。然后我们回过来获取 Parent，会发现 Parent 的 <code>children</code> 的值仍为原数组对象， 没有我们新增的 <code>child</code> 对象。</p>\n<p>通过在 Google 上进行搜索，发现 stackoverflow 上存在几个类似的问题，再进一步的搜索后，发现在 Hibernate 官方 Bug 追踪网站上有人归纳并提出了这个问题 <a href=\"https://hibernate.atlassian.net/browse/HHH-4910\">automatic L2 collection cache eviction when an element is added/updated/removed</a>，可以看到不只是自己遇到的新增，修改/删除也会有类似的问题。</p>\n<h3 id=\"二-问题解决\"><a class=\"markdownIt-Anchor\" href=\"#二-问题解决\"></a> 二、问题解决</h3>\n<p>在上面链接的内容下方，问题提出者给出了一种 workaround 的方案，提供 <code>@PostPersist</code>、<code>@PostRemove</code> 及 <code>@PreUpdate</code> 的监听，并在监听中自动清理缓存。以及在之前查阅 stackoverflow 时，也有人认为，你需要在操作多方元素的时候，同时操作一方对应的集合，对其进行 add/remove 操作。</p>\n<p>但不管怎么说，这些都是一些 workaround 方案，因为 Hibernate 本身是有能力自动处理这些事情的。话又说回来，既然问题很早就被提出了，比如这个链接中使用的版本是 <code>3.3.1</code>，同时官方也已经记录了这个问题已经在 <code>4.3.0.Beta5</code> 中被修复了，可是为什么我们还是会遇到这个问题？这个答案其实在下面的评论中。</p>\n<img src=\"/2021/11/26/hibernate-automatic-2nd-collection-cache-eviction/hibernate-automatic-2nd-collection-cache-eviction-1.png\" class=\"\" title=\"Hibernate atlassian 下面的评论\">\n<p>点进链接是 GitHub 的 PR 请求，讨论中详细地记录了从贡献者提出 PR 到最后并合并的整个流程。看下来大概就是，贡献者向负责人解释了为了提出这个改动、有负责人担心是不是会影响性能并期望做成可配置的、贡献者支持了配置项、PR 最终被合并。所以问题已经很明了了，功能上是已经被修复了，但是因为做成了配置项，所以默认没有启用，我们需要手动启用这个特性。</p>\n<img src=\"/2021/11/26/hibernate-automatic-2nd-collection-cache-eviction/hibernate-automatic-2nd-collection-cache-eviction-2.png\" class=\"\" title=\"变成配置项的 commit\">\n<p>所以我们从这里点进去，去看一下我们怎么才能打开这个特性。最后我们可以看到是在 <code>hibernate-core/src/main/java/org/hibernate/cfg/AvailableSettings.java</code> 这个文件中定义了配置的名字。</p>\n<img src=\"/2021/11/26/hibernate-automatic-2nd-collection-cache-eviction/hibernate-automatic-2nd-collection-cache-eviction-3.png\" class=\"\" title=\"配置项的名字\">\n<p>所以到这里，这个问题就算是最终解决了。</p>\n<h3 id=\"三-插曲\"><a class=\"markdownIt-Anchor\" href=\"#三-插曲\"></a> 三、插曲</h3>\n<p>由于项目使用了 <code>spring-boot-starter-data-jpa</code> 依赖，所以这个配置项的设置并不是上面 Hibernate 的改动所提及的，于是继续在 Google 用 <code>auto_evict_collection_cache</code> 作为关键字进行搜索，寻找在 Spring Boot 中的配置方式。最终是得到了答案，Spring Boot 中的配置项为 <code>spring.jpa.properties.auto_evict_collection_cache</code>，不过在此之外还发现了一个小插曲。</p>\n<p><a href=\"https://hibernate.atlassian.net/browse/HHH-10614\">Auto evict collection cache throws exception with null values</a> 中描述了一个人开启了这个特性，然后在一个特定的情况下 Hibernate 会抛出异常。虽然这个问题很快就被解决了，不过现在回来想想，维护者在维护这种已经已经很庞大的项目时，对所有的改动都抱有谨慎的态度还是很有必要的。做成了配置项，虽然一方面会让很多不知道的人继续遇到这个问题，但同时也让很多无关的人避免了可能带来的新问题。所以这两种方案孰优孰劣，可能就见仁见智了吧。</p>\n",
            "tags": [
                "Java",
                "Hibernate"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/04/23/client-custom-ssl/",
            "url": "https://blog.timerever.tk/2017/04/23/client-custom-ssl/",
            "title": "Apache HttpClient 4.5.x 忽略证书验证",
            "date_published": "2017-04-23T02:44:20.000Z",
            "content_html": "<p>在使用 Apache HttpComponents 时，需要访问一个第三方接口进行数据传输，但是由于对方使用的是 Let’s Encrypt 的证书，虽然浏览器是信任的，但是在调试的时候发现程序并不信任,所以采用自定义 SSLContext 的方式解决该问题。</p>\n<h3 id=\"查找官方解决方案\"><a class=\"markdownIt-Anchor\" href=\"#查找官方解决方案\"></a> 查找官方解决方案</h3>\n<p>作为一只程序猿，翻官方文档肯定是首选方案。官方提供了一种 Custom SSL context 的实现。</p>\n<p><a href=\"http://hc.apache.org/httpcomponents-client-4.5.x/httpclient/examples/org/apache/http/examples/client/ClientCustomSSL.java\">http://hc.apache.org/httpcomponents-client-4.5.x/httpclient/examples/org/apache/http/examples/client/ClientCustomSSL.java</a></p>\n<span id=\"more\"></span>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * ====================================================================</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class=\"line\"><span class=\"comment\"> * or more contributor license agreements.  See the NOTICE file</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed with this work for additional information</span></span><br><span class=\"line\"><span class=\"comment\"> * regarding copyright ownership.  The ASF licenses this file</span></span><br><span class=\"line\"><span class=\"comment\"> * to you under the Apache License, Version 2.0 (the</span></span><br><span class=\"line\"><span class=\"comment\"> * &quot;License&quot;); you may not use this file except in compliance</span></span><br><span class=\"line\"><span class=\"comment\"> * with the License.  You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *   http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing,</span></span><br><span class=\"line\"><span class=\"comment\"> * software distributed under the License is distributed on an</span></span><br><span class=\"line\"><span class=\"comment\"> * &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class=\"line\"><span class=\"comment\"> * KIND, either express or implied.  See the License for the</span></span><br><span class=\"line\"><span class=\"comment\"> * specific language governing permissions and limitations</span></span><br><span class=\"line\"><span class=\"comment\"> * under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> * ====================================================================</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * This software consists of voluntary contributions made by many</span></span><br><span class=\"line\"><span class=\"comment\"> * individuals on behalf of the Apache Software Foundation.  For more</span></span><br><span class=\"line\"><span class=\"comment\"> * information on the Apache Software Foundation, please see</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;http://www.apache.org/&gt;.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> org.apache.http.examples.client;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.net.ssl.SSLContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.conn.ssl.TrustSelfSignedStrategy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.ssl.SSLContexts;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.util.EntityUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * This example demonstrates how to create secure connections with a custom SSL</span></span><br><span class=\"line\"><span class=\"comment\"> * context.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClientCustomSSL</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Trust own CA and all self-signed certs</span></span><br><span class=\"line\">        SSLContext sslcontext = SSLContexts.custom()</span><br><span class=\"line\">                .loadTrustMaterial(<span class=\"keyword\">new</span> File(<span class=\"string\">&quot;my.keystore&quot;</span>), <span class=\"string\">&quot;nopassword&quot;</span>.toCharArray(),</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> TrustSelfSignedStrategy())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"comment\">// Allow TLSv1 protocol only</span></span><br><span class=\"line\">        SSLConnectionSocketFactory sslsf = <span class=\"keyword\">new</span> SSLConnectionSocketFactory(</span><br><span class=\"line\">                sslcontext,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> String[] &#123; <span class=\"string\">&quot;TLSv1&quot;</span> &#125;,</span><br><span class=\"line\">                <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                SSLConnectionSocketFactory.getDefaultHostnameVerifier());</span><br><span class=\"line\">        CloseableHttpClient httpclient = HttpClients.custom()</span><br><span class=\"line\">                .setSSLSocketFactory(sslsf)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            HttpGet httpget = <span class=\"keyword\">new</span> HttpGet(<span class=\"string\">&quot;https://httpbin.org/&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Executing request &quot;</span> + httpget.getRequestLine());</span><br><span class=\"line\"></span><br><span class=\"line\">            CloseableHttpResponse response = httpclient.execute(httpget);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                HttpEntity entity = response.getEntity();</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;----------------------------------------&quot;</span>);</span><br><span class=\"line\">                System.out.println(response.getStatusLine());</span><br><span class=\"line\">                EntityUtils.consume(entity);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                response.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            httpclient.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于考虑到该接口为第三方接口，对方可能进行证书的更换，再加上由于所传输信息是可以公开的、非重要数据的数据，所以并不采用官方给出的导入证书而使用不进行检查直接信任的方式处理。</p>\n<h3 id=\"定义自己的-sslcontext\"><a class=\"markdownIt-Anchor\" href=\"#定义自己的-sslcontext\"></a> 定义自己的 SSLContext</h3>\n<p>所以问题的关键在于自定义 <code>SSLContext</code>，查看其 <code>loadTrustMaterial</code> 方法的源代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> SSLContextBuilder <span class=\"title\">loadTrustMaterial</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">final</span> KeyStore truststore,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">final</span> TrustStrategy trustStrategy)</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException, KeyStoreException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> TrustManagerFactory tmfactory = TrustManagerFactory.getInstance(</span><br><span class=\"line\">            TrustManagerFactory.getDefaultAlgorithm());</span><br><span class=\"line\">    tmfactory.init(truststore);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> TrustManager[] tms = tmfactory.getTrustManagers();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tms != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (trustStrategy != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tms.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> TrustManager tm = tms[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tm <span class=\"keyword\">instanceof</span> X509TrustManager) &#123;</span><br><span class=\"line\">                    tms[i] = <span class=\"keyword\">new</span> TrustManagerDelegate(</span><br><span class=\"line\">                            (X509TrustManager) tm, trustStrategy);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">final</span> TrustManager tm : tms) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.trustmanagers.add(tm);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可见这边是使用实现了 <code>TrustStrategy</code> 接口的 <code>TrustSelfSignedStrategy</code> 对 X509 证书进行管理，所以我们需要自定义一个 <code>TrustStrategy</code> 的实例。</p>\n<p>先查看 <code>TrustStrategy</code> 接口的源代码，发现除了继承了 <code>org.apache.http.ssl.TrustStrategy</code> 之外没有添加任何内容。由于该类在 http-core 包中，直接反编译查看得：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TrustStrategy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isTrusted</span><span class=\"params\">(X509Certificate[] var1, String var2)</span> <span class=\"keyword\">throws</span> CertificateException</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以这里需要重写 <code>isTrusted</code> 方法，不进行验证，直接返回 <code>true</code>。由于不需要导入 Keystore，所以直接给空值，代码如下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SSLContext sslcontext = SSLContexts.custom()</span><br><span class=\"line\">\t    .loadTrustMaterial(<span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> TrustStrategy() &#123;</span><br><span class=\"line\">\t        <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isTrusted</span><span class=\"params\">(X509Certificate[] x509Certificates, String s)</span> <span class=\"keyword\">throws</span> CertificateException </span>&#123;</span><br><span class=\"line\">\t            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t    &#125;)</span><br><span class=\"line\">\t    .build();</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a class=\"markdownIt-Anchor\" href=\"#测试\"></a> 测试</h3>\n<p>修改后的完整代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.conn.ssl.TrustStrategy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.ssl.SSLContexts;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.util.EntityUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.net.ssl.SSLContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.KeyManagementException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.KeyStoreException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.NoSuchAlgorithmException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.cert.CertificateException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.cert.X509Certificate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by timer on 2017/4/23.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClientCustomSSL</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 自定义 SSLContext 使信任所有证书。</span></span><br><span class=\"line\">        SSLContext sslcontext = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            sslcontext = SSLContexts.custom()</span><br><span class=\"line\">\t                .loadTrustMaterial(<span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> TrustStrategy() &#123;</span><br><span class=\"line\">\t                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isTrusted</span><span class=\"params\">(X509Certificate[] x509Certificates, String s)</span> <span class=\"keyword\">throws</span> CertificateException </span>&#123;</span><br><span class=\"line\">\t                        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t                    &#125;</span><br><span class=\"line\">\t                &#125;)</span><br><span class=\"line\">\t                .build();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (KeyManagementException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (KeyStoreException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 仅允许 TLSv1 协议</span></span><br><span class=\"line\">        SSLConnectionSocketFactory sslsf = <span class=\"keyword\">new</span> SSLConnectionSocketFactory(</span><br><span class=\"line\">                sslcontext,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> String[] &#123; <span class=\"string\">&quot;TLSv1&quot;</span> &#125;,</span><br><span class=\"line\">                <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                SSLConnectionSocketFactory.getDefaultHostnameVerifier());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>(CloseableHttpClient httpclient = HttpClients.custom().setSSLSocketFactory(sslsf).build()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            HttpGet httpget = <span class=\"keyword\">new</span> HttpGet(<span class=\"string\">&quot;https://httpbin.org/get&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span>(CloseableHttpResponse response = httpclient.execute(httpget)) &#123;</span><br><span class=\"line\">                HttpEntity entity = response.getEntity();</span><br><span class=\"line\">                System.out.println(EntityUtils.toString(entity));</span><br><span class=\"line\">                EntityUtils.consume(entity);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>成功访问，输出如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;args&quot;: &#123;&#125;, </span><br><span class=\"line\">  &quot;headers&quot;: &#123;</span><br><span class=\"line\">    &quot;Accept-Encoding&quot;: &quot;gzip,deflate&quot;, </span><br><span class=\"line\">    &quot;Connection&quot;: &quot;close&quot;, </span><br><span class=\"line\">    &quot;Host&quot;: &quot;httpbin.org&quot;, </span><br><span class=\"line\">    &quot;User-Agent&quot;: &quot;Apache-HttpClient/4.5.3 (Java/1.8.0_121)&quot;</span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  &quot;origin&quot;: &quot;60.219.211.8&quot;, </span><br><span class=\"line\">  &quot;url&quot;: &quot;https://httpbin.org/get&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注：这里访问的并不是一个不受信任的站点，但是实际测试不受信任的站点也可以正常访问。</strong></p>\n",
            "tags": [
                "Java",
                "HttpClient"
            ]
        }
    ]
}