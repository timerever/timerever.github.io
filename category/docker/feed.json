{
    "version": "https://jsonfeed.org/version/1",
    "title": "A Blog • All posts by \"docker\" category",
    "description": "Just another blog.",
    "home_page_url": "https://blog.timerever.tk",
    "items": [
        {
            "id": "https://blog.timerever.tk/2017/03/13/docker-learning-trip-6/",
            "url": "https://blog.timerever.tk/2017/03/13/docker-learning-trip-6/",
            "title": "Docker 学习之旅（六）：使用 Docker 搭建 Java Web 运行环境",
            "date_published": "2017-03-13T01:58:28.000Z",
            "content_html": "<p>学习 Docker 在一开始肯定不是去学习它的理论（至少对大部分人而言），而是学习它的使用方法进而去使用。大概搭建好了 Docker 的环境，也尝试了创建自己的 Docker 镜像，现在就可以尝试一些比较实用的东西，比如使用 Docker 来搭建 Java Web 运行环境。</p>\n<h3 id=\"寻找镜像\"><a href=\"#寻找镜像\" class=\"headerlink\" title=\"寻找镜像\"></a>寻找镜像</h3><p>既然官方的镜像那么多，那么我们为什么不先去看一下官方镜像呢？打开 Docker Hub 一搜索 tomcat，排在第一个的就是。</p>\n<p>地址：<a href=\"https://hub.docker.com/_/tomcat/\">https://hub.docker.com/_/tomcat/</a></p>\n<p>这边选择 tomcat7 + jre7，但是通过查看构建所使用的 <code>Dockfile</code> 文件发现，tomcat 的官方源采用的是 jre7 是 openJDK7 的 jre，这里需要注意。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"下载运行-tomcat\"><a href=\"#下载运行-tomcat\" class=\"headerlink\" title=\"下载运行 tomcat\"></a>下载运行 tomcat</h3><p>tomcat 的默认启动参数为 <code>CMD [&quot;catalina.sh&quot;, &quot;run&quot;]</code>，启动方式为：</p>\n<pre><code>docker run -it --rm tomcat:7.0\n</code></pre>\n<p>使用 <code>http://container-ip:8080</code> 在浏览器访问。</p>\n<p>或者将端口映射到本地，运行：</p>\n<pre><code>$ docker run -it --rm -p 8888:8080 tomcat:7.0\n</code></pre>\n<p>然后使用 <code>http://localhost:8888</code> 或是 <code>http://host-ip:8888</code> 访问。</p>\n<h3 id=\"部署-Java-Web-项目\"><a href=\"#部署-Java-Web-项目\" class=\"headerlink\" title=\"部署 Java Web 项目\"></a>部署 Java Web 项目</h3><p>文档上已经说明，对于 tomcat 7 ，tomcat 所在目录为 <code>/usr/local/tomcat</code>，所以对其进行修改完成部署。</p>\n<h4 id=\"复制文件\"><a href=\"#复制文件\" class=\"headerlink\" title=\"复制文件\"></a>复制文件</h4><p>先使用如下命令启动容器：</p>\n<pre><code>$ docker run -it -v /home/ubuntu/tomcat:/mnt/war tomcat:7.0 /bin/bash\n</code></pre>\n<p>此处相关参数包括：</p>\n<ul>\n<li><code>-i</code>：表示以“交互模式”运行容器</li>\n<li><code>-t</code>：表示容器启动后会进入其命令行</li>\n<li><code>-v</code>：表示需要将本地哪个目录挂载到容器中，格式：-v &lt;宿主机目录&gt;:&lt;容器目录&gt;</li>\n</ul>\n<p>即运行后进入容器命令行，并将主机的 <code>/home/ubuntu/tomcat</code> 挂载到了容器的 <code>/mnt/war</code> 目录。</p>\n<p>然后将部署文件拷贝到主机的 <code>/home/ubuntu/tomcat</code> 目录并继续在容器中操作部署程序。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cd webapps/ROOT/</span></span><br><span class=\"line\"><span class=\"comment\"># rm -rf *</span></span><br><span class=\"line\"><span class=\"comment\"># cp -r /mnt/war/* .</span></span><br><span class=\"line\"><span class=\"comment\"># exit</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建镜像\"><a href=\"#创建镜像\" class=\"headerlink\" title=\"创建镜像\"></a>创建镜像</h4><p>此处需要记住刚才所运行容器的 ID，bash 里面 <code>root@0b2d4744734c</code> 的 ‘root@’ 后面的便是容器 ID。如果已经找不到，可使用 <code>docker ps -a</code> 查看之前所运行过的所有容器。</p>\n<p>然后创建镜像。</p>\n<pre><code>$ docker commit 0b2d4744734c timerever/javaweb:1.0\n</code></pre>\n<h3 id=\"运行镜像\"><a href=\"#运行镜像\" class=\"headerlink\" title=\"运行镜像\"></a>运行镜像</h3><p>使用刚刚自定的名称运行镜像。</p>\n<pre><code>docker run -it --rm -p 8888:8080 timerever/javaweb:1.0 catalina.sh run\n</code></pre>\n",
            "tags": [
                "Docker",
                "Java Web"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/03/11/docker-learning-trip-5/",
            "url": "https://blog.timerever.tk/2017/03/11/docker-learning-trip-5/",
            "title": "Docker 学习之旅（五）：Docker 下的 srceenfetch",
            "date_published": "2017-03-11T01:25:43.000Z",
            "content_html": "<p>在之前介绍了 <code>Dockerfile</code> 文件和 Docker Hub 的使用，现在就来完整的应用其创建一个 Docker 下的 srceenfetch。</p>\n<h4 id=\"关于-srceenfetch\"><a href=\"#关于-srceenfetch\" class=\"headerlink\" title=\"关于 srceenfetch\"></a>关于 srceenfetch</h4><p>srceenfetch 基本是我在每一个 Linux 主机都会安装的程序，大概就是用来秀 Linux 和一个简略但直观地展示硬件环境的一个应用程序。</p>\n<p>该项目托管在 GitHub，项目地址为：<a href=\"https://github.com/KittyKatt/screenFetch\">https://github.com/KittyKatt/screenFetch</a>。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"创建-Docker-Hub-仓库\"><a href=\"#创建-Docker-Hub-仓库\" class=\"headerlink\" title=\"创建 Docker Hub 仓库\"></a>创建 Docker Hub 仓库</h3><p>在 Docker Hub 网页上创建一个 Docker Hub 仓库，具体操作很简单，不再赘述。</p>\n<p>此处创建的仓库为：<code>timerever/screenfetch</code></p>\n<h3 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h3><h4 id=\"创建-Dockerfile-文件\"><a href=\"#创建-Dockerfile-文件\" class=\"headerlink\" title=\"创建 Dockerfile 文件\"></a>创建 Dockerfile 文件</h4><p>因为 screenfetch 在 Ubuntu 中可以直接通过 <code>apt-get</code> 安装，所以直接使用 Ubuntu 源安装。</p>\n<p>创建 <code>Dockerfile</code> 文件。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi Dockerfile</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get update &amp;&amp; apt-get install -y screenfetch</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> screenfetch</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"构建镜像并运行\"><a href=\"#构建镜像并运行\" class=\"headerlink\" title=\"构建镜像并运行\"></a>构建镜像并运行</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build -t <span class=\"string\">&quot;timerever/screenfetch&quot;</span> .</span><br><span class=\"line\">$ docker run timerever/screenfetch</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"上传镜像\"><a href=\"#上传镜像\" class=\"headerlink\" title=\"上传镜像\"></a>上传镜像</h3><pre><code>docker push timerever/screenfetch\n</code></pre>\n<p>如果没有登录，先使用 <code>docker login</code> 登录即可。</p>\n",
            "tags": [
                "Docker"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/03/09/docker-learning-trip-4/",
            "url": "https://blog.timerever.tk/2017/03/09/docker-learning-trip-4/",
            "title": "Docker 学习之旅（四）：Docker Hub",
            "date_published": "2017-03-09T06:42:13.000Z",
            "content_html": "<p>Docker Hub 是一个由 Docker 公司负责维护的公共注册中心，它包含了超过 15,000 个可用来下载和构建容器的镜像，并且还提供认证、工作组结构、工作流工具（比如 webhooks）、构建触发器以及私有工具（比如私有仓库可用于存储你并不想公开分享的镜像）。</p>\n<h3 id=\"总览\"><a href=\"#总览\" class=\"headerlink\" title=\"总览\"></a>总览</h3><p><a href=\"https://docs.docker.com/docker-hub/\">Docker Hub</a> 负责集中用户账号、镜像和公开的命名空间的信息，分别由不同的部分组成：</p>\n<ul>\n<li>Web UI</li>\n<li>Meta-data store (comments, stars, list public repositories)</li>\n<li>Authentication service</li>\n<li>Tokenization</li>\n</ul>\n<p>这仅仅是 Docker Hub 的一个基本组成，它对大多数的个人和小型企业是十分有帮助的。在改版后，文档将 Docker Hub 部分独立出去，这里遵循以前的顺序，介绍下 Docker Hub 的基础应用。</p>\n<p>有关于 Docker Hub 的文档：<a href=\"https://docs.docker.com/docker-hub/\">https://docs.docker.com/docker-hub/</a></p>\n<span id=\"more\"></span>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>没有登录帐号的情况下可以 <code>search</code> 或者 <code>pull</code> 镜像，但是不能 <code>push</code> 镜像。</p>\n<h3 id=\"团队和组织\"><a href=\"#团队和组织\" class=\"headerlink\" title=\"团队和组织\"></a>团队和组织</h3><p>太高大上，个人的我用不上，不太了解。</p>\n<h3 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h3><h4 id=\"搜索镜像\"><a href=\"#搜索镜像\" class=\"headerlink\" title=\"搜索镜像\"></a>搜索镜像</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker search centos</span><br><span class=\"line\">NAME                                 DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class=\"line\">centos                               The official build of CentOS.                   1034      [OK]</span><br><span class=\"line\">ansible/centos7-ansible              Ansible on Centos7                              43                   [OK]</span><br><span class=\"line\">tutum/centos                         Centos image with SSH access. For the root...   13                   [OK]</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>没有 <code>/</code> 的镜像说明来自顶层的官方镜像。</p>\n<p>可以使用 <code>docker pull &lt;imagename&gt;</code> 下载所需要的镜像。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull centos</span><br><span class=\"line\">latest: Pulling from centos</span><br><span class=\"line\">6941bfcbbfca: Pull complete</span><br><span class=\"line\">41459f052977: Pull complete</span><br><span class=\"line\">fd44297e2ddb: Already exists</span><br><span class=\"line\">centos:latest: The image you are pulling has been verified. Important: image verification is a tech preview feature and should not be relied on to provide security.</span><br><span class=\"line\">Digest: sha256:d601d3b928eb2954653c59e65862aabb31edefa868bd5148a41fa45004c12288</span><br><span class=\"line\">Status: Downloaded newer image for centos:latest</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看源标签\"><a href=\"#查看源标签\" class=\"headerlink\" title=\"查看源标签\"></a>查看源标签</h4><p>Docker Hub 的 “Tags” 显示了可以获取的版本和相关联的镜像大小。镜像大小是镜像和累积的所有父镜像之和，也是当你执行 <code>docker save</code> 时创建的 Tar 文件的大小。</p>\n<h4 id=\"创建新仓库\"><a href=\"#创建新仓库\" class=\"headerlink\" title=\"创建新仓库\"></a>创建新仓库</h4><p>有 xxxx 的命名规则，文档都有不再赘述，创建完成后就可以使用 <code>docker push</code> 来上传镜像。</p>\n<h4 id=\"上传镜像\"><a href=\"#上传镜像\" class=\"headerlink\" title=\"上传镜像\"></a>上传镜像</h4><p>在往 Docker Hub 上传镜像之前，你需要使用 Docker Hub 的用户名和仓库名来命名本地镜像。你可以通过使用特殊的 <code>:&lt;tag&gt;</code> 标签来往一个仓库添加多个镜像。如果不指明，则默认为 <code>latest</code>。</p>\n<p>可以使用 <code>docker build -t &lt;hub-user&gt;/&lt;repo-name&gt;[:&lt;tag&gt;]</code> 在构建镜像时命名，使用 <code>docker tag &lt;existing-image&gt; &lt;hub-user&gt;/&lt;repo-name&gt;[:&lt;tag&gt;]</code> 重命名已经存在的本地镜像，或使用 <code>docker commit &lt;exiting-container&gt; &lt;hub-user&gt;/&lt;repo-name&gt;[:&lt;tag&gt;]</code> 来提交更改。</p>\n<p>然后就可以上传镜像。</p>\n<pre><code>$ docker push &lt;hub-user&gt;/&lt;repo-name&gt;:&lt;tag&gt;\n</code></pre>\n<h4 id=\"省略其余\"><a href=\"#省略其余\" class=\"headerlink\" title=\"省略其余\"></a>省略其余</h4><p>省略其余还未了解及用到的部分，请自行查阅文档。</p>\n<h3 id=\"自动构建\"><a href=\"#自动构建\" class=\"headerlink\" title=\"自动构建\"></a>自动构建</h3><p>有其优点，当然也有其缺点，大体上就是通过链接到 GitHub 或是 Bitbucket 然后再使用。虽然使用过这两个 git 的管理工具，但是初入 Docker 暂不打算先了解自动构建，后期有精力或有需求再看。</p>\n<h3 id=\"继续省略其余\"><a href=\"#继续省略其余\" class=\"headerlink\" title=\"继续省略其余\"></a>继续省略其余</h3><p>个人认为的入门级应用就这些，其余的不再赘述，有需要的可以自行查看官方文档。</p>\n",
            "tags": [
                "Docker"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/03/06/docker-learning-trip-3/",
            "url": "https://blog.timerever.tk/2017/03/06/docker-learning-trip-3/",
            "title": "Docker 学习之旅（三）：创建基础镜像",
            "date_published": "2017-03-06T02:37:56.000Z",
            "content_html": "<p>基础镜像，官方说法是 <strong>base image</strong>，官方解释为“ <strong>An image that has no parent is a base image.</strong> ”也就是说，没有父镜像的镜像就是基础镜像，我们要做的就是创建一个基础镜像。</p>\n<p>文档链接：<a href=\"https://docs.docker.com/engine/userguide/eng-image/baseimages/\">https://docs.docker.com/engine/userguide/eng-image/baseimages/</a></p>\n<span id=\"more\"></span>\n\n<h3 id=\"使用-tar-创建一个完整镜像\"><a href=\"#使用-tar-创建一个完整镜像\" class=\"headerlink\" title=\"使用 tar 创建一个完整镜像\"></a>使用 <code>tar</code> 创建一个完整镜像</h3><p>执行 <code>$ docker run raring cat /etc/lsb-release</code> 命令时报错且解决无果，可能 Debian 的发行版和 Ubuntu还是存在些许差异。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run raring cat /etc/lsb-release</span><br><span class=\"line\">container_linux.go:247: starting container process caused &quot;exec: \\&quot;cat\\&quot;: executable file not found in $PATH&quot;</span><br><span class=\"line\">docker: Error response from daemon: oci runtime error: container_linux.go:247: starting container process caused &quot;exec: \\&quot;cat\\&quot;: executable file not found in $PATH&quot;.</span><br><span class=\"line\">ERRO[0000] error getting events from daemon: net/http: request canceled</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-scratch-创建一个简单的基础镜像\"><a href=\"#使用-scratch-创建一个简单的基础镜像\" class=\"headerlink\" title=\"使用 scratch 创建一个简单的基础镜像\"></a>使用 scratch 创建一个简单的基础镜像</h3><p>当 <code>scratch</code> 在 Docker 的库中出现时，你不能 pull、run 或者在其他镜像标记这个名字，但是你可以在你的 <code>Dockerfile</code> 文件中引用它。</p>\n<p>例如，使用 <code>scratch</code> 创建一个最小化的容器：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> scratch</span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\"> hello /</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">&quot;/hello&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>然后你可以在当前目录使用 <code>docker build --tag hello .</code> 来构建容器。在这里需要 hello 文件，你可以从 Docker Github 的 <a href=\"https://github.com/docker-library/hello-world/blob/master/hello.c\">示例源代码</a> 中下载并编译，过程如下。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi Dockerfile</span><br><span class=\"line\">$ wget https://raw.githubusercontent.com/docker-library/hello-world/master/hello.c</span><br><span class=\"line\">$ gcc -o hello -static -nostartfiles hello.c</span><br><span class=\"line\">$ docker build --tag hello .</span><br><span class=\"line\">$ docker run hello</span><br><span class=\"line\"></span><br><span class=\"line\">Hello from Docker!</span><br><span class=\"line\">This message shows that your installation appears to be working correctly.</span><br><span class=\"line\"></span><br><span class=\"line\">To generate this message, Docker took the following steps:</span><br><span class=\"line\"> 1. The Docker client contacted the Docker daemon.</span><br><span class=\"line\"> 2. The Docker daemon pulled the <span class=\"string\">&quot;hello-world&quot;</span> image from the Docker Hub.</span><br><span class=\"line\"> 3. The Docker daemon created a new container from that image <span class=\"built_in\">which</span> runs the</span><br><span class=\"line\">    executable that produces the output you are currently reading.</span><br><span class=\"line\"> 4. The Docker daemon streamed that output to the Docker client, <span class=\"built_in\">which</span> sent it</span><br><span class=\"line\">    to your terminal.</span><br><span class=\"line\"></span><br><span class=\"line\">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class=\"line\"> $ docker run -it ubuntu bash</span><br><span class=\"line\"></span><br><span class=\"line\">Share images, automate workflows, and more with a free Docker ID:</span><br><span class=\"line\"> https://cloud.docker.com/</span><br><span class=\"line\"></span><br><span class=\"line\">For more examples and ideas, visit:</span><br><span class=\"line\"> https://docs.docker.com/engine/userguide/</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Docker"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/03/05/docker-learning-trip-2/",
            "url": "https://blog.timerever.tk/2017/03/05/docker-learning-trip-2/",
            "title": "Docker 学习之旅（二）：Dockerfile 命令",
            "date_published": "2017-03-05T12:37:20.000Z",
            "content_html": "<p>本篇是对 <code>Dockerfile</code> 文件的一个介绍，在了解完相关知识后，可以用 <code>Dockerfile</code> 文件创建一个简单的镜像。</p>\n<h3 id=\"参考和推荐\"><a href=\"#参考和推荐\" class=\"headerlink\" title=\"参考和推荐\"></a>参考和推荐</h3><p>文档链接：<a href=\"https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#general-guidelines-and-recommendations\">https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#general-guidelines-and-recommendations</a></p>\n<p>更详细的 <code>Dockerfile</code> 参考链接：<a href=\"https://docs.docker.com/engine/reference/builder/\">https://docs.docker.com/engine/reference/builder/</a>，同样适用于下文。</p>\n<ul>\n<li>容器的生命应该是短暂的</li>\n<li>可以使用 <code>.dockerignore</code> 文件来排除文件</li>\n<li>避免安装不需要的包</li>\n<li>每个容器都应该只有一个关注点</li>\n<li>最小化层的数量</li>\n<li>整理多行参数</li>\n<li>Build 缓存</li>\n</ul>\n<p>都是一些阅读理解的内容，详细见官方文档。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"Dockerfile-指南\"><a href=\"#Dockerfile-指南\" class=\"headerlink\" title=\"Dockerfile 指南\"></a>Dockerfile 指南</h3><p>文档链接：<a href=\"https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#the-dockerfile-instructions\">https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#the-dockerfile-instructions</a></p>\n<p>仅列出各命令简单用法，详细请参照上文列出的官方详细文档。</p>\n<h4 id=\"FROM\"><a href=\"#FROM\" class=\"headerlink\" title=\"FROM\"></a>FROM</h4><p>你可以在现有镜像的基础上构建自己的镜像。</p>\n<pre><code>FROM &lt;image&gt;\n</code></pre>\n<p>Or</p>\n<pre><code>FROM &lt;image&gt;:&lt;tag&gt;\n</code></pre>\n<p>Or</p>\n<pre><code>FROM &lt;image&gt;@&lt;digest&gt;\n</code></pre>\n<h4 id=\"LABEL\"><a href=\"#LABEL\" class=\"headerlink\" title=\"LABEL\"></a>LABEL</h4><p><code>LABEL</code> 命令用来给镜像添加元数据，可以更好地管理镜像等。</p>\n<p>用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span><br></pre></td></tr></table></figure>\n\n<p>可在一个命令中使用多个键值对，也可只使用一个。若镜像是以其他镜像 <code>FROM</code> 为基础的，相同的标签将会覆盖原有标签。</p>\n<h4 id=\"RUN\"><a href=\"#RUN\" class=\"headerlink\" title=\"RUN\"></a>RUN</h4><p>RUN指令将在当前映像之上的新层中执行任何命令，并提交执行结果，这个提交的的执行后的镜像将被 <code>Dockerfile</code> 的其余步骤使用。</p>\n<p><code>RUN</code> 指令有两种形式：</p>\n<ul>\n<li><code>RUN &lt;command&gt;</code>（shell 形式，命令在 shell 中运行，对于 Linux 默认为 /bin/sh -c，而对于 Windows 默认为 cmd /S /C）</li>\n<li><code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code>（执行形式）</li>\n</ul>\n<h4 id=\"APT-GET\"><a href=\"#APT-GET\" class=\"headerlink\" title=\"APT-GET\"></a>APT-GET</h4><p>这可能是 <code>RUN</code> 命令的最多使用情况，但是你应该避免使用 <code>RUN apt-get upgrade</code> 或是 <code>dist-upgrade</code>，因为许多“必要”的包将不会在无特权的容器内部被升级。如果一个镜像所包含的基础镜像过期，请联系管理员。</p>\n<p>记得将 <code>RUN apt-get update</code> 命令与 <code>apt-get install</code> 命令放在同一个 <code>RUN</code> 声明中，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y \\</span><br><span class=\"line\">    package-bar \\</span><br><span class=\"line\">    package-baz \\</span><br><span class=\"line\">    package-foo</span><br></pre></td></tr></table></figure>\n\n<p>在一个单独的 <code>RUN</code> 声明中使用 <code>apt-get update</code> 将会导致缓存问题和之后的 <code>apt-get install</code> 命令失败。</p>\n<h4 id=\"使用管道\"><a href=\"#使用管道\" class=\"headerlink\" title=\"使用管道\"></a>使用管道</h4><p>有一些 <code>RUN</code> 命令使用和 Linux 中同样的管道来将一个命令的输入导入到另一个命令当中，符号同样为 <code>|</code>。</p>\n<h4 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h4><p><code>CMD</code> 命令的主要作用是给可执行容器提供默认的参数。</p>\n<p><code>CMD</code> 命令有三种形式：</p>\n<ul>\n<li><code>CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code>（执行形式，最推荐的形式）</li>\n<li><code>CMD [&quot;param1&quot;,&quot;param2&quot;]</code>（入口点的默认参数）</li>\n<li><code>CMD command param1 param2</code>（shell 形式）</li>\n</ul>\n<p>在一个 <code>Dockerfile</code> 文件中，只能有一个 <code>CMD</code> 指令，如果你列出超过一个的 <code>CMD</code> 指令，只有最后一条会起作用。</p>\n<h4 id=\"EXPOSE\"><a href=\"#EXPOSE\" class=\"headerlink\" title=\"EXPOSE\"></a>EXPOSE</h4><p><code>EXPOSE</code> 命令用于开放容器的内部端口，支持环境变量（例如，<code>MYSQL_PORT_3306_TCP</code>）。但是<code>EXPOSE</code> 命令并不能使内部端口对宿主可见，你必须使用 <code>-p</code> 命令来开放特定端口或是使用 <code>-P</code> 命令来开放所有的 <code>EXPOSE</code> 的端口。</p>\n<pre><code>EXPOSE &lt;port&gt; [&lt;port&gt;...]\n</code></pre>\n<h4 id=\"ENV\"><a href=\"#ENV\" class=\"headerlink\" title=\"ENV\"></a>ENV</h4><p><code>ENV</code> 命令用来更新 <code>PATH</code> 环境变量。</p>\n<pre><code>ENV &lt;key&gt; &lt;value&gt;\nENV &lt;key&gt;=&lt;value&gt; ...\n</code></pre>\n<p>这是<code>ENV</code> 命令的两种使用形式，推荐使用第二种形式。</p>\n<h4 id=\"ADD-or-COPY\"><a href=\"#ADD-or-COPY\" class=\"headerlink\" title=\"ADD or COPY\"></a>ADD or COPY</h4><p><code>ADD</code> 和 <code>COPY</code> 命令拥有相似的功能，通常而言，<code>COPY</code> 因其更加透明而被推荐。但是 <code>COPY</code> 只能拷贝本地文件而 <code>ADD</code> 拥有更多的特性（比如本地 tar 提取和远程 URL 支持）。</p>\n<pre><code>ADD/COPY &lt;src&gt;... &lt;dest&gt;\nADD/COPY [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]\n</code></pre>\n<p>省略众多详细介绍，详见文档。</p>\n<h4 id=\"ENTRYPOINT\"><a href=\"#ENTRYPOINT\" class=\"headerlink\" title=\"ENTRYPOINT\"></a>ENTRYPOINT</h4><pre><code>ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]（执行形式，推荐）\nENTRYPOINT command param1 param2（shell 形式）\n</code></pre>\n<p><code>ENTRYPOINT</code> 命令允许你配置容器使其变成可执行容器。</p>\n<h4 id=\"USER\"><a href=\"#USER\" class=\"headerlink\" title=\"USER\"></a>USER</h4><p><code>USER</code> 可以使容器改变运行用户，通过在 <code>Dockerfile</code> 文件中使用类似 <code>RUN groupadd -r postgres &amp;&amp; useradd -r -g postgres postgres</code> 的命令来创建用户和组。</p>\n<h4 id=\"WORKDIR\"><a href=\"#WORKDIR\" class=\"headerlink\" title=\"WORKDIR\"></a>WORKDIR</h4><pre><code>WORKDIR /path/to/workdir\n</code></pre>\n<p><code>WORKDIR</code> 指令可以设置 <code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code>、<code>COPY</code> 和 <code>ADD</code> 指令的工作目录。即使后续并不会使用到 <code>WORKDIR</code> 指令，它仍然会被创建。</p>\n<p><code>WORKDIR</code> 指令可在一个 <code>Dockerfile</code> 文件中使用多次。如果给定一个相对路径，那么它会相对于之前的 <code>WORKDIR</code> 指令。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WORKDIR /a</span><br><span class=\"line\">WORKDIR b</span><br><span class=\"line\">WORKDIR c</span><br><span class=\"line\">RUN pwd</span><br></pre></td></tr></table></figure>\n\n<p><code>pwd</code> 的输出将为 <code>/a/b/c</code>。</p>\n<p><code>WORKDIR</code> 指令也可解析在之前通过 <code>ENV</code> 指令设置的环境变量。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENV DIRPATH /path</span><br><span class=\"line\">WORKDIR $DIRPATH/$DIRNAME</span><br><span class=\"line\">RUN pwd</span><br></pre></td></tr></table></figure>\n\n<p><code>pwd</code> 的输出将为 <code>/path/$DIRNAME</code>。</p>\n<h4 id=\"ONBUILD\"><a href=\"#ONBUILD\" class=\"headerlink\" title=\"ONBUILD\"></a>ONBUILD</h4><pre><code>ONBUILD [INSTRUCTION]\n</code></pre>\n<p><code>ONBUILD</code> 命令在当前 <code>Dockerfile</code> 文件构建完成后执行，也就是该镜像最为其他镜像的父镜像时。它会在子镜像的 <code>Dockerfile</code> 文件中的 <code>FROM</code> 指令后立即被执行。</p>\n",
            "tags": [
                "Docker",
                "Dockerfile"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/03/03/docker-learning-trip-1/",
            "url": "https://blog.timerever.tk/2017/03/03/docker-learning-trip-1/",
            "title": "Docker 学习之旅（一）：Docker 的安装",
            "date_published": "2017-03-03T02:50:38.000Z",
            "content_html": "<blockquote>\n<p>所以之前弄得都差不多算是白弄了，一切还需要从头开始。</p>\n</blockquote>\n<p>由于使用的环境为 Ubuntu 的 16.10 最新稳定版本，所以打开 Ubuntu 的文档进行安装，以下命令全部来源于官方文档。</p>\n<p>为了防止惨剧的再次发生，记录下此时的版本，页面右上角显示为 Docker 17.03。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"卸载旧版本\"><a href=\"#卸载旧版本\" class=\"headerlink\" title=\"卸载旧版本\"></a>卸载旧版本</h3><p>文档链接：<a href=\"https://docs.docker.com/engine/installation/linux/ubuntu/#uninstall-old-versions\">https://docs.docker.com/engine/installation/linux/ubuntu/#uninstall-old-versions</a></p>\n<p>因为安装了旧版本的 Docker，所以需要先卸载老版本，当然没有安装过就不需要进行这一步了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get remove docker docker-engine</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-Docker\"><a href=\"#安装-Docker\" class=\"headerlink\" title=\"安装 Docker\"></a>安装 Docker</h3><p>文档链接：<a href=\"https://docs.docker.com/engine/installation/linux/ubuntu/#install-docker\">https://docs.docker.com/engine/installation/linux/ubuntu/#install-docker</a></p>\n<p>因为 Docker 是有 Ubuntu 的源的，所以直接采用 apt 安装，方便快捷。</p>\n<p>之前忘记说了，此次更新 Docker 有了两个版本，分别是 Docker CE 和 Docker EE。从名字其实就可以大概猜出，一个是普通版（其实是社区版）一个是企业版。所以，当然是选择社区版，而且官方提到了社区版和企业版的安装是有所不同的，在此只记录社区版的安装。</p>\n<h4 id=\"添加源\"><a href=\"#添加源\" class=\"headerlink\" title=\"添加源\"></a>添加源</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install \\</span><br><span class=\"line\">    apt-transport-https \\</span><br><span class=\"line\">    ca-certificates \\</span><br><span class=\"line\">    curl \\</span><br><span class=\"line\">    software-properties-common</span><br><span class=\"line\">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class=\"line\">$ sudo apt-key fingerprint 0EBFCD88</span><br><span class=\"line\">$ sudo add-apt-repository \\</span><br><span class=\"line\">   <span class=\"string\">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\</span></span><br><span class=\"line\"><span class=\"string\">   <span class=\"subst\">$(lsb_release -cs)</span> \\</span></span><br><span class=\"line\"><span class=\"string\">   stable&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>sudo apt-key fingerprint 0EBFCD88</code> 是用来验证源的 key 信息是否匹配，正确的信息应该为 <code>9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88</code>。</p>\n<p>这边使用的是 <code>stable</code> 版本，若要使用更新更快的 <code>edge</code> 版本，只需在最后一行的 <code>stable</code> 后面添加 <code>edge</code> 即可。对于这两个版本，官方解释如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Docker CE gives you the option to run stable or edge builds.</span><br><span class=\"line\">* Stable builds are released once per quarter.</span><br><span class=\"line\">* Edge builds are released once per month.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装-Docker-1\"><a href=\"#安装-Docker-1\" class=\"headerlink\" title=\"安装 Docker\"></a>安装 Docker</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure>\n\n<p>这样默认安装的总是最新版本的 Docker ，如果你想安装特定版本的 Docker ，可以使用 <code>sudo apt-get install docker-ce=&lt;VERSION&gt;</code> ，使用 <code>apt-cache madison docker-ce</code> 来显示可以安装的 Docker 版本。</p>\n<p>可以通过运行 <code>hello-world</code> 镜像来确认已将 Docker CE 正确安装。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更新-Docker\"><a href=\"#更新-Docker\" class=\"headerlink\" title=\"更新 Docker\"></a>更新 Docker</h4><p>首先运行 <code>sudo apt-get update</code>，然后根据安装指南选择想要安装的新版本。</p>\n<h3 id=\"Linux-下的可选安装步骤\"><a href=\"#Linux-下的可选安装步骤\" class=\"headerlink\" title=\"Linux 下的可选安装步骤\"></a>Linux 下的可选安装步骤</h3><p>文档链接：<a href=\"https://docs.docker.com/engine/installation/linux/linux-postinstall/\">https://docs.docker.com/engine/installation/linux/linux-postinstall/</a></p>\n<p>此处只列出个人所使用的可选安装。</p>\n<h4 id=\"使用非-root-用户管理-Docker\"><a href=\"#使用非-root-用户管理-Docker\" class=\"headerlink\" title=\"使用非 root 用户管理 Docker\"></a>使用非 root 用户管理 Docker</h4><p>通过文档我们得知 <code>docker</code> 的守护进程绑定的是 Unix socket，默认情况下该 Unix socket 是属于 root 用户，其他用户只能通过 <code>sudo</code> 进行访问，而 <code>docker</code> 的守护进程一直是由 root 用户运行的。所以如果想不使用 <code>sudo</code> 来使用 Docker，可以把用户添加到 <code>docker</code> 用户组。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo groupadd docker # 此处已经存在docker组可不执行操作</span><br><span class=\"line\">$ sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure>\n\n<p>注销重新登入系统来使用户组更新。</p>\n<p>通过不加 <code>sudo</code> 命令的 <code>docker</code> 命令来验证。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使-Docker-开机自启\"><a href=\"#使-Docker-开机自启\" class=\"headerlink\" title=\"使 Docker 开机自启\"></a>使 Docker 开机自启</h4><p>对于大多数的发行版本（RHEL, CentOS, Fedora, Ubuntu 16.04 and higher）使用 <code>systemd</code> 来管理开机自启动的服务，Ubuntu 14.10 及以下版本使用 <code>upstart</code>。</p>\n<ul>\n<li><code>systemd</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl enable docker # 开启自启动</span><br><span class=\"line\">$ sudo systemctl disable docker # 关闭自启动</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>upstart</code></li>\n</ul>\n<p>Docker 自动使用 <code>upstart</code> 配置自启动，通过以下命令来禁用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo manual | sudo tee /etc/init/docker.override</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>chkconfig</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo chkconfig docker on</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置-HTTP-代理\"><a href=\"#设置-HTTP-代理\" class=\"headerlink\" title=\"设置 HTTP 代理\"></a>设置 HTTP 代理</h4><p>因为 Docker 的服务器在国外，所以直连的速度很慢，就需要用国内的镜像或者使用 HTTP 代理，这里选择的是使用 HTTP 代理。该文档不在上面的可选安装步骤里，在后面的 Admin Guide 里面，链接：<a href=\"https://docs.docker.com/engine/admin/systemd/#http-proxy\">https://docs.docker.com/engine/admin/systemd/#http-proxy</a>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p /etc/systemd/system/docker.service.d</span><br><span class=\"line\">$ vi /etc/systemd/system/docker.service.d/http-proxy.conf</span><br></pre></td></tr></table></figure>\n\n<p>添加下列内容，按实际情况修改。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Service]</span><br><span class=\"line\">Environment=&quot;HTTP_PROXY=http://proxy.example.com:80/&quot;</span><br></pre></td></tr></table></figure>\n\n<p>或者使用以下内容设置不通过代理的地址。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Environment=&quot;HTTP_PROXY=http://proxy.example.com:80/&quot; &quot;NO_PROXY=localhost,127.0.0.1,docker-registry.somecorporation.com&quot;</span><br></pre></td></tr></table></figure>\n\n<p>然后继续操作完成配置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl daemon-reload</span><br><span class=\"line\">$ systemctl show --property=Environment docker # 验证配置是否已经重载，将显示上面配置的信息</span><br><span class=\"line\">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Docker"
            ]
        },
        {
            "id": "https://blog.timerever.tk/2017/03/02/docker-learning-trip-0/",
            "url": "https://blog.timerever.tk/2017/03/02/docker-learning-trip-0/",
            "title": "Docker 学习之旅（零）：出师不利",
            "date_published": "2017-03-02T13:51:49.000Z",
            "content_html": "<p>Docker——这是一个自出现以来就发展迅猛并获得成功的引擎。自从选择这个方向学习以来，一直在各个地方看到这个名词，但也只是大概了解到这是一个一般企业才会采用的东西。</p>\n<p>寒假放假前的课程设计，邀请了企业的人拿来了企业的真实项目来让我们学习，有幸在课余时间与主管技术的老师咨询讨论了一下。其中有一个话题就说到了 Docker，也是符合之前自己所想，老师也是说，像我们平时自己用，拿自己电脑跑或者租个 vps 什么的也就够了，也是用不上这种东西，不过从交谈中也大概了解到了应用 Docker 的优势，比如统一测试环境，比如秒级启动随时恢复等等等等。</p>\n<p>秉承着热爱计算机相关的一切的原则，还是决定先大概看一下这个东西，虽然可能实用性真的接近于零，不过就像自己选择这个专业一样，不是出于为了找工作或者怎样怎样的功利的心态，而是所谓的，真的是“热爱学习”。</p>\n<p>所以作为一只准程序猿，那么要做的第一件事便是打开官网寻找官方文档（所谓程序员必会通用技能），然后就是阅读英文文档（另一项必会技能）。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>使用的环境是 Ubuntu 的 16.10，默认的源里有 Docker，只需按照官网手册就可轻松安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install \\</span><br><span class=\"line\">    apt-transport-https \\</span><br><span class=\"line\">    ca-certificates \\</span><br><span class=\"line\">    curl \\</span><br><span class=\"line\">    software-properties-common</span><br><span class=\"line\">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class=\"line\">$ sudo apt-key fingerprint 0EBFCD88</span><br><span class=\"line\">$ sudo add-apt-repository \\</span><br><span class=\"line\">   <span class=\"string\">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\</span></span><br><span class=\"line\"><span class=\"string\">   <span class=\"subst\">$(lsb_release -cs)</span> \\</span></span><br><span class=\"line\"><span class=\"string\">   stable&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>等等，怎么有些不对，记得以前看到的源的指纹长度比这还要长……</p>\n<p>还以为是找错了文档，结果打开历史记录一看原来真的是文档改变了，最显而易见的就是网站的 favicon 颜色变深了，也确定了文档就是在今天中午或下午更新了（明明早上起来还看过的，摔！）。</p>\n<p>所以看来是写不成第一篇了，之前被称作 docker 和 docker-engine 的东西已经成为了旧版，现在出现的是 Docker CE 和 Docker EE，文档的开始已经让卸载旧版了。不过可能是因为刚刚更新，Docker CE 和 Docker EE 所指向的链接还不能打开，看来真正的旅程应该是等着文档补全然后再开始了（虽然知道“学习之旅”的翻译是中式英语但是真的找不到合适的翻译了）。</p>\n",
            "tags": [
                "Docker"
            ]
        }
    ]
}