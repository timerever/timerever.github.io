<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.timerever.tk</id>
    <title>A Blog • Posts by &#34;regular expression&#34; category</title>
    <link href="https://blog.timerever.tk" />
    <updated>2017-04-09T08:52:41.000Z</updated>
    <category term="Java" />
    <category term="HttpClient" />
    <category term="Jackson" />
    <category term="Docker" />
    <category term="Design Pattern" />
    <category term="Dockerfile" />
    <category term="Java Web" />
    <category term="Linux" />
    <category term="C" />
    <category term="Factory Patterns" />
    <category term="Android" />
    <category term="Huawei" />
    <category term="CyanogenMod" />
    <category term="Git" />
    <category term="GitHub" />
    <category term="Hibernate" />
    <category term="VMware" />
    <category term="vmdk" />
    <category term="Keycloak" />
    <category term="OAuth2" />
    <category term="SSO" />
    <category term="wget" />
    <category term="Regular Expression" />
    <category term="Ubuntu" />
    <category term="Ruby" />
    <category term="Jekyll" />
    <category term="Windows" />
    <category term="Regedit" />
    <category term="PowerShell" />
    <entry>
        <id>https://blog.timerever.tk/2017/04/09/regular-expression/</id>
        <title>正则表达式原理探究</title>
        <link rel="alternate" href="https://blog.timerever.tk/2017/04/09/regular-expression/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;正则表达式是被广为使用的工具，功能非常强大，但语法很复杂，想要完全记忆非常麻烦。&lt;br&gt;偶然间在《算法：第四版》上看到了有关于正则表达式原理的叙述，受益匪浅，在此做下笔记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;正则表达式的定义&#34;&gt;&lt;a href=&#34;#正则表达式的定义&#34; class=&#34;headerlink&#34; title=&#34;正则表达式的定义&#34;&gt;&lt;/a&gt;正则表达式的定义&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;什么是正则表达式？&lt;/strong&gt;一个正则表达式对应着一堆字符串，这些字符串构成一个集合，它们的共同特点就是匹配于这个正则表达式。例如：a(a|b) * b 就对应着第一个字符为a，最后一个字符为b，由a和b构成的字符串。 &lt;/p&gt;
&lt;p&gt;正则表达式有三种核心的基本结构：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;连接&lt;/em&gt;：如 abc，由 a, b, c连接而成。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;或&lt;/em&gt;：如 a|b|c，表示是 a 或 b 或 c。&lt;br&gt; ab|bcd表示ab或bcd。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;闭包&lt;/em&gt;：如a*b，表示0或若干个a和一个b连接而成的字符串。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上就是最最最基本的结构，是构成正则表达式的基础。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;我们可以使用括号改变优先级顺序，如 c(ac|b)d 表示 cacd, cbd。&lt;/p&gt;
&lt;p&gt;至于其它教程里写到的如 +,?, [] 等操作都是基本操作的简略缩写，它们都可以通过基本操作完成。    &lt;/p&gt;
&lt;p&gt;+ 是由那些基本操作完成的？(文章末尾给出答案)&lt;/p&gt;
&lt;p&gt;基本的语法就介绍到这，这篇文章并不是主要讲应用。有兴趣朋友可以在网上搜索完整的语法规则，非常详细。&lt;/p&gt;
&lt;h1 id=&#34;非确定有限状态自动机&#34;&gt;&lt;a href=&#34;#非确定有限状态自动机&#34; class=&#34;headerlink&#34; title=&#34;非确定有限状态自动机&#34;&gt;&lt;/a&gt;非确定有限状态自动机&lt;/h1&gt;&lt;h2 id=&#34;DFA&#34;&gt;&lt;a href=&#34;#DFA&#34; class=&#34;headerlink&#34; title=&#34;DFA&#34;&gt;&lt;/a&gt;DFA&lt;/h2&gt;&lt;p&gt;DFA 又叫确定有限状态自动机，即对于一个输入，它的输出状态是确定的。如图：  &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/regular-expression-1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;对于这个自动机，输出边是 Turn On 和 Turn Off 的动作，Turn On 导致状态变为 On，Turn Off 导致状态变为 Off。&lt;br&gt;这两个动作所导致的结果是可以预料的，确定的。所以说是确定有限状态自动机。&lt;/p&gt;
&lt;h2 id=&#34;NFA&#34;&gt;&lt;a href=&#34;#NFA&#34; class=&#34;headerlink&#34; title=&#34;NFA&#34;&gt;&lt;/a&gt;NFA&lt;/h2&gt;&lt;p&gt;NFA 叫非确定有限状态自动机，和 DFA 的唯一区别是它的输出是非确定的，DFA是NFA的一个子集。如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/regular-expression-2.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;还是那个例子，只不过状态 Off 的 Turn On 操作多了一个新的状态 Down  &lt;/p&gt;
&lt;p&gt;当我们进行 Turn On 操作时无法确定到达的是 On 还是 Down，因此是无法根据当前状态和输出边确定下一状态的，这就叫做非确定性有限状态自动机。&lt;/p&gt;
&lt;h2 id=&#34;实例&#34;&gt;&lt;a href=&#34;#实例&#34; class=&#34;headerlink&#34; title=&#34;实例&#34;&gt;&lt;/a&gt;实例&lt;/h2&gt;&lt;p&gt;我们先来看一个示例，它说明了 NFA 的性质和操作。如图：  &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/regular-expression-3.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;（图表示((A*B|AC)D)所对应的 NFA）&lt;/p&gt;
&lt;p&gt;我们定义的NFA有以下特点：     &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;正则表达式中每个字符有且只有一个对应的状态。&lt;/li&gt;
&lt;li&gt;字符所对应的状态有一条指向下一个字符对应状态的边（图中黑色的边）&lt;/li&gt;
&lt;li&gt;“(“,  “)”, “|“, 和”*”所对应的状态至少含有一条指出的边，可能指向任意状态（图中红色边）   &lt;/li&gt;
&lt;li&gt;一个状态只能有一条指出的黑色边&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们用构造的NFA去匹配文本，当从起始状态0能够到达最终状态的话，即匹配成功，这就是正则表达式匹配文本的原理。  &lt;/p&gt;
&lt;p&gt;NFA中状态的转换有以下两种:    &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;匹配转换： 当字符匹配时，由黑色的边转换到下一状态。&lt;/li&gt;
&lt;li&gt;ε-转换：不扫描任何字符，通过红色的边转换到另一个状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;NFA-的运行&#34;&gt;&lt;a href=&#34;#NFA-的运行&#34; class=&#34;headerlink&#34; title=&#34;NFA 的运行&#34;&gt;&lt;/a&gt;NFA 的运行&lt;/h2&gt;&lt;p&gt;运行的核心思想就是：遍历所有可能到达的状态序列，只要其中存在最终状态就匹配成功。类似于动态规划。&lt;/p&gt;
&lt;p&gt;首先将NFA中的两个状态转换表示出来。我们用一个char数组re[]保存正则表达式本身 ，如果re[i]存在于字母表中，那么就存在一个从i到i+1的匹配转换。     &lt;/p&gt;
&lt;p&gt;自然地，ε- 转换就用有向图G表示，实例中的 ε-转换可构建为: 0-&amp;gt;1  1-&amp;gt;2   1-&amp;gt;6    2-&amp;gt;3……以此类推。  &lt;/p&gt;
&lt;p&gt;当处于状态 0 时，我们遍历所有从0通过ε-转换(有向图的深度优先搜索)可到达的状态放入一个集合，再从中查找是否存在最终状态的值。&lt;br&gt;当匹配一个字符到达状态1后，再遍历所有从1通过ε-转换可到达的状态……如此反复，当文本结束时从集合中找到是否含有最终状态来说明是否到达接受状态。  &lt;/p&gt;
&lt;p&gt;例如，在实例中初始集合为{1, 2, 3, 4, 6}，如果第一个字符为A，则接下来可能的状态为 {3, 7} ,通过 ε- 转换可到 2，4，因此第二个字符状态集合为 {2, 3, 4, 7}。再不断重复这个过程直到文本结束。    &lt;/p&gt;
&lt;p&gt;输入A A B D会有什么样的轨迹？(文章末尾给出答案)&lt;/p&gt;
&lt;h2 id=&#34;NFA-的构造&#34;&gt;&lt;a href=&#34;#NFA-的构造&#34; class=&#34;headerlink&#34; title=&#34;NFA 的构造&#34;&gt;&lt;/a&gt;NFA 的构造&lt;/h2&gt;&lt;p&gt;长串的正则表达式都是三个基本操作和括号构成的，因此我们的NFA也可以看作成若干基本操作拼接而成，下面就来介绍一下基本操作所对应的 NFA。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;连接操作：字符加状态匹配即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/regular-expression-4.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;括号：用栈处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;闭包操作：   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;出现在单个字符之后：在该字符和 * 之间添加两条 ε- 转换。&lt;br&gt; &lt;img src=&#34;/regular-expression-5.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;出现在右括号之后：在栈顶的左括号和 * 之间添加两条 ε- 转换。&lt;br&gt; &lt;img src=&#34;/regular-expression-6.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;或：A|B中A和B都是正则表达式。同样也是添加两条ε-转换，一条从左括号指向&lt;br&gt;B中第一个字符，另一条从|字符指向右括号。这使NFA能够进行选择。&lt;img src=&#34;/regular-expression-7.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;运用以上几个基本的 NFA，我们可以拼接出任意 NFA。  &lt;/p&gt;
&lt;h1 id=&#34;代码&#34;&gt;&lt;a href=&#34;#代码&#34; class=&#34;headerlink&#34; title=&#34;代码&#34;&gt;&lt;/a&gt;代码&lt;/h1&gt;&lt;p&gt;本篇文章以介绍概念为主，具体的实现可参照&lt;a href=&#34;http://algs4.cs.princeton.edu/54regexp/NFA.java.html&#34;&gt;NFA.java&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;后记&#34;&gt;&lt;a href=&#34;#后记&#34; class=&#34;headerlink&#34; title=&#34;后记&#34;&gt;&lt;/a&gt;后记&lt;/h1&gt;&lt;h2 id=&#34;感想&#34;&gt;&lt;a href=&#34;#感想&#34; class=&#34;headerlink&#34; title=&#34;感想&#34;&gt;&lt;/a&gt;感想&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;正则表达式是很强大的工具，网上教程一大把，但多数是直接告诉你语法，基本没规律，只能强记，效率略低。&lt;br&gt;明白原理后，不仅记忆深刻，而且还可以编写适合自己的规则。&lt;br&gt;（其实说到底都是《编译原理》课程上的东西，无奈学校不开😤好气哦）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;《算法：第4版》&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;答案&#34;&gt;&lt;a href=&#34;#答案&#34; class=&#34;headerlink&#34; title=&#34;答案&#34;&gt;&lt;/a&gt;答案&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;+ : (ab)+ 等价于 (ab)(ab)*&lt;/li&gt;
&lt;li&gt;{0, 1, 2, 3, 4, 6} -&amp;gt; {2, 3, 4, 7} -&amp;gt; {2, 3, 4} -&amp;gt; {5, 8, 9} -&amp;gt; {10}&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="Regular Expression" />
        <updated>2017-04-09T08:52:41.000Z</updated>
    </entry>
</feed>
